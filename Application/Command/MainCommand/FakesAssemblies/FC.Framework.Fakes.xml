<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FC.Framework.Fakes</name>
    </assembly>
    <members>
        <member name="T:FC.Framework.Domain.Fakes.ShimDomainException">
            <summary>FC.Framework.Domain.DomainException 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.Domain.Fakes.ShimDomainException.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.Domain.Fakes.ShimDomainException.#ctor(FC.Framework.Domain.DomainException)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.Domain.Fakes.ShimDomainException.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.Domain.Fakes.ShimDomainException.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:FC.Framework.Domain.Fakes.ShimDomainException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:FC.Framework.Domain.Fakes.ShimDomainException.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.Domain.Fakes.ShimDomainException.CodeGet">
            <summary>设置 DomainException.get_Code() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Domain.Fakes.ShimDomainException.CodeSetInt32">
            <summary>设置 DomainException.set_Code(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Domain.Fakes.ShimDomainException.ConstructorInt32">
            <summary>设置 DomainException.DomainException(Int32 code) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Domain.Fakes.ShimDomainException.ConstructorInt32String">
            <summary>设置 DomainException.DomainException(Int32 code, String message) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Domain.Fakes.ShimDomainException.ConstructorInt32StringObjectArray">
            <summary>设置 DomainException.DomainException(Int32 code, String message, Object[] args) 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.Domain.Fakes.ShimDomainException.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:FC.Framework.Domain.Fakes.ShimDomainException.AllInstances.CodeGet">
            <summary>设置 DomainException.get_Code() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Domain.Fakes.ShimDomainException.AllInstances.CodeSetInt32">
            <summary>设置 DomainException.set_Code(Int32 value) 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.Domain.Fakes.ShimEntityExtension">
            <summary>FC.Framework.Domain.EntityExtension 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.Domain.Fakes.ShimEntityExtension.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.Domain.Fakes.ShimEntityExtension.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.Domain.Fakes.ShimEntityExtension.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:FC.Framework.Domain.Fakes.ShimEntityExtension.RaiseEventOf1IEntityM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{FC.Framework.Domain.IEntity,``0})">
            <summary>设置 EntityExtension.RaiseEvent(IEntity entity, !!0 event) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Domain.Fakes.ShimEntityExtension.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.Domain.Fakes.ShimEntityExtension.RemoveCacheIEntityString">
            <summary>设置 EntityExtension.RemoveCache(IEntity eventHandler, String cacheKey) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Domain.Fakes.ShimEntityExtension.ThrowDomainExceptionIEntityString">
            <summary>设置 EntityExtension.ThrowDomainException(IEntity entity, String message) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Domain.Fakes.ShimEntityExtension.ThrowDomainExceptionIEntityStringException">
            <summary>设置 EntityExtension.ThrowDomainException(IEntity entity, String message, Exception innerException) 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.Domain.Fakes.StubDomainException">
            <summary>FC.Framework.Domain.DomainException 的存根类型</summary>
        </member>
        <member name="M:FC.Framework.Domain.Fakes.StubDomainException.#ctor(System.Int32)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:FC.Framework.Domain.Fakes.StubDomainException.#ctor(System.Int32,System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:FC.Framework.Domain.Fakes.StubDomainException.#ctor(System.Int32,System.String,System.Object[])">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:FC.Framework.Domain.Fakes.StubDomainException.AttachBackingFieldToHelpLink">
            <summary>附加委托以将 StubDomainException.HelpLink 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:FC.Framework.Domain.Fakes.StubDomainException.AttachBackingFieldToSource">
            <summary>附加委托以将 StubDomainException.Source 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="F:FC.Framework.Domain.Fakes.StubDomainException.DataGet">
            <summary>设置 Exception.get_Data() 的 stub</summary>
        </member>
        <member name="M:FC.Framework.Domain.Fakes.StubDomainException.GetBaseException">
            <summary>设置 Exception.GetBaseException() 的 存根</summary>
        </member>
        <member name="F:FC.Framework.Domain.Fakes.StubDomainException.GetBaseException01">
            <summary>设置 Exception.GetBaseException() 的 stub</summary>
        </member>
        <member name="M:FC.Framework.Domain.Fakes.StubDomainException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>设置 Exception.GetObjectData(SerializationInfo info, StreamingContext context) 的 存根</summary>
        </member>
        <member name="F:FC.Framework.Domain.Fakes.StubDomainException.GetObjectDataSerializationInfoStreamingContext">
            <summary>设置 Exception.GetObjectData(SerializationInfo info, StreamingContext context) 的 stub</summary>
        </member>
        <member name="F:FC.Framework.Domain.Fakes.StubDomainException.HelpLinkGet">
            <summary>设置 Exception.get_HelpLink() 的 stub</summary>
        </member>
        <member name="F:FC.Framework.Domain.Fakes.StubDomainException.HelpLinkSetString">
            <summary>设置 Exception.set_HelpLink(String value) 的 stub</summary>
        </member>
        <member name="M:FC.Framework.Domain.Fakes.StubDomainException.InitializeStub">
            <summary>初始化 type StubDomainException 的新实例</summary>
        </member>
        <member name="F:FC.Framework.Domain.Fakes.StubDomainException.MessageGet">
            <summary>设置 Exception.get_Message() 的 stub</summary>
        </member>
        <member name="F:FC.Framework.Domain.Fakes.StubDomainException.SourceGet">
            <summary>设置 Exception.get_Source() 的 stub</summary>
        </member>
        <member name="F:FC.Framework.Domain.Fakes.StubDomainException.SourceSetString">
            <summary>设置 Exception.set_Source(String value) 的 stub</summary>
        </member>
        <member name="F:FC.Framework.Domain.Fakes.StubDomainException.StackTraceGet">
            <summary>设置 Exception.get_StackTrace() 的 stub</summary>
        </member>
        <member name="M:FC.Framework.Domain.Fakes.StubDomainException.ToString">
            <summary>设置 Exception.ToString() 的 存根</summary>
        </member>
        <member name="F:FC.Framework.Domain.Fakes.StubDomainException.ToString01">
            <summary>设置 Exception.ToString() 的 stub</summary>
        </member>
        <member name="P:FC.Framework.Domain.Fakes.StubDomainException.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:FC.Framework.Domain.Fakes.StubDomainException.Data">
            <summary>设置 Exception.get_Data() 的 stub</summary>
        </member>
        <member name="P:FC.Framework.Domain.Fakes.StubDomainException.HelpLink">
            <summary>设置 Exception.get_HelpLink() 的 stub</summary>
        </member>
        <member name="P:FC.Framework.Domain.Fakes.StubDomainException.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:FC.Framework.Domain.Fakes.StubDomainException.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:FC.Framework.Domain.Fakes.StubDomainException.Message">
            <summary>设置 Exception.get_Message() 的 stub</summary>
        </member>
        <member name="P:FC.Framework.Domain.Fakes.StubDomainException.Source">
            <summary>设置 Exception.get_Source() 的 stub</summary>
        </member>
        <member name="P:FC.Framework.Domain.Fakes.StubDomainException.StackTrace">
            <summary>设置 Exception.get_StackTrace() 的 stub</summary>
        </member>
        <member name="T:FC.Framework.Domain.Fakes.StubIAggregateRoot">
            <summary>FC.Framework.Domain.IAggregateRoot 的存根类型</summary>
        </member>
        <member name="M:FC.Framework.Domain.Fakes.StubIAggregateRoot.#ctor">
            <summary>初始化 type StubIAggregateRoot 的新实例</summary>
        </member>
        <member name="F:FC.Framework.Domain.Fakes.StubIAggregateRoot.IDGet">
            <summary>设置 IAggregateRoot.get_ID() 的 stub</summary>
        </member>
        <member name="P:FC.Framework.Domain.Fakes.StubIAggregateRoot.fcf::FC#Framework#Domain#IAggregateRoot#ID">
            <summary>设置 IAggregateRoot.get_ID() 的 stub</summary>
        </member>
        <member name="T:FC.Framework.Domain.Fakes.StubIEntity">
            <summary>FC.Framework.Domain.IEntity 的存根类型</summary>
        </member>
        <member name="M:FC.Framework.Domain.Fakes.StubIEntity.#ctor">
            <summary>初始化 type StubIEntity 的新实例</summary>
        </member>
        <member name="T:FC.Framework.Domain.Fakes.StubIValueObject">
            <summary>FC.Framework.Domain.IValueObject 的存根类型</summary>
        </member>
        <member name="M:FC.Framework.Domain.Fakes.StubIValueObject.#ctor">
            <summary>初始化 type StubIValueObject 的新实例</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1">
            <summary>FC.Framework.DynamicReflection.Dynamic`1 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.#ctor(FC.Framework.DynamicReflection.Dynamic{`0})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.Constructor">
            <summary>设置 Dynamic`1.Dynamic`1() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimConstructor">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Constructor 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimConstructor.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimConstructor.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Constructor)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimConstructor.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimConstructor.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimConstructor.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimConstructor.Constructor">
            <summary>设置 Constructor.Constructor() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimConstructor.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimConstructor.ShimExplicit">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Constructor+Explicit 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimConstructor.ShimExplicit.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimConstructor.ShimExplicit.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Constructor.Explicit)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimConstructor.ShimExplicit.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimConstructor.ShimExplicit.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimConstructor.ShimExplicit.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimConstructor.ShimExplicit.Constructor">
            <summary>设置 Explicit.Explicit() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimConstructor.ShimExplicit.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimConstructor.ShimExplicit`1">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Constructor+Explicit`1 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimConstructor.ShimExplicit`1.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimConstructor.ShimExplicit`1.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Constructor.Explicit{`1})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimConstructor.ShimExplicit`1.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimConstructor.ShimExplicit`1.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimConstructor.ShimExplicit`1.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimConstructor.ShimExplicit`1.Constructor">
            <summary>设置 Explicit`1.Explicit`1() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimConstructor.ShimExplicit`1.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimConstructor.ShimExplicit`2">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Constructor+Explicit`2 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimConstructor.ShimExplicit`2.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimConstructor.ShimExplicit`2.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Constructor.Explicit{`1,`2})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimConstructor.ShimExplicit`2.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimConstructor.ShimExplicit`2.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimConstructor.ShimExplicit`2.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimConstructor.ShimExplicit`2.Constructor">
            <summary>设置 Explicit`2.Explicit`2() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimConstructor.ShimExplicit`2.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimConstructor.ShimExplicit`3">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Constructor+Explicit`3 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimConstructor.ShimExplicit`3.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimConstructor.ShimExplicit`3.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Constructor.Explicit{`1,`2,`3})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimConstructor.ShimExplicit`3.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimConstructor.ShimExplicit`3.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimConstructor.ShimExplicit`3.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimConstructor.ShimExplicit`3.Constructor">
            <summary>设置 Explicit`3.Explicit`3() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimConstructor.ShimExplicit`3.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimConstructor.ShimExplicit`4">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Constructor+Explicit`4 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimConstructor.ShimExplicit`4.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimConstructor.ShimExplicit`4.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Constructor.Explicit{`1,`2,`3,`4})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimConstructor.ShimExplicit`4.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimConstructor.ShimExplicit`4.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimConstructor.ShimExplicit`4.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimConstructor.ShimExplicit`4.Constructor">
            <summary>设置 Explicit`4.Explicit`4() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimConstructor.ShimExplicit`4.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimConstructor.ShimExplicit`5">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Constructor+Explicit`5 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimConstructor.ShimExplicit`5.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimConstructor.ShimExplicit`5.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Constructor.Explicit{`1,`2,`3,`4,`5})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimConstructor.ShimExplicit`5.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimConstructor.ShimExplicit`5.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimConstructor.ShimExplicit`5.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimConstructor.ShimExplicit`5.Constructor">
            <summary>设置 Explicit`5.Explicit`5() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimConstructor.ShimExplicit`5.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimConstructor.ShimExplicit`6">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Constructor+Explicit`6 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimConstructor.ShimExplicit`6.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimConstructor.ShimExplicit`6.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Constructor.Explicit{`1,`2,`3,`4,`5,`6})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimConstructor.ShimExplicit`6.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimConstructor.ShimExplicit`6.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimConstructor.ShimExplicit`6.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimConstructor.ShimExplicit`6.Constructor">
            <summary>设置 Explicit`6.Explicit`6() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimConstructor.ShimExplicit`6.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimConstructor.ShimExplicit`7">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Constructor+Explicit`7 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimConstructor.ShimExplicit`7.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimConstructor.ShimExplicit`7.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Constructor.Explicit{`1,`2,`3,`4,`5,`6,`7})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimConstructor.ShimExplicit`7.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimConstructor.ShimExplicit`7.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimConstructor.ShimExplicit`7.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimConstructor.ShimExplicit`7.Constructor">
            <summary>设置 Explicit`7.Explicit`7() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimConstructor.ShimExplicit`7.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimConstructor.ShimExplicit`8">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Constructor+Explicit`8 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimConstructor.ShimExplicit`8.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimConstructor.ShimExplicit`8.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Constructor.Explicit{`1,`2,`3,`4,`5,`6,`7,`8})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimConstructor.ShimExplicit`8.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimConstructor.ShimExplicit`8.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimConstructor.ShimExplicit`8.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimConstructor.ShimExplicit`8.Constructor">
            <summary>设置 Explicit`8.Explicit`8() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimConstructor.ShimExplicit`8.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimConstructor.ShimExplicit`9">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Constructor+Explicit`9 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimConstructor.ShimExplicit`9.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimConstructor.ShimExplicit`9.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Constructor.Explicit{`1,`2,`3,`4,`5,`6,`7,`8,`9})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimConstructor.ShimExplicit`9.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimConstructor.ShimExplicit`9.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimConstructor.ShimExplicit`9.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimConstructor.ShimExplicit`9.Constructor">
            <summary>设置 Explicit`9.Explicit`9() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimConstructor.ShimExplicit`9.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimConstructor.ShimParams">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Constructor+Params 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimConstructor.ShimParams.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimConstructor.ShimParams.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Constructor.Params)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimConstructor.ShimParams.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimConstructor.ShimParams.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimConstructor.ShimParams.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimConstructor.ShimParams.Constructor">
            <summary>设置 Params.Params() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimConstructor.ShimParams.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+DynamicBase`1 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.DynamicBase{`1})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.Constructor">
            <summary>设置 DynamicBase`1.DynamicBase`1() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.EmitGetFieldDynamicEmitFieldInfoType">
            <summary>设置 DynamicBase`1.EmitGetField(DynamicEmit de, FieldInfo fieldInfo, Type memberType) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.EmitLoadThisDynamicEmitMemberInfo">
            <summary>设置 DynamicBase`1.EmitLoadThis(DynamicEmit de, MemberInfo memberInfo) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.EmitSetFieldDynamicEmitInt32FieldInfoType">
            <summary>设置 DynamicBase`1.EmitSetField(DynamicEmit de, Int32 argumentOffset, FieldInfo fieldInfo, Type knownArgumentType) 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+DynamicBase`1+Explicit 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.DynamicBase{`1}.Explicit)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.BuildConstructorInfoTypeArray">
            <summary>设置 Explicit.Build(ConstructorInfo constructorInfo, Type[] knownArgumentTypes) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.BuildTypeFieldInfoBooleanTypeArray">
            <summary>设置 Explicit.Build(Type memberType, FieldInfo fieldInfo, Boolean wantGet, Type[] knownArgumentTypes) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.BuildTypeMethodInfoTypeArray">
            <summary>设置 Explicit.Build(Type returnType, MethodInfo methodInfo, Type[] knownArgumentTypes) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.Constructor">
            <summary>设置 Explicit.Explicit() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.KnownArgumentTypesInt32">
            <summary>设置 Explicit.KnownArgumentTypes(Int32 discardFirstCount) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.KnownArgumentTypesInt32Int32">
            <summary>设置 Explicit.KnownArgumentTypes(Int32 discardFirst, Int32 discardCount) 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimConstructor">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+DynamicBase`1+Explicit+Constructor 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimConstructor.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.DynamicBase{`1}.Explicit.Constructor)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimConstructor.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimConstructor.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimConstructor.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimConstructor.Constructor">
            <summary>设置 Constructor.Constructor() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimConstructor.CreateDelegate">
            <summary>设置 Constructor.CreateDelegate() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimConstructor.CreateDelegateConstructorInfo">
            <summary>设置 Constructor.CreateDelegate(ConstructorInfo constructorInfo) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimConstructor.CreateDelegateParameterList">
            <summary>设置 Constructor.CreateDelegate(ParameterList flag) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimConstructor.CreateDelegateRuntimeMethodHandle">
            <summary>设置 Constructor.CreateDelegate(RuntimeMethodHandle methodHandle) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimConstructor.CreateDelegateTypeArray">
            <summary>设置 Constructor.CreateDelegate(Type[] parameterTypes) 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimConstructor.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimInstance">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+DynamicBase`1+Explicit+Instance 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimInstance.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.DynamicBase{`1}.Explicit.Instance)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimInstance.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimInstance.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimInstance.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimInstance.Constructor">
            <summary>设置 Instance.Instance() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimInstance.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimInstance.ShimField`1">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+DynamicBase`1+Explicit+Instance+Field`1 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimInstance.ShimField`1.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.DynamicBase{`1}.Explicit.Instance.Field{`2})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimInstance.ShimField`1.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimInstance.ShimField`1.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimInstance.ShimField`1.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimInstance.ShimField`1.Constructor">
            <summary>设置 Field`1.Field`1() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimInstance.ShimField`1.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimInstance.ShimField`1.ShimGetter">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+DynamicBase`1+Explicit+Instance+Field`1+Getter 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimInstance.ShimField`1.ShimGetter.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.DynamicBase{`1}.Explicit.Instance.Field{`2}.Getter)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimInstance.ShimField`1.ShimGetter.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimInstance.ShimField`1.ShimGetter.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimInstance.ShimField`1.ShimGetter.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimInstance.ShimField`1.ShimGetter.Constructor">
            <summary>设置 Getter.Getter() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimInstance.ShimField`1.ShimGetter.CreateDelegateFieldInfo">
            <summary>设置 Getter.CreateDelegate(FieldInfo fieldInfo) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimInstance.ShimField`1.ShimGetter.CreateDelegateRuntimeFieldHandle">
            <summary>设置 Getter.CreateDelegate(RuntimeFieldHandle fieldHandle) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimInstance.ShimField`1.ShimGetter.CreateDelegateString">
            <summary>设置 Getter.CreateDelegate(String fieldName) 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimInstance.ShimField`1.ShimGetter.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimInstance.ShimField`1.ShimSetter">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+DynamicBase`1+Explicit+Instance+Field`1+Setter 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimInstance.ShimField`1.ShimSetter.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.DynamicBase{`1}.Explicit.Instance.Field{`2}.Setter)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimInstance.ShimField`1.ShimSetter.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimInstance.ShimField`1.ShimSetter.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimInstance.ShimField`1.ShimSetter.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimInstance.ShimField`1.ShimSetter.Constructor">
            <summary>设置 Setter.Setter() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimInstance.ShimField`1.ShimSetter.CreateDelegateFieldInfo">
            <summary>设置 Setter.CreateDelegate(FieldInfo fieldInfo) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimInstance.ShimField`1.ShimSetter.CreateDelegateRuntimeFieldHandle">
            <summary>设置 Setter.CreateDelegate(RuntimeFieldHandle fieldHandle) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimInstance.ShimField`1.ShimSetter.CreateDelegateString">
            <summary>设置 Setter.CreateDelegate(String fieldName) 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimInstance.ShimField`1.ShimSetter.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimInstance.ShimFunction`1">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+DynamicBase`1+Explicit+Instance+Function`1 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimInstance.ShimFunction`1.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.DynamicBase{`1}.Explicit.Instance.Function{`2})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimInstance.ShimFunction`1.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimInstance.ShimFunction`1.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimInstance.ShimFunction`1.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimInstance.ShimFunction`1.Constructor">
            <summary>设置 Function`1.Function`1() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimInstance.ShimFunction`1.CreateDelegateMethodInfo">
            <summary>设置 Function`1.CreateDelegate(MethodInfo methodInfo) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimInstance.ShimFunction`1.CreateDelegateRuntimeMethodHandle">
            <summary>设置 Function`1.CreateDelegate(RuntimeMethodHandle methodHandle) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimInstance.ShimFunction`1.CreateDelegateString">
            <summary>设置 Function`1.CreateDelegate(String methodName) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimInstance.ShimFunction`1.CreateDelegateStringParameterList">
            <summary>设置 Function`1.CreateDelegate(String methodName, ParameterList flag) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimInstance.ShimFunction`1.CreateDelegateStringTypeArray">
            <summary>设置 Function`1.CreateDelegate(String methodName, Type[] parameterTypes) 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimInstance.ShimFunction`1.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimInstance.ShimProcedure">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+DynamicBase`1+Explicit+Instance+Procedure 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimInstance.ShimProcedure.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.DynamicBase{`1}.Explicit.Instance.Procedure)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimInstance.ShimProcedure.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimInstance.ShimProcedure.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimInstance.ShimProcedure.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimInstance.ShimProcedure.Constructor">
            <summary>设置 Procedure.Procedure() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimInstance.ShimProcedure.CreateDelegateMethodInfo">
            <summary>设置 Procedure.CreateDelegate(MethodInfo methodInfo) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimInstance.ShimProcedure.CreateDelegateRuntimeMethodHandle">
            <summary>设置 Procedure.CreateDelegate(RuntimeMethodHandle methodHandle) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimInstance.ShimProcedure.CreateDelegateString">
            <summary>设置 Procedure.CreateDelegate(String methodName) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimInstance.ShimProcedure.CreateDelegateStringParameterList">
            <summary>设置 Procedure.CreateDelegate(String methodName, ParameterList flag) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimInstance.ShimProcedure.CreateDelegateStringTypeArray">
            <summary>设置 Procedure.CreateDelegate(String methodName, Type[] parameterTypes) 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimInstance.ShimProcedure.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimInstance.ShimProperty`1">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+DynamicBase`1+Explicit+Instance+Property`1 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimInstance.ShimProperty`1.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.DynamicBase{`1}.Explicit.Instance.Property{`2})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimInstance.ShimProperty`1.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimInstance.ShimProperty`1.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimInstance.ShimProperty`1.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimInstance.ShimProperty`1.Constructor">
            <summary>设置 Property`1.Property`1() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimInstance.ShimProperty`1.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimInstance.ShimProperty`1.ShimGetter">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+DynamicBase`1+Explicit+Instance+Property`1+Getter 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimInstance.ShimProperty`1.ShimGetter.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.DynamicBase{`1}.Explicit.Instance.Property{`2}.Getter)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimInstance.ShimProperty`1.ShimGetter.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimInstance.ShimProperty`1.ShimGetter.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimInstance.ShimProperty`1.ShimGetter.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimInstance.ShimProperty`1.ShimGetter.Constructor">
            <summary>设置 Getter.Getter() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimInstance.ShimProperty`1.ShimGetter.CreateDelegatePropertyInfo">
            <summary>设置 Getter.CreateDelegate(PropertyInfo propertyInfo) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimInstance.ShimProperty`1.ShimGetter.CreateDelegateString">
            <summary>设置 Getter.CreateDelegate(String propertyName) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimInstance.ShimProperty`1.ShimGetter.CreateDelegateStringParameterList">
            <summary>设置 Getter.CreateDelegate(String propertyName, ParameterList flag) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimInstance.ShimProperty`1.ShimGetter.CreateDelegateStringTypeArray">
            <summary>设置 Getter.CreateDelegate(String propertyName, Type[] parameterTypes) 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimInstance.ShimProperty`1.ShimGetter.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimInstance.ShimProperty`1.ShimSetter">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+DynamicBase`1+Explicit+Instance+Property`1+Setter 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimInstance.ShimProperty`1.ShimSetter.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.DynamicBase{`1}.Explicit.Instance.Property{`2}.Setter)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimInstance.ShimProperty`1.ShimSetter.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimInstance.ShimProperty`1.ShimSetter.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimInstance.ShimProperty`1.ShimSetter.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimInstance.ShimProperty`1.ShimSetter.Constructor">
            <summary>设置 Setter.Setter() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimInstance.ShimProperty`1.ShimSetter.CreateDelegatePropertyInfo">
            <summary>设置 Setter.CreateDelegate(PropertyInfo propertyInfo) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimInstance.ShimProperty`1.ShimSetter.CreateDelegateString">
            <summary>设置 Setter.CreateDelegate(String propertyName) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimInstance.ShimProperty`1.ShimSetter.CreateDelegateStringParameterList">
            <summary>设置 Setter.CreateDelegate(String propertyName, ParameterList flag) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimInstance.ShimProperty`1.ShimSetter.CreateDelegateStringTypeArray">
            <summary>设置 Setter.CreateDelegate(String propertyName, Type[] parameterTypes) 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimInstance.ShimProperty`1.ShimSetter.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimStatic">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+DynamicBase`1+Explicit+Static 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimStatic.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.DynamicBase{`1}.Explicit.Static)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimStatic.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimStatic.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimStatic.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimStatic.Constructor">
            <summary>设置 Static.Static() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimStatic.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimStatic.ShimField`1">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+DynamicBase`1+Explicit+Static+Field`1 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimStatic.ShimField`1.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.DynamicBase{`1}.Explicit.Static.Field{`2})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimStatic.ShimField`1.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimStatic.ShimField`1.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimStatic.ShimField`1.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimStatic.ShimField`1.Constructor">
            <summary>设置 Field`1.Field`1() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimStatic.ShimField`1.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimStatic.ShimField`1.ShimGetter">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+DynamicBase`1+Explicit+Static+Field`1+Getter 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimStatic.ShimField`1.ShimGetter.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.DynamicBase{`1}.Explicit.Static.Field{`2}.Getter)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimStatic.ShimField`1.ShimGetter.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimStatic.ShimField`1.ShimGetter.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimStatic.ShimField`1.ShimGetter.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimStatic.ShimField`1.ShimGetter.Constructor">
            <summary>设置 Getter.Getter() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimStatic.ShimField`1.ShimGetter.CreateDelegateFieldInfo">
            <summary>设置 Getter.CreateDelegate(FieldInfo fieldInfo) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimStatic.ShimField`1.ShimGetter.CreateDelegateRuntimeFieldHandle">
            <summary>设置 Getter.CreateDelegate(RuntimeFieldHandle fieldHandle) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimStatic.ShimField`1.ShimGetter.CreateDelegateString">
            <summary>设置 Getter.CreateDelegate(String fieldName) 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimStatic.ShimField`1.ShimGetter.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimStatic.ShimField`1.ShimSetter">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+DynamicBase`1+Explicit+Static+Field`1+Setter 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimStatic.ShimField`1.ShimSetter.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.DynamicBase{`1}.Explicit.Static.Field{`2}.Setter)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimStatic.ShimField`1.ShimSetter.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimStatic.ShimField`1.ShimSetter.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimStatic.ShimField`1.ShimSetter.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimStatic.ShimField`1.ShimSetter.Constructor">
            <summary>设置 Setter.Setter() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimStatic.ShimField`1.ShimSetter.CreateDelegateFieldInfo">
            <summary>设置 Setter.CreateDelegate(FieldInfo fieldInfo) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimStatic.ShimField`1.ShimSetter.CreateDelegateRuntimeFieldHandle">
            <summary>设置 Setter.CreateDelegate(RuntimeFieldHandle fieldHandle) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimStatic.ShimField`1.ShimSetter.CreateDelegateString">
            <summary>设置 Setter.CreateDelegate(String fieldName) 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimStatic.ShimField`1.ShimSetter.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimStatic.ShimFunction`1">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+DynamicBase`1+Explicit+Static+Function`1 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimStatic.ShimFunction`1.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.DynamicBase{`1}.Explicit.Static.Function{`2})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimStatic.ShimFunction`1.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimStatic.ShimFunction`1.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimStatic.ShimFunction`1.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimStatic.ShimFunction`1.Constructor">
            <summary>设置 Function`1.Function`1() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimStatic.ShimFunction`1.CreateDelegateMethodInfo">
            <summary>设置 Function`1.CreateDelegate(MethodInfo methodInfo) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimStatic.ShimFunction`1.CreateDelegateRuntimeMethodHandle">
            <summary>设置 Function`1.CreateDelegate(RuntimeMethodHandle methodHandle) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimStatic.ShimFunction`1.CreateDelegateString">
            <summary>设置 Function`1.CreateDelegate(String methodName) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimStatic.ShimFunction`1.CreateDelegateStringParameterList">
            <summary>设置 Function`1.CreateDelegate(String methodName, ParameterList flag) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimStatic.ShimFunction`1.CreateDelegateStringTypeArray">
            <summary>设置 Function`1.CreateDelegate(String methodName, Type[] parameterTypes) 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimStatic.ShimFunction`1.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimStatic.ShimProcedure">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+DynamicBase`1+Explicit+Static+Procedure 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimStatic.ShimProcedure.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.DynamicBase{`1}.Explicit.Static.Procedure)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimStatic.ShimProcedure.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimStatic.ShimProcedure.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimStatic.ShimProcedure.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimStatic.ShimProcedure.Constructor">
            <summary>设置 Procedure.Procedure() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimStatic.ShimProcedure.CreateDelegateMethodInfo">
            <summary>设置 Procedure.CreateDelegate(MethodInfo methodInfo) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimStatic.ShimProcedure.CreateDelegateRuntimeMethodHandle">
            <summary>设置 Procedure.CreateDelegate(RuntimeMethodHandle methodHandle) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimStatic.ShimProcedure.CreateDelegateString">
            <summary>设置 Procedure.CreateDelegate(String methodName) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimStatic.ShimProcedure.CreateDelegateStringParameterList">
            <summary>设置 Procedure.CreateDelegate(String methodName, ParameterList flag) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimStatic.ShimProcedure.CreateDelegateStringTypeArray">
            <summary>设置 Procedure.CreateDelegate(String methodName, Type[] parameterTypes) 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimStatic.ShimProcedure.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimStatic.ShimProperty`1">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+DynamicBase`1+Explicit+Static+Property`1 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimStatic.ShimProperty`1.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.DynamicBase{`1}.Explicit.Static.Property{`2})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimStatic.ShimProperty`1.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimStatic.ShimProperty`1.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimStatic.ShimProperty`1.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimStatic.ShimProperty`1.Constructor">
            <summary>设置 Property`1.Property`1() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimStatic.ShimProperty`1.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimStatic.ShimProperty`1.ShimGetter">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+DynamicBase`1+Explicit+Static+Property`1+Getter 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimStatic.ShimProperty`1.ShimGetter.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.DynamicBase{`1}.Explicit.Static.Property{`2}.Getter)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimStatic.ShimProperty`1.ShimGetter.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimStatic.ShimProperty`1.ShimGetter.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimStatic.ShimProperty`1.ShimGetter.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimStatic.ShimProperty`1.ShimGetter.Constructor">
            <summary>设置 Getter.Getter() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimStatic.ShimProperty`1.ShimGetter.CreateDelegatePropertyInfo">
            <summary>设置 Getter.CreateDelegate(PropertyInfo propertyInfo) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimStatic.ShimProperty`1.ShimGetter.CreateDelegateString">
            <summary>设置 Getter.CreateDelegate(String propertyName) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimStatic.ShimProperty`1.ShimGetter.CreateDelegateStringParameterList">
            <summary>设置 Getter.CreateDelegate(String propertyName, ParameterList flag) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimStatic.ShimProperty`1.ShimGetter.CreateDelegateStringTypeArray">
            <summary>设置 Getter.CreateDelegate(String propertyName, Type[] parameterTypes) 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimStatic.ShimProperty`1.ShimGetter.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimStatic.ShimProperty`1.ShimSetter">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+DynamicBase`1+Explicit+Static+Property`1+Setter 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimStatic.ShimProperty`1.ShimSetter.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.DynamicBase{`1}.Explicit.Static.Property{`2}.Setter)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimStatic.ShimProperty`1.ShimSetter.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimStatic.ShimProperty`1.ShimSetter.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimStatic.ShimProperty`1.ShimSetter.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimStatic.ShimProperty`1.ShimSetter.Constructor">
            <summary>设置 Setter.Setter() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimStatic.ShimProperty`1.ShimSetter.CreateDelegatePropertyInfo">
            <summary>设置 Setter.CreateDelegate(PropertyInfo propertyInfo) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimStatic.ShimProperty`1.ShimSetter.CreateDelegateString">
            <summary>设置 Setter.CreateDelegate(String propertyName) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimStatic.ShimProperty`1.ShimSetter.CreateDelegateStringParameterList">
            <summary>设置 Setter.CreateDelegate(String propertyName, ParameterList flag) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimStatic.ShimProperty`1.ShimSetter.CreateDelegateStringTypeArray">
            <summary>设置 Setter.CreateDelegate(String propertyName, Type[] parameterTypes) 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimExplicit.ShimStatic.ShimProperty`1.ShimSetter.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+DynamicBase`1+Params 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.DynamicBase{`1}.Params)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.BuildConstructorInfo">
            <summary>设置 Params.Build(ConstructorInfo constructorInfo) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.BuildTypeFieldInfoBoolean">
            <summary>设置 Params.Build(Type memberType, FieldInfo fieldInfo, Boolean wantGet) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.BuildTypeMethodInfo">
            <summary>设置 Params.Build(Type returnType, MethodInfo methodInfo) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.Constructor">
            <summary>设置 Params.Params() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.EmitArgumentCheckAndCoerceDynamicEmitInt32ParameterInfoArrayMemberInfo">
            <summary>设置 Params.EmitArgumentCheckAndCoerce(DynamicEmit de, Int32 argumentOffset, ParameterInfo[] parameterInfos, MemberInfo member) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.EmitArgumentCountCheckDynamicEmitInt32Int32String">
            <summary>设置 Params.EmitArgumentCountCheck(DynamicEmit de, Int32 argumentOffset, Int32 parameterLength, String methodName) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.EmitCoerceArgumentsDynamicEmitInt32ParameterInfoArray">
            <summary>设置 Params.EmitCoerceArguments(DynamicEmit de, Int32 argumentOffset, ParameterInfo[] parameterInfos) 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimConstructor">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+DynamicBase`1+Params+Constructor 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimConstructor.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.DynamicBase{`1}.Params.Constructor)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimConstructor.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimConstructor.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimConstructor.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimConstructor.Constructor">
            <summary>设置 Constructor.Constructor() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimConstructor.CreateDelegate">
            <summary>设置 Constructor.CreateDelegate() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimConstructor.CreateDelegateConstructorInfo">
            <summary>设置 Constructor.CreateDelegate(ConstructorInfo constructorInfo) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimConstructor.CreateDelegateRuntimeMethodHandle">
            <summary>设置 Constructor.CreateDelegate(RuntimeMethodHandle methodHandle) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimConstructor.CreateDelegateTypeArray">
            <summary>设置 Constructor.CreateDelegate(Type[] parameterTypes) 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimConstructor.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimInstance">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+DynamicBase`1+Params+Instance 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimInstance.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.DynamicBase{`1}.Params.Instance)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimInstance.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimInstance.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimInstance.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimInstance.Constructor">
            <summary>设置 Instance.Instance() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimInstance.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimInstance.ShimField`1">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+DynamicBase`1+Params+Instance+Field`1 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimInstance.ShimField`1.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.DynamicBase{`1}.Params.Instance.Field{`2})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimInstance.ShimField`1.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimInstance.ShimField`1.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimInstance.ShimField`1.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimInstance.ShimField`1.Constructor">
            <summary>设置 Field`1.Field`1() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimInstance.ShimField`1.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimInstance.ShimField`1.ShimGetter">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+DynamicBase`1+Params+Instance+Field`1+Getter 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimInstance.ShimField`1.ShimGetter.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.DynamicBase{`1}.Params.Instance.Field{`2}.Getter)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimInstance.ShimField`1.ShimGetter.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimInstance.ShimField`1.ShimGetter.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimInstance.ShimField`1.ShimGetter.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimInstance.ShimField`1.ShimGetter.Constructor">
            <summary>设置 Getter.Getter() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimInstance.ShimField`1.ShimGetter.CreateDelegateFieldInfo">
            <summary>设置 Getter.CreateDelegate(FieldInfo fieldInfo) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimInstance.ShimField`1.ShimGetter.CreateDelegateRuntimeFieldHandle">
            <summary>设置 Getter.CreateDelegate(RuntimeFieldHandle fieldHandle) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimInstance.ShimField`1.ShimGetter.CreateDelegateString">
            <summary>设置 Getter.CreateDelegate(String fieldName) 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimInstance.ShimField`1.ShimGetter.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimInstance.ShimField`1.ShimSetter">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+DynamicBase`1+Params+Instance+Field`1+Setter 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimInstance.ShimField`1.ShimSetter.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.DynamicBase{`1}.Params.Instance.Field{`2}.Setter)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimInstance.ShimField`1.ShimSetter.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimInstance.ShimField`1.ShimSetter.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimInstance.ShimField`1.ShimSetter.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimInstance.ShimField`1.ShimSetter.Constructor">
            <summary>设置 Setter.Setter() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimInstance.ShimField`1.ShimSetter.CreateDelegateFieldInfo">
            <summary>设置 Setter.CreateDelegate(FieldInfo fieldInfo) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimInstance.ShimField`1.ShimSetter.CreateDelegateRuntimeFieldHandle">
            <summary>设置 Setter.CreateDelegate(RuntimeFieldHandle fieldHandle) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimInstance.ShimField`1.ShimSetter.CreateDelegateString">
            <summary>设置 Setter.CreateDelegate(String fieldName) 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimInstance.ShimField`1.ShimSetter.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimInstance.ShimFunction`1">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+DynamicBase`1+Params+Instance+Function`1 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimInstance.ShimFunction`1.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.DynamicBase{`1}.Params.Instance.Function{`2})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimInstance.ShimFunction`1.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimInstance.ShimFunction`1.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimInstance.ShimFunction`1.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimInstance.ShimFunction`1.Constructor">
            <summary>设置 Function`1.Function`1() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimInstance.ShimFunction`1.CreateDelegateMethodInfo">
            <summary>设置 Function`1.CreateDelegate(MethodInfo methodInfo) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimInstance.ShimFunction`1.CreateDelegateRuntimeMethodHandle">
            <summary>设置 Function`1.CreateDelegate(RuntimeMethodHandle methodHandle) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimInstance.ShimFunction`1.CreateDelegateString">
            <summary>设置 Function`1.CreateDelegate(String methodName) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimInstance.ShimFunction`1.CreateDelegateStringTypeArray">
            <summary>设置 Function`1.CreateDelegate(String methodName, Type[] parameterTypes) 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimInstance.ShimFunction`1.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimInstance.ShimProcedure">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+DynamicBase`1+Params+Instance+Procedure 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimInstance.ShimProcedure.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.DynamicBase{`1}.Params.Instance.Procedure)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimInstance.ShimProcedure.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimInstance.ShimProcedure.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimInstance.ShimProcedure.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimInstance.ShimProcedure.Constructor">
            <summary>设置 Procedure.Procedure() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimInstance.ShimProcedure.CreateDelegateMethodInfo">
            <summary>设置 Procedure.CreateDelegate(MethodInfo methodInfo) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimInstance.ShimProcedure.CreateDelegateRuntimeMethodHandle">
            <summary>设置 Procedure.CreateDelegate(RuntimeMethodHandle methodHandle) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimInstance.ShimProcedure.CreateDelegateString">
            <summary>设置 Procedure.CreateDelegate(String methodName) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimInstance.ShimProcedure.CreateDelegateStringTypeArray">
            <summary>设置 Procedure.CreateDelegate(String methodName, Type[] parameterTypes) 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimInstance.ShimProcedure.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimInstance.ShimProperty`1">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+DynamicBase`1+Params+Instance+Property`1 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimInstance.ShimProperty`1.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.DynamicBase{`1}.Params.Instance.Property{`2})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimInstance.ShimProperty`1.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimInstance.ShimProperty`1.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimInstance.ShimProperty`1.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimInstance.ShimProperty`1.Constructor">
            <summary>设置 Property`1.Property`1() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimInstance.ShimProperty`1.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimInstance.ShimProperty`1.ShimGetter">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+DynamicBase`1+Params+Instance+Property`1+Getter 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimInstance.ShimProperty`1.ShimGetter.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.DynamicBase{`1}.Params.Instance.Property{`2}.Getter)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimInstance.ShimProperty`1.ShimGetter.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimInstance.ShimProperty`1.ShimGetter.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimInstance.ShimProperty`1.ShimGetter.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimInstance.ShimProperty`1.ShimGetter.Constructor">
            <summary>设置 Getter.Getter() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimInstance.ShimProperty`1.ShimGetter.CreateDelegatePropertyInfo">
            <summary>设置 Getter.CreateDelegate(PropertyInfo propertyInfo) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimInstance.ShimProperty`1.ShimGetter.CreateDelegateString">
            <summary>设置 Getter.CreateDelegate(String propertyName) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimInstance.ShimProperty`1.ShimGetter.CreateDelegateStringTypeArray">
            <summary>设置 Getter.CreateDelegate(String propertyName, Type[] parameterTypes) 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimInstance.ShimProperty`1.ShimGetter.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimInstance.ShimProperty`1.ShimSetter">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+DynamicBase`1+Params+Instance+Property`1+Setter 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimInstance.ShimProperty`1.ShimSetter.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.DynamicBase{`1}.Params.Instance.Property{`2}.Setter)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimInstance.ShimProperty`1.ShimSetter.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimInstance.ShimProperty`1.ShimSetter.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimInstance.ShimProperty`1.ShimSetter.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimInstance.ShimProperty`1.ShimSetter.Constructor">
            <summary>设置 Setter.Setter() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimInstance.ShimProperty`1.ShimSetter.CreateDelegatePropertyInfo">
            <summary>设置 Setter.CreateDelegate(PropertyInfo propertyInfo) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimInstance.ShimProperty`1.ShimSetter.CreateDelegateString">
            <summary>设置 Setter.CreateDelegate(String propertyName) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimInstance.ShimProperty`1.ShimSetter.CreateDelegateStringTypeArray">
            <summary>设置 Setter.CreateDelegate(String propertyName, Type[] parameterTypes) 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimInstance.ShimProperty`1.ShimSetter.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimStatic">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+DynamicBase`1+Params+Static 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimStatic.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.DynamicBase{`1}.Params.Static)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimStatic.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimStatic.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimStatic.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimStatic.Constructor">
            <summary>设置 Static.Static() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimStatic.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimStatic.ShimField">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+DynamicBase`1+Params+Static+Field 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimStatic.ShimField.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.DynamicBase{`1}.Params.Static.Field)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimStatic.ShimField.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimStatic.ShimField.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimStatic.ShimField.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimStatic.ShimField.Constructor">
            <summary>设置 Field.Field() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimStatic.ShimField.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimStatic.ShimField.ShimGetter`1">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+DynamicBase`1+Params+Static+Field+Getter`1 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimStatic.ShimField.ShimGetter`1.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.DynamicBase{`1}.Params.Static.Field.Getter{`2})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimStatic.ShimField.ShimGetter`1.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimStatic.ShimField.ShimGetter`1.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimStatic.ShimField.ShimGetter`1.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimStatic.ShimField.ShimGetter`1.Constructor">
            <summary>设置 Getter`1.Getter`1() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimStatic.ShimField.ShimGetter`1.CreateDelegateFieldInfo">
            <summary>设置 Getter`1.CreateDelegate(FieldInfo fieldInfo) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimStatic.ShimField.ShimGetter`1.CreateDelegateRuntimeFieldHandle">
            <summary>设置 Getter`1.CreateDelegate(RuntimeFieldHandle fieldHandle) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimStatic.ShimField.ShimGetter`1.CreateDelegateString">
            <summary>设置 Getter`1.CreateDelegate(String fieldName) 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimStatic.ShimField.ShimGetter`1.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimStatic.ShimField.ShimSetter">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+DynamicBase`1+Params+Static+Field+Setter 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimStatic.ShimField.ShimSetter.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.DynamicBase{`1}.Params.Static.Field.Setter)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimStatic.ShimField.ShimSetter.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimStatic.ShimField.ShimSetter.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimStatic.ShimField.ShimSetter.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimStatic.ShimField.ShimSetter.Constructor">
            <summary>设置 Setter.Setter() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimStatic.ShimField.ShimSetter.CreateDelegateFieldInfo">
            <summary>设置 Setter.CreateDelegate(FieldInfo fieldInfo) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimStatic.ShimField.ShimSetter.CreateDelegateRuntimeFieldHandle">
            <summary>设置 Setter.CreateDelegate(RuntimeFieldHandle fieldHandle) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimStatic.ShimField.ShimSetter.CreateDelegateString">
            <summary>设置 Setter.CreateDelegate(String fieldName) 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimStatic.ShimField.ShimSetter.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimStatic.ShimFunction`1">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+DynamicBase`1+Params+Static+Function`1 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimStatic.ShimFunction`1.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.DynamicBase{`1}.Params.Static.Function{`2})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimStatic.ShimFunction`1.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimStatic.ShimFunction`1.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimStatic.ShimFunction`1.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimStatic.ShimFunction`1.Constructor">
            <summary>设置 Function`1.Function`1() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimStatic.ShimFunction`1.CreateDelegateMethodInfo">
            <summary>设置 Function`1.CreateDelegate(MethodInfo methodInfo) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimStatic.ShimFunction`1.CreateDelegateRuntimeMethodHandle">
            <summary>设置 Function`1.CreateDelegate(RuntimeMethodHandle methodHandle) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimStatic.ShimFunction`1.CreateDelegateString">
            <summary>设置 Function`1.CreateDelegate(String methodName) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimStatic.ShimFunction`1.CreateDelegateStringTypeArray">
            <summary>设置 Function`1.CreateDelegate(String methodName, Type[] parameterTypes) 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimStatic.ShimFunction`1.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimStatic.ShimProcedure">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+DynamicBase`1+Params+Static+Procedure 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimStatic.ShimProcedure.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.DynamicBase{`1}.Params.Static.Procedure)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimStatic.ShimProcedure.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimStatic.ShimProcedure.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimStatic.ShimProcedure.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimStatic.ShimProcedure.Constructor">
            <summary>设置 Procedure.Procedure() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimStatic.ShimProcedure.CreateDelegateMethodInfo">
            <summary>设置 Procedure.CreateDelegate(MethodInfo methodInfo) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimStatic.ShimProcedure.CreateDelegateRuntimeMethodHandle">
            <summary>设置 Procedure.CreateDelegate(RuntimeMethodHandle methodHandle) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimStatic.ShimProcedure.CreateDelegateString">
            <summary>设置 Procedure.CreateDelegate(String methodName) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimStatic.ShimProcedure.CreateDelegateStringTypeArray">
            <summary>设置 Procedure.CreateDelegate(String methodName, Type[] parameterTypes) 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimStatic.ShimProcedure.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimStatic.ShimProperty">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+DynamicBase`1+Params+Static+Property 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimStatic.ShimProperty.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.DynamicBase{`1}.Params.Static.Property)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimStatic.ShimProperty.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimStatic.ShimProperty.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimStatic.ShimProperty.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimStatic.ShimProperty.Constructor">
            <summary>设置 Property.Property() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimStatic.ShimProperty.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimStatic.ShimProperty.ShimGetter`1">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+DynamicBase`1+Params+Static+Property+Getter`1 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimStatic.ShimProperty.ShimGetter`1.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.DynamicBase{`1}.Params.Static.Property.Getter{`2})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimStatic.ShimProperty.ShimGetter`1.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimStatic.ShimProperty.ShimGetter`1.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimStatic.ShimProperty.ShimGetter`1.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimStatic.ShimProperty.ShimGetter`1.Constructor">
            <summary>设置 Getter`1.Getter`1() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimStatic.ShimProperty.ShimGetter`1.CreateDelegatePropertyInfo">
            <summary>设置 Getter`1.CreateDelegate(PropertyInfo propertyInfo) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimStatic.ShimProperty.ShimGetter`1.CreateDelegateString">
            <summary>设置 Getter`1.CreateDelegate(String propertyName) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimStatic.ShimProperty.ShimGetter`1.CreateDelegateStringTypeArray">
            <summary>设置 Getter`1.CreateDelegate(String propertyName, Type[] parameterTypes) 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimStatic.ShimProperty.ShimGetter`1.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimStatic.ShimProperty.ShimSetter">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+DynamicBase`1+Params+Static+Property+Setter 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimStatic.ShimProperty.ShimSetter.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.DynamicBase{`1}.Params.Static.Property.Setter)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimStatic.ShimProperty.ShimSetter.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimStatic.ShimProperty.ShimSetter.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimStatic.ShimProperty.ShimSetter.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimStatic.ShimProperty.ShimSetter.Constructor">
            <summary>设置 Setter.Setter() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimStatic.ShimProperty.ShimSetter.CreateDelegatePropertyInfo">
            <summary>设置 Setter.CreateDelegate(PropertyInfo propertyInfo) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimStatic.ShimProperty.ShimSetter.CreateDelegateString">
            <summary>设置 Setter.CreateDelegate(String propertyName) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimStatic.ShimProperty.ShimSetter.CreateDelegateStringTypeArray">
            <summary>设置 Setter.CreateDelegate(String propertyName, Type[] parameterTypes) 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimDynamicBase`1.ShimParams.ShimStatic.ShimProperty.ShimSetter.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Instance 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Instance)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.Constructor">
            <summary>设置 Instance.Instance() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimField`1">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Instance+Field`1 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimField`1.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Instance.Field{`1})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimField`1.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimField`1.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimField`1.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimField`1.Constructor">
            <summary>设置 Field`1.Field`1() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimField`1.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimField`1.ShimGetter">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Instance+Field`1+Getter 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimField`1.ShimGetter.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Instance.Field{`1}.Getter)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimField`1.ShimGetter.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimField`1.ShimGetter.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimField`1.ShimGetter.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimField`1.ShimGetter.Constructor">
            <summary>设置 Getter.Getter() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimField`1.ShimGetter.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimField`1.ShimSetter">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Instance+Field`1+Setter 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimField`1.ShimSetter.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Instance.Field{`1}.Setter)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimField`1.ShimSetter.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimField`1.ShimSetter.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimField`1.ShimSetter.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimField`1.ShimSetter.Constructor">
            <summary>设置 Setter.Setter() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimField`1.ShimSetter.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimFunction`1">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Instance+Function`1 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimFunction`1.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Instance.Function{`1})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimFunction`1.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimFunction`1.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimFunction`1.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimFunction`1.Constructor">
            <summary>设置 Function`1.Function`1() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimFunction`1.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimFunction`1.ShimExplicit">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Instance+Function`1+Explicit 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimFunction`1.ShimExplicit.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimFunction`1.ShimExplicit.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Instance.Function{`1}.Explicit)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimFunction`1.ShimExplicit.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimFunction`1.ShimExplicit.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimFunction`1.ShimExplicit.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimFunction`1.ShimExplicit.Constructor">
            <summary>设置 Explicit.Explicit() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimFunction`1.ShimExplicit.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimFunction`1.ShimExplicit`1">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Instance+Function`1+Explicit`1 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimFunction`1.ShimExplicit`1.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimFunction`1.ShimExplicit`1.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Instance.Function{`1}.Explicit{`2})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimFunction`1.ShimExplicit`1.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimFunction`1.ShimExplicit`1.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimFunction`1.ShimExplicit`1.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimFunction`1.ShimExplicit`1.Constructor">
            <summary>设置 Explicit`1.Explicit`1() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimFunction`1.ShimExplicit`1.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimFunction`1.ShimExplicit`2">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Instance+Function`1+Explicit`2 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimFunction`1.ShimExplicit`2.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimFunction`1.ShimExplicit`2.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Instance.Function{`1}.Explicit{`2,`3})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimFunction`1.ShimExplicit`2.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimFunction`1.ShimExplicit`2.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimFunction`1.ShimExplicit`2.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimFunction`1.ShimExplicit`2.Constructor">
            <summary>设置 Explicit`2.Explicit`2() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimFunction`1.ShimExplicit`2.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimFunction`1.ShimExplicit`3">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Instance+Function`1+Explicit`3 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimFunction`1.ShimExplicit`3.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimFunction`1.ShimExplicit`3.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Instance.Function{`1}.Explicit{`2,`3,`4})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimFunction`1.ShimExplicit`3.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimFunction`1.ShimExplicit`3.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimFunction`1.ShimExplicit`3.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimFunction`1.ShimExplicit`3.Constructor">
            <summary>设置 Explicit`3.Explicit`3() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimFunction`1.ShimExplicit`3.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimFunction`1.ShimExplicit`4">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Instance+Function`1+Explicit`4 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimFunction`1.ShimExplicit`4.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimFunction`1.ShimExplicit`4.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Instance.Function{`1}.Explicit{`2,`3,`4,`5})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimFunction`1.ShimExplicit`4.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimFunction`1.ShimExplicit`4.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimFunction`1.ShimExplicit`4.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimFunction`1.ShimExplicit`4.Constructor">
            <summary>设置 Explicit`4.Explicit`4() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimFunction`1.ShimExplicit`4.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimFunction`1.ShimExplicit`5">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Instance+Function`1+Explicit`5 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimFunction`1.ShimExplicit`5.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimFunction`1.ShimExplicit`5.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Instance.Function{`1}.Explicit{`2,`3,`4,`5,`6})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimFunction`1.ShimExplicit`5.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimFunction`1.ShimExplicit`5.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimFunction`1.ShimExplicit`5.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimFunction`1.ShimExplicit`5.Constructor">
            <summary>设置 Explicit`5.Explicit`5() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimFunction`1.ShimExplicit`5.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimFunction`1.ShimExplicit`6">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Instance+Function`1+Explicit`6 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimFunction`1.ShimExplicit`6.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimFunction`1.ShimExplicit`6.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Instance.Function{`1}.Explicit{`2,`3,`4,`5,`6,`7})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimFunction`1.ShimExplicit`6.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimFunction`1.ShimExplicit`6.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimFunction`1.ShimExplicit`6.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimFunction`1.ShimExplicit`6.Constructor">
            <summary>设置 Explicit`6.Explicit`6() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimFunction`1.ShimExplicit`6.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimFunction`1.ShimExplicit`7">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Instance+Function`1+Explicit`7 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimFunction`1.ShimExplicit`7.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimFunction`1.ShimExplicit`7.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Instance.Function{`1}.Explicit{`2,`3,`4,`5,`6,`7,`8})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimFunction`1.ShimExplicit`7.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimFunction`1.ShimExplicit`7.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimFunction`1.ShimExplicit`7.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimFunction`1.ShimExplicit`7.Constructor">
            <summary>设置 Explicit`7.Explicit`7() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimFunction`1.ShimExplicit`7.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimFunction`1.ShimExplicit`8">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Instance+Function`1+Explicit`8 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimFunction`1.ShimExplicit`8.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimFunction`1.ShimExplicit`8.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Instance.Function{`1}.Explicit{`2,`3,`4,`5,`6,`7,`8,`9})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimFunction`1.ShimExplicit`8.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimFunction`1.ShimExplicit`8.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimFunction`1.ShimExplicit`8.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimFunction`1.ShimExplicit`8.Constructor">
            <summary>设置 Explicit`8.Explicit`8() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimFunction`1.ShimExplicit`8.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimFunction`1.ShimExplicit`9">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Instance+Function`1+Explicit`9 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimFunction`1.ShimExplicit`9.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimFunction`1.ShimExplicit`9.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Instance.Function{`1}.Explicit{`2,`3,`4,`5,`6,`7,`8,`9,`10})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimFunction`1.ShimExplicit`9.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimFunction`1.ShimExplicit`9.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimFunction`1.ShimExplicit`9.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimFunction`1.ShimExplicit`9.Constructor">
            <summary>设置 Explicit`9.Explicit`9() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimFunction`1.ShimExplicit`9.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimFunction`1.ShimParams">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Instance+Function`1+Params 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimFunction`1.ShimParams.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimFunction`1.ShimParams.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Instance.Function{`1}.Params)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimFunction`1.ShimParams.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimFunction`1.ShimParams.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimFunction`1.ShimParams.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimFunction`1.ShimParams.Constructor">
            <summary>设置 Params.Params() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimFunction`1.ShimParams.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProcedure">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Instance+Procedure 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProcedure.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Instance.Procedure)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProcedure.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProcedure.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProcedure.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProcedure.Constructor">
            <summary>设置 Procedure.Procedure() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProcedure.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProcedure.ShimExplicit">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Instance+Procedure+Explicit 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProcedure.ShimExplicit.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProcedure.ShimExplicit.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Instance.Procedure.Explicit)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProcedure.ShimExplicit.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProcedure.ShimExplicit.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProcedure.ShimExplicit.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProcedure.ShimExplicit.Constructor">
            <summary>设置 Explicit.Explicit() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProcedure.ShimExplicit.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProcedure.ShimExplicit`1">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Instance+Procedure+Explicit`1 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProcedure.ShimExplicit`1.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProcedure.ShimExplicit`1.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Instance.Procedure.Explicit{`1})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProcedure.ShimExplicit`1.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProcedure.ShimExplicit`1.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProcedure.ShimExplicit`1.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProcedure.ShimExplicit`1.Constructor">
            <summary>设置 Explicit`1.Explicit`1() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProcedure.ShimExplicit`1.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProcedure.ShimExplicit`2">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Instance+Procedure+Explicit`2 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProcedure.ShimExplicit`2.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProcedure.ShimExplicit`2.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Instance.Procedure.Explicit{`1,`2})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProcedure.ShimExplicit`2.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProcedure.ShimExplicit`2.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProcedure.ShimExplicit`2.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProcedure.ShimExplicit`2.Constructor">
            <summary>设置 Explicit`2.Explicit`2() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProcedure.ShimExplicit`2.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProcedure.ShimExplicit`3">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Instance+Procedure+Explicit`3 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProcedure.ShimExplicit`3.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProcedure.ShimExplicit`3.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Instance.Procedure.Explicit{`1,`2,`3})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProcedure.ShimExplicit`3.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProcedure.ShimExplicit`3.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProcedure.ShimExplicit`3.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProcedure.ShimExplicit`3.Constructor">
            <summary>设置 Explicit`3.Explicit`3() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProcedure.ShimExplicit`3.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProcedure.ShimExplicit`4">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Instance+Procedure+Explicit`4 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProcedure.ShimExplicit`4.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProcedure.ShimExplicit`4.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Instance.Procedure.Explicit{`1,`2,`3,`4})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProcedure.ShimExplicit`4.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProcedure.ShimExplicit`4.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProcedure.ShimExplicit`4.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProcedure.ShimExplicit`4.Constructor">
            <summary>设置 Explicit`4.Explicit`4() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProcedure.ShimExplicit`4.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProcedure.ShimExplicit`5">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Instance+Procedure+Explicit`5 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProcedure.ShimExplicit`5.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProcedure.ShimExplicit`5.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Instance.Procedure.Explicit{`1,`2,`3,`4,`5})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProcedure.ShimExplicit`5.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProcedure.ShimExplicit`5.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProcedure.ShimExplicit`5.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProcedure.ShimExplicit`5.Constructor">
            <summary>设置 Explicit`5.Explicit`5() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProcedure.ShimExplicit`5.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProcedure.ShimExplicit`6">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Instance+Procedure+Explicit`6 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProcedure.ShimExplicit`6.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProcedure.ShimExplicit`6.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Instance.Procedure.Explicit{`1,`2,`3,`4,`5,`6})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProcedure.ShimExplicit`6.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProcedure.ShimExplicit`6.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProcedure.ShimExplicit`6.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProcedure.ShimExplicit`6.Constructor">
            <summary>设置 Explicit`6.Explicit`6() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProcedure.ShimExplicit`6.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProcedure.ShimExplicit`7">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Instance+Procedure+Explicit`7 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProcedure.ShimExplicit`7.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProcedure.ShimExplicit`7.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Instance.Procedure.Explicit{`1,`2,`3,`4,`5,`6,`7})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProcedure.ShimExplicit`7.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProcedure.ShimExplicit`7.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProcedure.ShimExplicit`7.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProcedure.ShimExplicit`7.Constructor">
            <summary>设置 Explicit`7.Explicit`7() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProcedure.ShimExplicit`7.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProcedure.ShimExplicit`8">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Instance+Procedure+Explicit`8 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProcedure.ShimExplicit`8.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProcedure.ShimExplicit`8.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Instance.Procedure.Explicit{`1,`2,`3,`4,`5,`6,`7,`8})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProcedure.ShimExplicit`8.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProcedure.ShimExplicit`8.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProcedure.ShimExplicit`8.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProcedure.ShimExplicit`8.Constructor">
            <summary>设置 Explicit`8.Explicit`8() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProcedure.ShimExplicit`8.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProcedure.ShimExplicit`9">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Instance+Procedure+Explicit`9 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProcedure.ShimExplicit`9.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProcedure.ShimExplicit`9.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Instance.Procedure.Explicit{`1,`2,`3,`4,`5,`6,`7,`8,`9})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProcedure.ShimExplicit`9.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProcedure.ShimExplicit`9.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProcedure.ShimExplicit`9.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProcedure.ShimExplicit`9.Constructor">
            <summary>设置 Explicit`9.Explicit`9() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProcedure.ShimExplicit`9.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProcedure.ShimParams">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Instance+Procedure+Params 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProcedure.ShimParams.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProcedure.ShimParams.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Instance.Procedure.Params)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProcedure.ShimParams.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProcedure.ShimParams.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProcedure.ShimParams.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProcedure.ShimParams.Constructor">
            <summary>设置 Params.Params() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProcedure.ShimParams.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Instance+Property`1 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Instance.Property{`1})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.Constructor">
            <summary>设置 Property`1.Property`1() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Instance+Property`1+Explicit 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Instance.Property{`1}.Explicit)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit.Constructor">
            <summary>设置 Explicit.Explicit() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit.ShimGetter">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Instance+Property`1+Explicit+Getter 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit.ShimGetter.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Instance.Property{`1}.Explicit.Getter)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit.ShimGetter.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit.ShimGetter.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit.ShimGetter.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit.ShimGetter.Constructor">
            <summary>设置 Getter.Getter() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit.ShimGetter.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit.ShimSetter">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Instance+Property`1+Explicit+Setter 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit.ShimSetter.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Instance.Property{`1}.Explicit.Setter)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit.ShimSetter.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit.ShimSetter.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit.ShimSetter.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit.ShimSetter.Constructor">
            <summary>设置 Setter.Setter() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit.ShimSetter.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`1">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Instance+Property`1+Explicit`1 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`1.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`1.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Instance.Property{`1}.Explicit{`2})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`1.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`1.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`1.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`1.Constructor">
            <summary>设置 Explicit`1.Explicit`1() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`1.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`1.ShimGetter">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Instance+Property`1+Explicit`1+Getter 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`1.ShimGetter.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Instance.Property{`1}.Explicit{`2}.Getter)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`1.ShimGetter.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`1.ShimGetter.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`1.ShimGetter.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`1.ShimGetter.Constructor">
            <summary>设置 Getter.Getter() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`1.ShimGetter.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`1.ShimSetter">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Instance+Property`1+Explicit`1+Setter 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`1.ShimSetter.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Instance.Property{`1}.Explicit{`2}.Setter)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`1.ShimSetter.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`1.ShimSetter.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`1.ShimSetter.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`1.ShimSetter.Constructor">
            <summary>设置 Setter.Setter() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`1.ShimSetter.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`2">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Instance+Property`1+Explicit`2 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`2.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`2.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Instance.Property{`1}.Explicit{`2,`3})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`2.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`2.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`2.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`2.Constructor">
            <summary>设置 Explicit`2.Explicit`2() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`2.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`2.ShimGetter">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Instance+Property`1+Explicit`2+Getter 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`2.ShimGetter.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Instance.Property{`1}.Explicit{`2,`3}.Getter)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`2.ShimGetter.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`2.ShimGetter.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`2.ShimGetter.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`2.ShimGetter.Constructor">
            <summary>设置 Getter.Getter() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`2.ShimGetter.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`2.ShimSetter">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Instance+Property`1+Explicit`2+Setter 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`2.ShimSetter.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Instance.Property{`1}.Explicit{`2,`3}.Setter)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`2.ShimSetter.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`2.ShimSetter.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`2.ShimSetter.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`2.ShimSetter.Constructor">
            <summary>设置 Setter.Setter() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`2.ShimSetter.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`3">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Instance+Property`1+Explicit`3 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`3.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`3.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Instance.Property{`1}.Explicit{`2,`3,`4})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`3.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`3.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`3.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`3.Constructor">
            <summary>设置 Explicit`3.Explicit`3() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`3.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`3.ShimGetter">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Instance+Property`1+Explicit`3+Getter 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`3.ShimGetter.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Instance.Property{`1}.Explicit{`2,`3,`4}.Getter)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`3.ShimGetter.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`3.ShimGetter.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`3.ShimGetter.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`3.ShimGetter.Constructor">
            <summary>设置 Getter.Getter() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`3.ShimGetter.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`3.ShimSetter">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Instance+Property`1+Explicit`3+Setter 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`3.ShimSetter.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Instance.Property{`1}.Explicit{`2,`3,`4}.Setter)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`3.ShimSetter.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`3.ShimSetter.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`3.ShimSetter.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`3.ShimSetter.Constructor">
            <summary>设置 Setter.Setter() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`3.ShimSetter.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`4">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Instance+Property`1+Explicit`4 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`4.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`4.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Instance.Property{`1}.Explicit{`2,`3,`4,`5})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`4.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`4.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`4.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`4.Constructor">
            <summary>设置 Explicit`4.Explicit`4() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`4.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`4.ShimGetter">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Instance+Property`1+Explicit`4+Getter 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`4.ShimGetter.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Instance.Property{`1}.Explicit{`2,`3,`4,`5}.Getter)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`4.ShimGetter.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`4.ShimGetter.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`4.ShimGetter.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`4.ShimGetter.Constructor">
            <summary>设置 Getter.Getter() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`4.ShimGetter.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`4.ShimSetter">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Instance+Property`1+Explicit`4+Setter 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`4.ShimSetter.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Instance.Property{`1}.Explicit{`2,`3,`4,`5}.Setter)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`4.ShimSetter.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`4.ShimSetter.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`4.ShimSetter.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`4.ShimSetter.Constructor">
            <summary>设置 Setter.Setter() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`4.ShimSetter.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`5">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Instance+Property`1+Explicit`5 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`5.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`5.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Instance.Property{`1}.Explicit{`2,`3,`4,`5,`6})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`5.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`5.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`5.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`5.Constructor">
            <summary>设置 Explicit`5.Explicit`5() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`5.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`5.ShimGetter">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Instance+Property`1+Explicit`5+Getter 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`5.ShimGetter.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Instance.Property{`1}.Explicit{`2,`3,`4,`5,`6}.Getter)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`5.ShimGetter.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`5.ShimGetter.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`5.ShimGetter.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`5.ShimGetter.Constructor">
            <summary>设置 Getter.Getter() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`5.ShimGetter.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`5.ShimSetter">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Instance+Property`1+Explicit`5+Setter 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`5.ShimSetter.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Instance.Property{`1}.Explicit{`2,`3,`4,`5,`6}.Setter)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`5.ShimSetter.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`5.ShimSetter.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`5.ShimSetter.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`5.ShimSetter.Constructor">
            <summary>设置 Setter.Setter() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`5.ShimSetter.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`6">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Instance+Property`1+Explicit`6 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`6.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`6.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Instance.Property{`1}.Explicit{`2,`3,`4,`5,`6,`7})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`6.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`6.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`6.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`6.Constructor">
            <summary>设置 Explicit`6.Explicit`6() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`6.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`6.ShimGetter">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Instance+Property`1+Explicit`6+Getter 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`6.ShimGetter.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Instance.Property{`1}.Explicit{`2,`3,`4,`5,`6,`7}.Getter)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`6.ShimGetter.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`6.ShimGetter.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`6.ShimGetter.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`6.ShimGetter.Constructor">
            <summary>设置 Getter.Getter() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`6.ShimGetter.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`6.ShimSetter">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Instance+Property`1+Explicit`6+Setter 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`6.ShimSetter.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Instance.Property{`1}.Explicit{`2,`3,`4,`5,`6,`7}.Setter)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`6.ShimSetter.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`6.ShimSetter.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`6.ShimSetter.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`6.ShimSetter.Constructor">
            <summary>设置 Setter.Setter() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`6.ShimSetter.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`7">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Instance+Property`1+Explicit`7 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`7.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`7.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Instance.Property{`1}.Explicit{`2,`3,`4,`5,`6,`7,`8})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`7.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`7.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`7.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`7.Constructor">
            <summary>设置 Explicit`7.Explicit`7() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`7.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`7.ShimGetter">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Instance+Property`1+Explicit`7+Getter 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`7.ShimGetter.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Instance.Property{`1}.Explicit{`2,`3,`4,`5,`6,`7,`8}.Getter)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`7.ShimGetter.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`7.ShimGetter.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`7.ShimGetter.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`7.ShimGetter.Constructor">
            <summary>设置 Getter.Getter() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`7.ShimGetter.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`7.ShimSetter">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Instance+Property`1+Explicit`7+Setter 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`7.ShimSetter.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Instance.Property{`1}.Explicit{`2,`3,`4,`5,`6,`7,`8}.Setter)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`7.ShimSetter.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`7.ShimSetter.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`7.ShimSetter.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`7.ShimSetter.Constructor">
            <summary>设置 Setter.Setter() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`7.ShimSetter.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`8">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Instance+Property`1+Explicit`8 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`8.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`8.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Instance.Property{`1}.Explicit{`2,`3,`4,`5,`6,`7,`8,`9})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`8.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`8.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`8.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`8.Constructor">
            <summary>设置 Explicit`8.Explicit`8() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`8.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`8.ShimGetter">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Instance+Property`1+Explicit`8+Getter 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`8.ShimGetter.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Instance.Property{`1}.Explicit{`2,`3,`4,`5,`6,`7,`8,`9}.Getter)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`8.ShimGetter.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`8.ShimGetter.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`8.ShimGetter.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`8.ShimGetter.Constructor">
            <summary>设置 Getter.Getter() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`8.ShimGetter.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`8.ShimSetter">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Instance+Property`1+Explicit`8+Setter 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`8.ShimSetter.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Instance.Property{`1}.Explicit{`2,`3,`4,`5,`6,`7,`8,`9}.Setter)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`8.ShimSetter.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`8.ShimSetter.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`8.ShimSetter.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`8.ShimSetter.Constructor">
            <summary>设置 Setter.Setter() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimExplicit`8.ShimSetter.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimParams">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Instance+Property`1+Params 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimParams.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Instance.Property{`1}.Params)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimParams.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimParams.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimParams.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimParams.Constructor">
            <summary>设置 Params.Params() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimParams.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimParams.ShimGetter">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Instance+Property`1+Params+Getter 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimParams.ShimGetter.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Instance.Property{`1}.Params.Getter)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimParams.ShimGetter.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimParams.ShimGetter.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimParams.ShimGetter.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimParams.ShimGetter.Constructor">
            <summary>设置 Getter.Getter() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimParams.ShimGetter.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimParams.ShimSetter">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Instance+Property`1+Params+Setter 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimParams.ShimSetter.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Instance.Property{`1}.Params.Setter)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimParams.ShimSetter.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimParams.ShimSetter.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimParams.ShimSetter.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimParams.ShimSetter.Constructor">
            <summary>设置 Setter.Setter() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimInstance.ShimProperty`1.ShimParams.ShimSetter.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Static 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Static)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.Constructor">
            <summary>设置 Static.Static() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimField`1">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Static+Field`1 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimField`1.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Static.Field{`1})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimField`1.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimField`1.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimField`1.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimField`1.Constructor">
            <summary>设置 Field`1.Field`1() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimField`1.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimField`1.ShimGetter">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Static+Field`1+Getter 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimField`1.ShimGetter.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Static.Field{`1}.Getter)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimField`1.ShimGetter.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimField`1.ShimGetter.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimField`1.ShimGetter.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimField`1.ShimGetter.Constructor">
            <summary>设置 Getter.Getter() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimField`1.ShimGetter.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimField`1.ShimSetter">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Static+Field`1+Setter 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimField`1.ShimSetter.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Static.Field{`1}.Setter)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimField`1.ShimSetter.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimField`1.ShimSetter.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimField`1.ShimSetter.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimField`1.ShimSetter.Constructor">
            <summary>设置 Setter.Setter() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimField`1.ShimSetter.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimFunction`1">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Static+Function`1 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimFunction`1.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Static.Function{`1})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimFunction`1.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimFunction`1.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimFunction`1.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimFunction`1.Constructor">
            <summary>设置 Function`1.Function`1() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimFunction`1.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimFunction`1.ShimExplicit">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Static+Function`1+Explicit 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimFunction`1.ShimExplicit.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimFunction`1.ShimExplicit.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Static.Function{`1}.Explicit)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimFunction`1.ShimExplicit.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimFunction`1.ShimExplicit.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimFunction`1.ShimExplicit.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimFunction`1.ShimExplicit.Constructor">
            <summary>设置 Explicit.Explicit() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimFunction`1.ShimExplicit.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimFunction`1.ShimExplicit`1">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Static+Function`1+Explicit`1 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimFunction`1.ShimExplicit`1.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimFunction`1.ShimExplicit`1.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Static.Function{`1}.Explicit{`2})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimFunction`1.ShimExplicit`1.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimFunction`1.ShimExplicit`1.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimFunction`1.ShimExplicit`1.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimFunction`1.ShimExplicit`1.Constructor">
            <summary>设置 Explicit`1.Explicit`1() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimFunction`1.ShimExplicit`1.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimFunction`1.ShimExplicit`2">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Static+Function`1+Explicit`2 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimFunction`1.ShimExplicit`2.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimFunction`1.ShimExplicit`2.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Static.Function{`1}.Explicit{`2,`3})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimFunction`1.ShimExplicit`2.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimFunction`1.ShimExplicit`2.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimFunction`1.ShimExplicit`2.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimFunction`1.ShimExplicit`2.Constructor">
            <summary>设置 Explicit`2.Explicit`2() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimFunction`1.ShimExplicit`2.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimFunction`1.ShimExplicit`3">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Static+Function`1+Explicit`3 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimFunction`1.ShimExplicit`3.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimFunction`1.ShimExplicit`3.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Static.Function{`1}.Explicit{`2,`3,`4})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimFunction`1.ShimExplicit`3.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimFunction`1.ShimExplicit`3.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimFunction`1.ShimExplicit`3.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimFunction`1.ShimExplicit`3.Constructor">
            <summary>设置 Explicit`3.Explicit`3() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimFunction`1.ShimExplicit`3.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimFunction`1.ShimExplicit`4">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Static+Function`1+Explicit`4 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimFunction`1.ShimExplicit`4.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimFunction`1.ShimExplicit`4.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Static.Function{`1}.Explicit{`2,`3,`4,`5})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimFunction`1.ShimExplicit`4.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimFunction`1.ShimExplicit`4.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimFunction`1.ShimExplicit`4.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimFunction`1.ShimExplicit`4.Constructor">
            <summary>设置 Explicit`4.Explicit`4() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimFunction`1.ShimExplicit`4.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimFunction`1.ShimExplicit`5">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Static+Function`1+Explicit`5 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimFunction`1.ShimExplicit`5.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimFunction`1.ShimExplicit`5.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Static.Function{`1}.Explicit{`2,`3,`4,`5,`6})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimFunction`1.ShimExplicit`5.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimFunction`1.ShimExplicit`5.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimFunction`1.ShimExplicit`5.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimFunction`1.ShimExplicit`5.Constructor">
            <summary>设置 Explicit`5.Explicit`5() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimFunction`1.ShimExplicit`5.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimFunction`1.ShimExplicit`6">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Static+Function`1+Explicit`6 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimFunction`1.ShimExplicit`6.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimFunction`1.ShimExplicit`6.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Static.Function{`1}.Explicit{`2,`3,`4,`5,`6,`7})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimFunction`1.ShimExplicit`6.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimFunction`1.ShimExplicit`6.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimFunction`1.ShimExplicit`6.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimFunction`1.ShimExplicit`6.Constructor">
            <summary>设置 Explicit`6.Explicit`6() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimFunction`1.ShimExplicit`6.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimFunction`1.ShimExplicit`7">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Static+Function`1+Explicit`7 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimFunction`1.ShimExplicit`7.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimFunction`1.ShimExplicit`7.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Static.Function{`1}.Explicit{`2,`3,`4,`5,`6,`7,`8})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimFunction`1.ShimExplicit`7.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimFunction`1.ShimExplicit`7.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimFunction`1.ShimExplicit`7.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimFunction`1.ShimExplicit`7.Constructor">
            <summary>设置 Explicit`7.Explicit`7() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimFunction`1.ShimExplicit`7.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimFunction`1.ShimExplicit`8">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Static+Function`1+Explicit`8 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimFunction`1.ShimExplicit`8.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimFunction`1.ShimExplicit`8.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Static.Function{`1}.Explicit{`2,`3,`4,`5,`6,`7,`8,`9})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimFunction`1.ShimExplicit`8.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimFunction`1.ShimExplicit`8.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimFunction`1.ShimExplicit`8.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimFunction`1.ShimExplicit`8.Constructor">
            <summary>设置 Explicit`8.Explicit`8() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimFunction`1.ShimExplicit`8.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimFunction`1.ShimExplicit`9">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Static+Function`1+Explicit`9 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimFunction`1.ShimExplicit`9.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimFunction`1.ShimExplicit`9.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Static.Function{`1}.Explicit{`2,`3,`4,`5,`6,`7,`8,`9,`10})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimFunction`1.ShimExplicit`9.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimFunction`1.ShimExplicit`9.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimFunction`1.ShimExplicit`9.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimFunction`1.ShimExplicit`9.Constructor">
            <summary>设置 Explicit`9.Explicit`9() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimFunction`1.ShimExplicit`9.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimFunction`1.ShimParams">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Static+Function`1+Params 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimFunction`1.ShimParams.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimFunction`1.ShimParams.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Static.Function{`1}.Params)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimFunction`1.ShimParams.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimFunction`1.ShimParams.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimFunction`1.ShimParams.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimFunction`1.ShimParams.Constructor">
            <summary>设置 Params.Params() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimFunction`1.ShimParams.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProcedure">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Static+Procedure 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProcedure.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Static.Procedure)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProcedure.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProcedure.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProcedure.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProcedure.Constructor">
            <summary>设置 Procedure.Procedure() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProcedure.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProcedure.ShimExplicit">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Static+Procedure+Explicit 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProcedure.ShimExplicit.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProcedure.ShimExplicit.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Static.Procedure.Explicit)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProcedure.ShimExplicit.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProcedure.ShimExplicit.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProcedure.ShimExplicit.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProcedure.ShimExplicit.Constructor">
            <summary>设置 Explicit.Explicit() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProcedure.ShimExplicit.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProcedure.ShimExplicit`1">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Static+Procedure+Explicit`1 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProcedure.ShimExplicit`1.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProcedure.ShimExplicit`1.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Static.Procedure.Explicit{`1})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProcedure.ShimExplicit`1.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProcedure.ShimExplicit`1.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProcedure.ShimExplicit`1.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProcedure.ShimExplicit`1.Constructor">
            <summary>设置 Explicit`1.Explicit`1() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProcedure.ShimExplicit`1.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProcedure.ShimExplicit`2">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Static+Procedure+Explicit`2 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProcedure.ShimExplicit`2.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProcedure.ShimExplicit`2.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Static.Procedure.Explicit{`1,`2})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProcedure.ShimExplicit`2.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProcedure.ShimExplicit`2.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProcedure.ShimExplicit`2.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProcedure.ShimExplicit`2.Constructor">
            <summary>设置 Explicit`2.Explicit`2() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProcedure.ShimExplicit`2.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProcedure.ShimExplicit`3">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Static+Procedure+Explicit`3 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProcedure.ShimExplicit`3.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProcedure.ShimExplicit`3.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Static.Procedure.Explicit{`1,`2,`3})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProcedure.ShimExplicit`3.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProcedure.ShimExplicit`3.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProcedure.ShimExplicit`3.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProcedure.ShimExplicit`3.Constructor">
            <summary>设置 Explicit`3.Explicit`3() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProcedure.ShimExplicit`3.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProcedure.ShimExplicit`4">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Static+Procedure+Explicit`4 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProcedure.ShimExplicit`4.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProcedure.ShimExplicit`4.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Static.Procedure.Explicit{`1,`2,`3,`4})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProcedure.ShimExplicit`4.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProcedure.ShimExplicit`4.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProcedure.ShimExplicit`4.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProcedure.ShimExplicit`4.Constructor">
            <summary>设置 Explicit`4.Explicit`4() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProcedure.ShimExplicit`4.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProcedure.ShimExplicit`5">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Static+Procedure+Explicit`5 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProcedure.ShimExplicit`5.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProcedure.ShimExplicit`5.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Static.Procedure.Explicit{`1,`2,`3,`4,`5})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProcedure.ShimExplicit`5.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProcedure.ShimExplicit`5.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProcedure.ShimExplicit`5.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProcedure.ShimExplicit`5.Constructor">
            <summary>设置 Explicit`5.Explicit`5() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProcedure.ShimExplicit`5.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProcedure.ShimExplicit`6">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Static+Procedure+Explicit`6 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProcedure.ShimExplicit`6.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProcedure.ShimExplicit`6.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Static.Procedure.Explicit{`1,`2,`3,`4,`5,`6})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProcedure.ShimExplicit`6.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProcedure.ShimExplicit`6.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProcedure.ShimExplicit`6.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProcedure.ShimExplicit`6.Constructor">
            <summary>设置 Explicit`6.Explicit`6() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProcedure.ShimExplicit`6.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProcedure.ShimExplicit`7">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Static+Procedure+Explicit`7 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProcedure.ShimExplicit`7.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProcedure.ShimExplicit`7.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Static.Procedure.Explicit{`1,`2,`3,`4,`5,`6,`7})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProcedure.ShimExplicit`7.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProcedure.ShimExplicit`7.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProcedure.ShimExplicit`7.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProcedure.ShimExplicit`7.Constructor">
            <summary>设置 Explicit`7.Explicit`7() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProcedure.ShimExplicit`7.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProcedure.ShimExplicit`8">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Static+Procedure+Explicit`8 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProcedure.ShimExplicit`8.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProcedure.ShimExplicit`8.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Static.Procedure.Explicit{`1,`2,`3,`4,`5,`6,`7,`8})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProcedure.ShimExplicit`8.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProcedure.ShimExplicit`8.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProcedure.ShimExplicit`8.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProcedure.ShimExplicit`8.Constructor">
            <summary>设置 Explicit`8.Explicit`8() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProcedure.ShimExplicit`8.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProcedure.ShimExplicit`9">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Static+Procedure+Explicit`9 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProcedure.ShimExplicit`9.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProcedure.ShimExplicit`9.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Static.Procedure.Explicit{`1,`2,`3,`4,`5,`6,`7,`8,`9})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProcedure.ShimExplicit`9.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProcedure.ShimExplicit`9.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProcedure.ShimExplicit`9.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProcedure.ShimExplicit`9.Constructor">
            <summary>设置 Explicit`9.Explicit`9() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProcedure.ShimExplicit`9.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProcedure.ShimParams">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Static+Procedure+Params 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProcedure.ShimParams.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProcedure.ShimParams.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Static.Procedure.Params)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProcedure.ShimParams.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProcedure.ShimParams.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProcedure.ShimParams.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProcedure.ShimParams.Constructor">
            <summary>设置 Params.Params() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProcedure.ShimParams.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Static+Property`1 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Static.Property{`1})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.Constructor">
            <summary>设置 Property`1.Property`1() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Static+Property`1+Explicit 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Static.Property{`1}.Explicit)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit.Constructor">
            <summary>设置 Explicit.Explicit() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit.ShimGetter">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Static+Property`1+Explicit+Getter 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit.ShimGetter.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Static.Property{`1}.Explicit.Getter)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit.ShimGetter.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit.ShimGetter.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit.ShimGetter.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit.ShimGetter.Constructor">
            <summary>设置 Getter.Getter() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit.ShimGetter.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit.ShimSetter">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Static+Property`1+Explicit+Setter 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit.ShimSetter.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Static.Property{`1}.Explicit.Setter)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit.ShimSetter.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit.ShimSetter.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit.ShimSetter.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit.ShimSetter.Constructor">
            <summary>设置 Setter.Setter() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit.ShimSetter.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`1">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Static+Property`1+Explicit`1 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`1.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`1.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Static.Property{`1}.Explicit{`2})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`1.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`1.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`1.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`1.Constructor">
            <summary>设置 Explicit`1.Explicit`1() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`1.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`1.ShimGetter">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Static+Property`1+Explicit`1+Getter 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`1.ShimGetter.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Static.Property{`1}.Explicit{`2}.Getter)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`1.ShimGetter.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`1.ShimGetter.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`1.ShimGetter.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`1.ShimGetter.Constructor">
            <summary>设置 Getter.Getter() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`1.ShimGetter.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`1.ShimSetter">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Static+Property`1+Explicit`1+Setter 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`1.ShimSetter.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Static.Property{`1}.Explicit{`2}.Setter)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`1.ShimSetter.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`1.ShimSetter.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`1.ShimSetter.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`1.ShimSetter.Constructor">
            <summary>设置 Setter.Setter() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`1.ShimSetter.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`2">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Static+Property`1+Explicit`2 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`2.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`2.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Static.Property{`1}.Explicit{`2,`3})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`2.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`2.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`2.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`2.Constructor">
            <summary>设置 Explicit`2.Explicit`2() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`2.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`2.ShimGetter">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Static+Property`1+Explicit`2+Getter 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`2.ShimGetter.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Static.Property{`1}.Explicit{`2,`3}.Getter)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`2.ShimGetter.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`2.ShimGetter.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`2.ShimGetter.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`2.ShimGetter.Constructor">
            <summary>设置 Getter.Getter() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`2.ShimGetter.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`2.ShimSetter">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Static+Property`1+Explicit`2+Setter 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`2.ShimSetter.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Static.Property{`1}.Explicit{`2,`3}.Setter)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`2.ShimSetter.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`2.ShimSetter.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`2.ShimSetter.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`2.ShimSetter.Constructor">
            <summary>设置 Setter.Setter() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`2.ShimSetter.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`3">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Static+Property`1+Explicit`3 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`3.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`3.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Static.Property{`1}.Explicit{`2,`3,`4})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`3.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`3.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`3.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`3.Constructor">
            <summary>设置 Explicit`3.Explicit`3() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`3.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`3.ShimGetter">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Static+Property`1+Explicit`3+Getter 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`3.ShimGetter.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Static.Property{`1}.Explicit{`2,`3,`4}.Getter)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`3.ShimGetter.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`3.ShimGetter.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`3.ShimGetter.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`3.ShimGetter.Constructor">
            <summary>设置 Getter.Getter() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`3.ShimGetter.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`3.ShimSetter">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Static+Property`1+Explicit`3+Setter 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`3.ShimSetter.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Static.Property{`1}.Explicit{`2,`3,`4}.Setter)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`3.ShimSetter.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`3.ShimSetter.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`3.ShimSetter.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`3.ShimSetter.Constructor">
            <summary>设置 Setter.Setter() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`3.ShimSetter.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`4">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Static+Property`1+Explicit`4 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`4.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`4.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Static.Property{`1}.Explicit{`2,`3,`4,`5})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`4.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`4.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`4.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`4.Constructor">
            <summary>设置 Explicit`4.Explicit`4() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`4.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`4.ShimGetter">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Static+Property`1+Explicit`4+Getter 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`4.ShimGetter.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Static.Property{`1}.Explicit{`2,`3,`4,`5}.Getter)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`4.ShimGetter.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`4.ShimGetter.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`4.ShimGetter.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`4.ShimGetter.Constructor">
            <summary>设置 Getter.Getter() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`4.ShimGetter.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`4.ShimSetter">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Static+Property`1+Explicit`4+Setter 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`4.ShimSetter.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Static.Property{`1}.Explicit{`2,`3,`4,`5}.Setter)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`4.ShimSetter.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`4.ShimSetter.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`4.ShimSetter.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`4.ShimSetter.Constructor">
            <summary>设置 Setter.Setter() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`4.ShimSetter.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`5">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Static+Property`1+Explicit`5 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`5.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`5.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Static.Property{`1}.Explicit{`2,`3,`4,`5,`6})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`5.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`5.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`5.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`5.Constructor">
            <summary>设置 Explicit`5.Explicit`5() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`5.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`5.ShimGetter">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Static+Property`1+Explicit`5+Getter 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`5.ShimGetter.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Static.Property{`1}.Explicit{`2,`3,`4,`5,`6}.Getter)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`5.ShimGetter.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`5.ShimGetter.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`5.ShimGetter.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`5.ShimGetter.Constructor">
            <summary>设置 Getter.Getter() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`5.ShimGetter.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`5.ShimSetter">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Static+Property`1+Explicit`5+Setter 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`5.ShimSetter.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Static.Property{`1}.Explicit{`2,`3,`4,`5,`6}.Setter)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`5.ShimSetter.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`5.ShimSetter.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`5.ShimSetter.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`5.ShimSetter.Constructor">
            <summary>设置 Setter.Setter() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`5.ShimSetter.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`6">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Static+Property`1+Explicit`6 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`6.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`6.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Static.Property{`1}.Explicit{`2,`3,`4,`5,`6,`7})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`6.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`6.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`6.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`6.Constructor">
            <summary>设置 Explicit`6.Explicit`6() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`6.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`6.ShimGetter">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Static+Property`1+Explicit`6+Getter 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`6.ShimGetter.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Static.Property{`1}.Explicit{`2,`3,`4,`5,`6,`7}.Getter)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`6.ShimGetter.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`6.ShimGetter.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`6.ShimGetter.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`6.ShimGetter.Constructor">
            <summary>设置 Getter.Getter() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`6.ShimGetter.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`6.ShimSetter">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Static+Property`1+Explicit`6+Setter 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`6.ShimSetter.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Static.Property{`1}.Explicit{`2,`3,`4,`5,`6,`7}.Setter)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`6.ShimSetter.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`6.ShimSetter.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`6.ShimSetter.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`6.ShimSetter.Constructor">
            <summary>设置 Setter.Setter() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`6.ShimSetter.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`7">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Static+Property`1+Explicit`7 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`7.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`7.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Static.Property{`1}.Explicit{`2,`3,`4,`5,`6,`7,`8})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`7.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`7.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`7.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`7.Constructor">
            <summary>设置 Explicit`7.Explicit`7() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`7.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`7.ShimGetter">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Static+Property`1+Explicit`7+Getter 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`7.ShimGetter.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Static.Property{`1}.Explicit{`2,`3,`4,`5,`6,`7,`8}.Getter)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`7.ShimGetter.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`7.ShimGetter.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`7.ShimGetter.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`7.ShimGetter.Constructor">
            <summary>设置 Getter.Getter() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`7.ShimGetter.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`7.ShimSetter">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Static+Property`1+Explicit`7+Setter 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`7.ShimSetter.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Static.Property{`1}.Explicit{`2,`3,`4,`5,`6,`7,`8}.Setter)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`7.ShimSetter.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`7.ShimSetter.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`7.ShimSetter.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`7.ShimSetter.Constructor">
            <summary>设置 Setter.Setter() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`7.ShimSetter.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`8">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Static+Property`1+Explicit`8 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`8.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`8.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Static.Property{`1}.Explicit{`2,`3,`4,`5,`6,`7,`8,`9})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`8.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`8.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`8.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`8.Constructor">
            <summary>设置 Explicit`8.Explicit`8() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`8.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`8.ShimGetter">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Static+Property`1+Explicit`8+Getter 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`8.ShimGetter.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Static.Property{`1}.Explicit{`2,`3,`4,`5,`6,`7,`8,`9}.Getter)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`8.ShimGetter.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`8.ShimGetter.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`8.ShimGetter.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`8.ShimGetter.Constructor">
            <summary>设置 Getter.Getter() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`8.ShimGetter.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`8.ShimSetter">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Static+Property`1+Explicit`8+Setter 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`8.ShimSetter.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Static.Property{`1}.Explicit{`2,`3,`4,`5,`6,`7,`8,`9}.Setter)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`8.ShimSetter.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`8.ShimSetter.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`8.ShimSetter.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`8.ShimSetter.Constructor">
            <summary>设置 Setter.Setter() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimExplicit`8.ShimSetter.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimParams">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Static+Property`1+Params 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimParams.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Static.Property{`1}.Params)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimParams.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimParams.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimParams.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimParams.Constructor">
            <summary>设置 Params.Params() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimParams.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimParams.ShimGetter">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Static+Property`1+Params+Getter 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimParams.ShimGetter.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Static.Property{`1}.Params.Getter)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimParams.ShimGetter.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimParams.ShimGetter.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimParams.ShimGetter.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimParams.ShimGetter.Constructor">
            <summary>设置 Getter.Getter() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimParams.ShimGetter.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimParams.ShimSetter">
            <summary>FC.Framework.DynamicReflection.Dynamic`1+Static+Property`1+Params+Setter 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimParams.ShimSetter.#ctor(FC.Framework.DynamicReflection.Dynamic{`0}.Static.Property{`1}.Params.Setter)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimParams.ShimSetter.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimParams.ShimSetter.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimParams.ShimSetter.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimParams.ShimSetter.Constructor">
            <summary>设置 Setter.Setter() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamic`1.ShimStatic.ShimProperty`1.ShimParams.ShimSetter.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamicEmit">
            <summary>FC.Framework.DynamicReflection.DynamicEmit 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamicEmit.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamicEmit.#ctor(FC.Framework.DynamicReflection.DynamicEmit)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamicEmit.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamicEmit.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamicEmit.BoxIfNeededOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action)">
            <summary>设置 DynamicEmit.BoxIfNeeded() 的 填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamicEmit.ConvertOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action)">
            <summary>设置 DynamicEmit.Convert() 的 填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamicEmit.LoadTokenOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action)">
            <summary>设置 DynamicEmit.LoadToken() 的 填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamicEmit.LoadTypeOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action)">
            <summary>设置 DynamicEmit.LoadType() 的 填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamicEmit.NewArrayOf1Int32``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.Int32})">
            <summary>设置 DynamicEmit.NewArray(Int32 length) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamicEmit.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamicEmit.BoxIfNeededType">
            <summary>设置 DynamicEmit.BoxIfNeeded(Type type) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamicEmit.BranchEqualLabelBoolean">
            <summary>设置 DynamicEmit.BranchEqual(Label label, Boolean isShort) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamicEmit.BranchEqualLabelBooleanDouble">
            <summary>设置 DynamicEmit.BranchEqual(Label label, Boolean isShort, Double value) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamicEmit.BranchEqualLabelBooleanInt32">
            <summary>设置 DynamicEmit.BranchEqual(Label label, Boolean isShort, Int32 value) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamicEmit.BranchEqualLabelBooleanInt64">
            <summary>设置 DynamicEmit.BranchEqual(Label label, Boolean isShort, Int64 value) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamicEmit.BranchEqualLabelBooleanSingle">
            <summary>设置 DynamicEmit.BranchEqual(Label label, Boolean isShort, Single value) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamicEmit.BranchGreaterEqualLabelBoolean">
            <summary>设置 DynamicEmit.BranchGreaterEqual(Label label, Boolean isShort) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamicEmit.BranchGreaterLabelBoolean">
            <summary>设置 DynamicEmit.BranchGreater(Label label, Boolean isShort) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamicEmit.BranchIfFalseLabelBoolean">
            <summary>设置 DynamicEmit.BranchIfFalse(Label label, Boolean isShort) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamicEmit.BranchIfNonZeroLabelBoolean">
            <summary>设置 DynamicEmit.BranchIfNonZero(Label label, Boolean isShort) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamicEmit.BranchIfNotNullLabelBoolean">
            <summary>设置 DynamicEmit.BranchIfNotNull(Label label, Boolean isShort) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamicEmit.BranchIfNullLabelBoolean">
            <summary>设置 DynamicEmit.BranchIfNull(Label label, Boolean isShort) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamicEmit.BranchIfTrueLabelBoolean">
            <summary>设置 DynamicEmit.BranchIfTrue(Label label, Boolean isShort) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamicEmit.BranchIfZeroLabelBoolean">
            <summary>设置 DynamicEmit.BranchIfZero(Label label, Boolean isShort) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamicEmit.BranchLabelBoolean">
            <summary>设置 DynamicEmit.Branch(Label label, Boolean isShort) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamicEmit.BranchLessEqualLabelBoolean">
            <summary>设置 DynamicEmit.BranchLessEqual(Label label, Boolean isShort) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamicEmit.BranchLessLabelBoolean">
            <summary>设置 DynamicEmit.BranchLess(Label label, Boolean isShort) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamicEmit.CallConstructorInfo">
            <summary>设置 DynamicEmit.Call(ConstructorInfo constructor) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamicEmit.CallMethodInfo">
            <summary>设置 DynamicEmit.Call(MethodInfo method) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamicEmit.CastToType">
            <summary>设置 DynamicEmit.CastTo(Type toType) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamicEmit.CastToTypeType">
            <summary>设置 DynamicEmit.CastTo(Type fromType, Type toType) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamicEmit.ConstructorDynamicMethod">
            <summary>设置 DynamicEmit.DynamicEmit(DynamicMethod dm) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamicEmit.ConstructorILGenerator">
            <summary>设置 DynamicEmit.DynamicEmit(ILGenerator ilGen) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamicEmit.ConvertType">
            <summary>设置 DynamicEmit.Convert(Type toType) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamicEmit.DeclareLocalType">
            <summary>设置 DynamicEmit.DeclareLocal(Type type) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamicEmit.DefineLabel">
            <summary>设置 DynamicEmit.DefineLabel() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamicEmit.Duplicate">
            <summary>设置 DynamicEmit.Duplicate() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamicEmit.GetBooleanInt32SortProperty">
            <summary>设置 DynamicEmit.Get(Boolean targetIsValueType, Int32 argumentIndex, SortProperty property) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamicEmit.LoadArgumentAddressInt32">
            <summary>设置 DynamicEmit.LoadArgumentAddress(Int32 argumentIndex) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamicEmit.LoadArgumentBooleanInt32">
            <summary>设置 DynamicEmit.LoadArgument(Boolean targetIsValueType, Int32 argumentIndex) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamicEmit.LoadArgumentInt32">
            <summary>设置 DynamicEmit.LoadArgument(Int32 argumentIndex) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamicEmit.LoadArrayLength">
            <summary>设置 DynamicEmit.LoadArrayLength() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamicEmit.LoadElementReference">
            <summary>设置 DynamicEmit.LoadElementReference() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamicEmit.LoadFieldFieldInfo">
            <summary>设置 DynamicEmit.LoadField(FieldInfo field) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamicEmit.LoadLiteralDouble">
            <summary>设置 DynamicEmit.LoadLiteral(Double value) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamicEmit.LoadLiteralInt32">
            <summary>设置 DynamicEmit.LoadLiteral(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamicEmit.LoadLiteralInt64">
            <summary>设置 DynamicEmit.LoadLiteral(Int64 value) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamicEmit.LoadLiteralSingle">
            <summary>设置 DynamicEmit.LoadLiteral(Single value) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamicEmit.LoadLiteralString">
            <summary>设置 DynamicEmit.LoadLiteral(String value) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamicEmit.LoadLocalAddressInt32">
            <summary>设置 DynamicEmit.LoadLocalAddress(Int32 localIndex) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamicEmit.LoadLocalInt32">
            <summary>设置 DynamicEmit.LoadLocal(Int32 localIndex) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamicEmit.LoadNull">
            <summary>设置 DynamicEmit.LoadNull() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamicEmit.LoadTokenType">
            <summary>设置 DynamicEmit.LoadToken(Type type) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamicEmit.LoadTypeType">
            <summary>设置 DynamicEmit.LoadType(Type type) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamicEmit.MarkLabelLabel">
            <summary>设置 DynamicEmit.MarkLabel(Label loc) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamicEmit.Negate">
            <summary>设置 DynamicEmit.Negate() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamicEmit.NewObjectConstructorInfo">
            <summary>设置 DynamicEmit.NewObject(ConstructorInfo constructor) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamicEmit.Pop">
            <summary>设置 DynamicEmit.Pop() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamicEmit.Return">
            <summary>设置 DynamicEmit.Return() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamicEmit.StaticConstructor">
            <summary>设置 DynamicEmit.DynamicEmit() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamicEmit.StoreElement">
            <summary>设置 DynamicEmit.StoreElement() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamicEmit.StoreElementReference">
            <summary>设置 DynamicEmit.StoreElementReference() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamicEmit.StoreFieldFieldInfo">
            <summary>设置 DynamicEmit.StoreField(FieldInfo field) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamicEmit.StoreLocalInt32">
            <summary>设置 DynamicEmit.StoreLocal(Int32 localIndex) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamicEmit.StringFormat">
            <summary>设置 DynamicEmit.StringFormat() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamicEmit.Throw">
            <summary>设置 DynamicEmit.Throw() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamicEmit.TypeFromHandle">
            <summary>设置 DynamicEmit.TypeFromHandle() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamicEmit.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamicEmit.AllInstances.BoxIfNeededOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{FC.Framework.DynamicReflection.DynamicEmit})">
            <summary>设置 DynamicEmit.BoxIfNeeded() 的 填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamicEmit.AllInstances.ConvertOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{FC.Framework.DynamicReflection.DynamicEmit})">
            <summary>设置 DynamicEmit.Convert() 的 填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamicEmit.AllInstances.LoadTokenOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{FC.Framework.DynamicReflection.DynamicEmit})">
            <summary>设置 DynamicEmit.LoadToken() 的 填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamicEmit.AllInstances.LoadTypeOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{FC.Framework.DynamicReflection.DynamicEmit})">
            <summary>设置 DynamicEmit.LoadType() 的 填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamicEmit.AllInstances.NewArrayOf1Int32``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{FC.Framework.DynamicReflection.DynamicEmit,System.Int32})">
            <summary>设置 DynamicEmit.NewArray(Int32 length) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamicEmit.AllInstances.BoxIfNeededType">
            <summary>设置 DynamicEmit.BoxIfNeeded(Type type) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamicEmit.AllInstances.BranchEqualLabelBoolean">
            <summary>设置 DynamicEmit.BranchEqual(Label label, Boolean isShort) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamicEmit.AllInstances.BranchEqualLabelBooleanDouble">
            <summary>设置 DynamicEmit.BranchEqual(Label label, Boolean isShort, Double value) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamicEmit.AllInstances.BranchEqualLabelBooleanInt32">
            <summary>设置 DynamicEmit.BranchEqual(Label label, Boolean isShort, Int32 value) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamicEmit.AllInstances.BranchEqualLabelBooleanInt64">
            <summary>设置 DynamicEmit.BranchEqual(Label label, Boolean isShort, Int64 value) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamicEmit.AllInstances.BranchEqualLabelBooleanSingle">
            <summary>设置 DynamicEmit.BranchEqual(Label label, Boolean isShort, Single value) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamicEmit.AllInstances.BranchGreaterEqualLabelBoolean">
            <summary>设置 DynamicEmit.BranchGreaterEqual(Label label, Boolean isShort) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamicEmit.AllInstances.BranchGreaterLabelBoolean">
            <summary>设置 DynamicEmit.BranchGreater(Label label, Boolean isShort) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamicEmit.AllInstances.BranchIfFalseLabelBoolean">
            <summary>设置 DynamicEmit.BranchIfFalse(Label label, Boolean isShort) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamicEmit.AllInstances.BranchIfNonZeroLabelBoolean">
            <summary>设置 DynamicEmit.BranchIfNonZero(Label label, Boolean isShort) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamicEmit.AllInstances.BranchIfNotNullLabelBoolean">
            <summary>设置 DynamicEmit.BranchIfNotNull(Label label, Boolean isShort) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamicEmit.AllInstances.BranchIfNullLabelBoolean">
            <summary>设置 DynamicEmit.BranchIfNull(Label label, Boolean isShort) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamicEmit.AllInstances.BranchIfTrueLabelBoolean">
            <summary>设置 DynamicEmit.BranchIfTrue(Label label, Boolean isShort) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamicEmit.AllInstances.BranchIfZeroLabelBoolean">
            <summary>设置 DynamicEmit.BranchIfZero(Label label, Boolean isShort) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamicEmit.AllInstances.BranchLabelBoolean">
            <summary>设置 DynamicEmit.Branch(Label label, Boolean isShort) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamicEmit.AllInstances.BranchLessEqualLabelBoolean">
            <summary>设置 DynamicEmit.BranchLessEqual(Label label, Boolean isShort) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamicEmit.AllInstances.BranchLessLabelBoolean">
            <summary>设置 DynamicEmit.BranchLess(Label label, Boolean isShort) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamicEmit.AllInstances.CallConstructorInfo">
            <summary>设置 DynamicEmit.Call(ConstructorInfo constructor) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamicEmit.AllInstances.CallMethodInfo">
            <summary>设置 DynamicEmit.Call(MethodInfo method) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamicEmit.AllInstances.CastToType">
            <summary>设置 DynamicEmit.CastTo(Type toType) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamicEmit.AllInstances.CastToTypeType">
            <summary>设置 DynamicEmit.CastTo(Type fromType, Type toType) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamicEmit.AllInstances.ConvertType">
            <summary>设置 DynamicEmit.Convert(Type toType) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamicEmit.AllInstances.DeclareLocalType">
            <summary>设置 DynamicEmit.DeclareLocal(Type type) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamicEmit.AllInstances.DefineLabel">
            <summary>设置 DynamicEmit.DefineLabel() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamicEmit.AllInstances.Duplicate">
            <summary>设置 DynamicEmit.Duplicate() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamicEmit.AllInstances.GetBooleanInt32SortProperty">
            <summary>设置 DynamicEmit.Get(Boolean targetIsValueType, Int32 argumentIndex, SortProperty property) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamicEmit.AllInstances.LoadArgumentAddressInt32">
            <summary>设置 DynamicEmit.LoadArgumentAddress(Int32 argumentIndex) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamicEmit.AllInstances.LoadArgumentBooleanInt32">
            <summary>设置 DynamicEmit.LoadArgument(Boolean targetIsValueType, Int32 argumentIndex) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamicEmit.AllInstances.LoadArgumentInt32">
            <summary>设置 DynamicEmit.LoadArgument(Int32 argumentIndex) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamicEmit.AllInstances.LoadArrayLength">
            <summary>设置 DynamicEmit.LoadArrayLength() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamicEmit.AllInstances.LoadElementReference">
            <summary>设置 DynamicEmit.LoadElementReference() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamicEmit.AllInstances.LoadFieldFieldInfo">
            <summary>设置 DynamicEmit.LoadField(FieldInfo field) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamicEmit.AllInstances.LoadLiteralDouble">
            <summary>设置 DynamicEmit.LoadLiteral(Double value) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamicEmit.AllInstances.LoadLiteralInt32">
            <summary>设置 DynamicEmit.LoadLiteral(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamicEmit.AllInstances.LoadLiteralInt64">
            <summary>设置 DynamicEmit.LoadLiteral(Int64 value) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamicEmit.AllInstances.LoadLiteralSingle">
            <summary>设置 DynamicEmit.LoadLiteral(Single value) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamicEmit.AllInstances.LoadLiteralString">
            <summary>设置 DynamicEmit.LoadLiteral(String value) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamicEmit.AllInstances.LoadLocalAddressInt32">
            <summary>设置 DynamicEmit.LoadLocalAddress(Int32 localIndex) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamicEmit.AllInstances.LoadLocalInt32">
            <summary>设置 DynamicEmit.LoadLocal(Int32 localIndex) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamicEmit.AllInstances.LoadNull">
            <summary>设置 DynamicEmit.LoadNull() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamicEmit.AllInstances.LoadTokenType">
            <summary>设置 DynamicEmit.LoadToken(Type type) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamicEmit.AllInstances.LoadTypeType">
            <summary>设置 DynamicEmit.LoadType(Type type) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamicEmit.AllInstances.MarkLabelLabel">
            <summary>设置 DynamicEmit.MarkLabel(Label loc) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamicEmit.AllInstances.Negate">
            <summary>设置 DynamicEmit.Negate() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamicEmit.AllInstances.NewObjectConstructorInfo">
            <summary>设置 DynamicEmit.NewObject(ConstructorInfo constructor) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamicEmit.AllInstances.Pop">
            <summary>设置 DynamicEmit.Pop() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamicEmit.AllInstances.Return">
            <summary>设置 DynamicEmit.Return() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamicEmit.AllInstances.StoreElement">
            <summary>设置 DynamicEmit.StoreElement() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamicEmit.AllInstances.StoreElementReference">
            <summary>设置 DynamicEmit.StoreElementReference() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamicEmit.AllInstances.StoreFieldFieldInfo">
            <summary>设置 DynamicEmit.StoreField(FieldInfo field) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamicEmit.AllInstances.StoreLocalInt32">
            <summary>设置 DynamicEmit.StoreLocal(Int32 localIndex) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamicEmit.AllInstances.StringFormat">
            <summary>设置 DynamicEmit.StringFormat() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamicEmit.AllInstances.Throw">
            <summary>设置 DynamicEmit.Throw() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamicEmit.AllInstances.TypeFromHandle">
            <summary>设置 DynamicEmit.TypeFromHandle() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamicIComparable`1">
            <summary>FC.Framework.DynamicReflection.DynamicIComparable`1 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamicIComparable`1.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamicIComparable`1.#ctor(FC.Framework.DynamicReflection.DynamicIComparable{`0})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamicIComparable`1.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamicIComparable`1.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimDynamicIComparable`1.Bind(System.Collections.Generic.IComparer{`0})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamicIComparable`1.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamicIComparable`1.CompareT0T0">
            <summary>设置 DynamicIComparable`1.Compare(!0 x, !0 y) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamicIComparable`1.ConstructorSortPropertyArray">
            <summary>设置 DynamicIComparable`1.DynamicIComparable`1(SortProperty[] sortProperties) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamicIComparable`1.ConstructorString">
            <summary>设置 DynamicIComparable`1.DynamicIComparable`1(String orderBy) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamicIComparable`1.CreateDynamicCompareMethodSortPropertyArray">
            <summary>设置 DynamicIComparable`1.CreateDynamicCompareMethod(SortProperty[] sortProperties) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamicIComparable`1.IComparerGet">
            <summary>设置 DynamicIComparable`1.get_IComparer() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamicIComparable`1.InitializeSortPropertyArray">
            <summary>设置 DynamicIComparable`1.Initialize(SortProperty[] sortProperties) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamicIComparable`1.InitializeString">
            <summary>设置 DynamicIComparable`1.Initialize(String orderBy) 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimDynamicIComparable`1.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamicIComparable`1.AllInstances.CompareT0T0">
            <summary>设置 DynamicIComparable`1.Compare(!0 x, !0 y) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamicIComparable`1.AllInstances.CreateDynamicCompareMethodSortPropertyArray">
            <summary>设置 DynamicIComparable`1.CreateDynamicCompareMethod(SortProperty[] sortProperties) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamicIComparable`1.AllInstances.IComparerGet">
            <summary>设置 DynamicIComparable`1.get_IComparer() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamicIComparable`1.AllInstances.InitializeSortPropertyArray">
            <summary>设置 DynamicIComparable`1.Initialize(SortProperty[] sortProperties) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimDynamicIComparable`1.AllInstances.InitializeString">
            <summary>设置 DynamicIComparable`1.Initialize(String orderBy) 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimParameterCountMismatchException">
            <summary>FC.Framework.DynamicReflection.ParameterCountMismatchException 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimParameterCountMismatchException.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimParameterCountMismatchException.#ctor(FC.Framework.DynamicReflection.ParameterCountMismatchException)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimParameterCountMismatchException.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimParameterCountMismatchException.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimParameterCountMismatchException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimParameterCountMismatchException.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimParameterCountMismatchException.CheckAndThrowMethodInfoGet">
            <summary>设置 ParameterCountMismatchException.get_CheckAndThrowMethodInfo() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimParameterCountMismatchException.CheckAndThrowTypeStringInt32Int32">
            <summary>设置 ParameterCountMismatchException.CheckAndThrow(Type type, String methodName, Int32 expectedParameterCount, Int32 actualArgumentCount) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimParameterCountMismatchException.ConstructorTypeStringInt32Int32">
            <summary>设置 ParameterCountMismatchException.ParameterCountMismatchException(Type type, String methodName, Int32 expectedParameterCount, Int32 actualArgumentCount) 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimParameterCountMismatchException.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimSortProperty">
            <summary>FC.Framework.DynamicReflection.SortProperty 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimSortProperty.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimSortProperty.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.ShimSortProperty.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimSortProperty.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimSortProperty.BindSortPropertiesSortPropertyArrayType">
            <summary>设置 SortProperty.BindSortProperties(SortProperty[] sortProperties, Type instanceType) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimSortProperty.IsComparableType">
            <summary>设置 SortProperty.IsComparable(Type valueType) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimSortProperty.IsComparableTypeBooleanOut">
            <summary>设置 SortProperty.IsComparable(Type valueType, Boolean&amp; isNullable) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.ShimSortProperty.ParseOrderByString">
            <summary>设置 SortProperty.ParseOrderBy(String orderBy) 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.ShimSortProperty.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.StubDynamic`1">
            <summary>FC.Framework.DynamicReflection.Dynamic`1 的存根类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.StubDynamic`1.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.StubDynamic`1.InitializeStub">
            <summary>初始化 type StubDynamic 的新实例</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.StubDynamic`1.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.StubDynamic`1.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.StubDynamic`1.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.StubDynamicEmit">
            <summary>FC.Framework.DynamicReflection.DynamicEmit 的存根类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.StubDynamicEmit.#ctor(System.Reflection.Emit.DynamicMethod)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.StubDynamicEmit.#ctor(System.Reflection.Emit.ILGenerator)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.StubDynamicEmit.InitializeStub">
            <summary>初始化 type StubDynamicEmit 的新实例</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.StubDynamicEmit.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.StubDynamicEmit.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.StubDynamicEmit.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:FC.Framework.DynamicReflection.Fakes.StubParameterCountMismatchException">
            <summary>FC.Framework.DynamicReflection.ParameterCountMismatchException 的存根类型</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.StubParameterCountMismatchException.#ctor(System.Type,System.String,System.Int32,System.Int32)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.StubParameterCountMismatchException.AttachBackingFieldToHelpLink">
            <summary>附加委托以将 StubParameterCountMismatchException.HelpLink 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.StubParameterCountMismatchException.AttachBackingFieldToSource">
            <summary>附加委托以将 StubParameterCountMismatchException.Source 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="F:FC.Framework.DynamicReflection.Fakes.StubParameterCountMismatchException.DataGet">
            <summary>设置 Exception.get_Data() 的 stub</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.StubParameterCountMismatchException.GetBaseException">
            <summary>设置 Exception.GetBaseException() 的 存根</summary>
        </member>
        <member name="F:FC.Framework.DynamicReflection.Fakes.StubParameterCountMismatchException.GetBaseException01">
            <summary>设置 Exception.GetBaseException() 的 stub</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.StubParameterCountMismatchException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>设置 ArgumentException.GetObjectData(SerializationInfo info, StreamingContext context) 的 存根</summary>
        </member>
        <member name="F:FC.Framework.DynamicReflection.Fakes.StubParameterCountMismatchException.GetObjectDataSerializationInfoStreamingContext">
            <summary>设置 ArgumentException.GetObjectData(SerializationInfo info, StreamingContext context) 的 stub</summary>
        </member>
        <member name="F:FC.Framework.DynamicReflection.Fakes.StubParameterCountMismatchException.HelpLinkGet">
            <summary>设置 Exception.get_HelpLink() 的 stub</summary>
        </member>
        <member name="F:FC.Framework.DynamicReflection.Fakes.StubParameterCountMismatchException.HelpLinkSetString">
            <summary>设置 Exception.set_HelpLink(String value) 的 stub</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.StubParameterCountMismatchException.InitializeStub">
            <summary>初始化 type StubParameterCountMismatchException 的新实例</summary>
        </member>
        <member name="F:FC.Framework.DynamicReflection.Fakes.StubParameterCountMismatchException.MessageGet">
            <summary>设置 ArgumentException.get_Message() 的 stub</summary>
        </member>
        <member name="F:FC.Framework.DynamicReflection.Fakes.StubParameterCountMismatchException.ParamNameGet">
            <summary>设置 ArgumentException.get_ParamName() 的 stub</summary>
        </member>
        <member name="F:FC.Framework.DynamicReflection.Fakes.StubParameterCountMismatchException.SourceGet">
            <summary>设置 Exception.get_Source() 的 stub</summary>
        </member>
        <member name="F:FC.Framework.DynamicReflection.Fakes.StubParameterCountMismatchException.SourceSetString">
            <summary>设置 Exception.set_Source(String value) 的 stub</summary>
        </member>
        <member name="F:FC.Framework.DynamicReflection.Fakes.StubParameterCountMismatchException.StackTraceGet">
            <summary>设置 Exception.get_StackTrace() 的 stub</summary>
        </member>
        <member name="M:FC.Framework.DynamicReflection.Fakes.StubParameterCountMismatchException.ToString">
            <summary>设置 Exception.ToString() 的 存根</summary>
        </member>
        <member name="F:FC.Framework.DynamicReflection.Fakes.StubParameterCountMismatchException.ToString01">
            <summary>设置 Exception.ToString() 的 stub</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.StubParameterCountMismatchException.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.StubParameterCountMismatchException.Data">
            <summary>设置 Exception.get_Data() 的 stub</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.StubParameterCountMismatchException.HelpLink">
            <summary>设置 Exception.get_HelpLink() 的 stub</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.StubParameterCountMismatchException.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.StubParameterCountMismatchException.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.StubParameterCountMismatchException.Message">
            <summary>设置 ArgumentException.get_Message() 的 stub</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.StubParameterCountMismatchException.ParamName">
            <summary>设置 ArgumentException.get_ParamName() 的 stub</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.StubParameterCountMismatchException.Source">
            <summary>设置 Exception.get_Source() 的 stub</summary>
        </member>
        <member name="P:FC.Framework.DynamicReflection.Fakes.StubParameterCountMismatchException.StackTrace">
            <summary>设置 Exception.get_StackTrace() 的 stub</summary>
        </member>
        <member name="T:FC.Framework.Fakes.ShimAbstractCommandExecutor`1">
            <summary>FC.Framework.AbstractCommandExecutor`1 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimAbstractCommandExecutor`1.#ctor(FC.Framework.AbstractCommandExecutor{`0})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimAbstractCommandExecutor`1.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimAbstractCommandExecutor`1.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimAbstractCommandExecutor`1.Bind(FC.Framework.ICommandExecutor{`0})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimAbstractCommandExecutor`1.AfterExecuteAddActionOfT0">
            <summary>设置 AbstractCommandExecutor`1.add_AfterExecute(Action`1&lt;!0&gt; value) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimAbstractCommandExecutor`1.AfterExecuteRemoveActionOfT0">
            <summary>设置 AbstractCommandExecutor`1.remove_AfterExecute(Action`1&lt;!0&gt; value) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimAbstractCommandExecutor`1.BeforeExecuteAddActionOfT0">
            <summary>设置 AbstractCommandExecutor`1.add_BeforeExecute(Action`1&lt;!0&gt; value) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimAbstractCommandExecutor`1.BeforeExecuteRemoveActionOfT0">
            <summary>设置 AbstractCommandExecutor`1.remove_BeforeExecute(Action`1&lt;!0&gt; value) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimAbstractCommandExecutor`1.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimAbstractCommandExecutor`1.Constructor">
            <summary>设置 AbstractCommandExecutor`1.AbstractCommandExecutor`1() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimAbstractCommandExecutor`1.DomainContextGet">
            <summary>设置 AbstractCommandExecutor`1.get_DomainContext() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimAbstractCommandExecutor`1.DomainContextSetIDomainContext">
            <summary>设置 AbstractCommandExecutor`1.set_DomainContext(IDomainContext value) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimAbstractCommandExecutor`1.OnExecutedT0">
            <summary>设置 AbstractCommandExecutor`1.OnExecuted(!0 cmd) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimAbstractCommandExecutor`1.OnExecutingT0">
            <summary>设置 AbstractCommandExecutor`1.OnExecuting(!0 cmd) 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.Fakes.ShimAbstractCommandExecutor`1.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimAbstractCommandExecutor`1.AllInstances.AfterExecuteAddActionOfT0">
            <summary>设置 AbstractCommandExecutor`1.add_AfterExecute(Action`1&lt;!0&gt; value) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimAbstractCommandExecutor`1.AllInstances.AfterExecuteRemoveActionOfT0">
            <summary>设置 AbstractCommandExecutor`1.remove_AfterExecute(Action`1&lt;!0&gt; value) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimAbstractCommandExecutor`1.AllInstances.BeforeExecuteAddActionOfT0">
            <summary>设置 AbstractCommandExecutor`1.add_BeforeExecute(Action`1&lt;!0&gt; value) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimAbstractCommandExecutor`1.AllInstances.BeforeExecuteRemoveActionOfT0">
            <summary>设置 AbstractCommandExecutor`1.remove_BeforeExecute(Action`1&lt;!0&gt; value) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimAbstractCommandExecutor`1.AllInstances.DomainContextGet">
            <summary>设置 AbstractCommandExecutor`1.get_DomainContext() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimAbstractCommandExecutor`1.AllInstances.DomainContextSetIDomainContext">
            <summary>设置 AbstractCommandExecutor`1.set_DomainContext(IDomainContext value) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimAbstractCommandExecutor`1.AllInstances.OnExecutedT0">
            <summary>设置 AbstractCommandExecutor`1.OnExecuted(!0 cmd) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimAbstractCommandExecutor`1.AllInstances.OnExecutingT0">
            <summary>设置 AbstractCommandExecutor`1.OnExecuting(!0 cmd) 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.Fakes.ShimAbstractUnitOfWork">
            <summary>FC.Framework.AbstractUnitOfWork 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimAbstractUnitOfWork.#ctor(FC.Framework.AbstractUnitOfWork)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimAbstractUnitOfWork.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimAbstractUnitOfWork.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimAbstractUnitOfWork.Bind(FC.Framework.IUnitOfWork)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimAbstractUnitOfWork.Bind(System.IDisposable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimAbstractUnitOfWork.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimAbstractUnitOfWork.Commit">
            <summary>设置 AbstractUnitOfWork.Commit() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimAbstractUnitOfWork.Constructor">
            <summary>设置 AbstractUnitOfWork.AbstractUnitOfWork() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimAbstractUnitOfWork.DisposeBoolean">
            <summary>设置 AbstractUnitOfWork.Dispose(Boolean disposing) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimAbstractUnitOfWork.OnCommited">
            <summary>设置 AbstractUnitOfWork.OnCommited() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimAbstractUnitOfWork._OnCommitedb__0Action">
            <summary>设置 AbstractUnitOfWork.&lt;OnCommited&gt;b__0(Action action) 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.Fakes.ShimAbstractUnitOfWork.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimAbstractUnitOfWork.AllInstances.Commit">
            <summary>设置 AbstractUnitOfWork.Commit() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimAbstractUnitOfWork.AllInstances.DisposeBoolean">
            <summary>设置 AbstractUnitOfWork.Dispose(Boolean disposing) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimAbstractUnitOfWork.AllInstances.OnCommited">
            <summary>设置 AbstractUnitOfWork.OnCommited() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.Fakes.ShimAwaitCommittedAttribute">
            <summary>FC.Framework.AwaitCommittedAttribute 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimAwaitCommittedAttribute.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimAwaitCommittedAttribute.#ctor(FC.Framework.AwaitCommittedAttribute)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimAwaitCommittedAttribute.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimAwaitCommittedAttribute.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimAwaitCommittedAttribute.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimAwaitCommittedAttribute.Constructor">
            <summary>设置 AwaitCommittedAttribute.AwaitCommittedAttribute() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimAwaitCommittedAttribute.StrategyGet">
            <summary>设置 AwaitCommittedAttribute.get_Strategy() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimAwaitCommittedAttribute.StrategySetEventDispatchStrategy">
            <summary>设置 AwaitCommittedAttribute.set_Strategy(EventDispatchStrategy value) 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.Fakes.ShimAwaitCommittedAttribute.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimAwaitCommittedAttribute.AllInstances.StrategyGet">
            <summary>设置 AwaitCommittedAttribute.get_Strategy() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimAwaitCommittedAttribute.AllInstances.StrategySetEventDispatchStrategy">
            <summary>设置 AwaitCommittedAttribute.set_Strategy(EventDispatchStrategy value) 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.Fakes.ShimCache">
            <summary>FC.Framework.Cache 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimCache.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimCache.AddOf1StringM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.String,``0})">
            <summary>设置 Cache.Add(String key, !!0 value) 的 填充码</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimCache.AddOf1StringM0DateTime``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.String,``0,System.DateTime})">
            <summary>设置 Cache.Add(String key, !!0 value, DateTime absoluteExpiration) 的 填充码</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimCache.AddOf1StringM0TimeSpan``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.String,``0,System.TimeSpan})">
            <summary>设置 Cache.Add(String key, !!0 value, TimeSpan slidingExpiration) 的 填充码</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimCache.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimCache.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimCache.GetOf1String``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,``0})">
            <summary>设置 Cache.Get(String key) 的 填充码</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimCache.TryGetOf1StringM0Out``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutFunc{System.String,``0,System.Boolean})">
            <summary>设置 Cache.TryGet(String key, !!0&amp; value) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimCache.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimCache.GetString">
            <summary>设置 Cache.Get(String key) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimCache.RemoveString">
            <summary>设置 Cache.Remove(String key) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimCache.StaticConstructor">
            <summary>设置 Cache.Cache() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimCache.TryGetStringObjectOut">
            <summary>设置 Cache.TryGet(String key, Object&amp; value) 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.Fakes.ShimCollectionExtension">
            <summary>FC.Framework.CollectionExtension 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimCollectionExtension.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimCollectionExtension.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimCollectionExtension.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimCollectionExtension.IsNullOrEmptyOf1ICollectionOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.Generic.ICollection{``0},System.Boolean})">
            <summary>设置 CollectionExtension.IsNullOrEmpty(ICollection`1&lt;!!0&gt; collection) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimCollectionExtension.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="T:FC.Framework.Fakes.ShimCommand">
            <summary>FC.Framework.Command 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimCommand.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimCommand.#ctor(FC.Framework.Command)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimCommand.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimCommand.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimCommand.Bind(FC.Framework.ICommand)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimCommand.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimCommand.Constructor">
            <summary>设置 Command.Command() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimCommand.IDGet">
            <summary>设置 Command.get_ID() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimCommand.IDSetString">
            <summary>设置 Command.set_ID(String value) 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.Fakes.ShimCommand.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimCommand.AllInstances.IDGet">
            <summary>设置 Command.get_ID() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimCommand.AllInstances.IDSetString">
            <summary>设置 Command.set_ID(String value) 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.Fakes.ShimCommandExecutionException">
            <summary>FC.Framework.CommandExecutionException 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimCommandExecutionException.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimCommandExecutionException.#ctor(FC.Framework.CommandExecutionException)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimCommandExecutionException.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimCommandExecutionException.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimCommandExecutionException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimCommandExecutionException.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimCommandExecutionException.ConstructorInt32String">
            <summary>设置 CommandExecutionException.CommandExecutionException(Int32 errorCode, String message) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimCommandExecutionException.ConstructorInt32StringException">
            <summary>设置 CommandExecutionException.CommandExecutionException(Int32 errorCode, String message, Exception innerException) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimCommandExecutionException.ErrorCodeGet">
            <summary>设置 CommandExecutionException.get_ErrorCode() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimCommandExecutionException.ErrorCodeSetInt32">
            <summary>设置 CommandExecutionException.set_ErrorCode(Int32 value) 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.Fakes.ShimCommandExecutionException.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimCommandExecutionException.AllInstances.ErrorCodeGet">
            <summary>设置 CommandExecutionException.get_ErrorCode() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimCommandExecutionException.AllInstances.ErrorCodeSetInt32">
            <summary>设置 CommandExecutionException.set_ErrorCode(Int32 value) 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.Fakes.ShimCommandExecutorActivator">
            <summary>FC.Framework.CommandExecutorActivator 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimCommandExecutorActivator.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimCommandExecutorActivator.#ctor(FC.Framework.CommandExecutorActivator)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimCommandExecutorActivator.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimCommandExecutorActivator.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimCommandExecutorActivator.Bind(FC.Framework.ICommandExecutorActivator)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimCommandExecutorActivator.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimCommandExecutorActivator.Constructor">
            <summary>设置 CommandExecutorActivator.CommandExecutorActivator() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimCommandExecutorActivator.CreateInstanceType">
            <summary>设置 CommandExecutorActivator.CreateInstance(Type type) 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.Fakes.ShimCommandExecutorActivator.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimCommandExecutorActivator.AllInstances.CreateInstanceType">
            <summary>设置 CommandExecutorActivator.CreateInstance(Type type) 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.Fakes.ShimCommandExecutorContainer">
            <summary>FC.Framework.CommandExecutorContainer 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimCommandExecutorContainer.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimCommandExecutorContainer.#ctor(FC.Framework.CommandExecutorContainer)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimCommandExecutorContainer.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimCommandExecutorContainer.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimCommandExecutorContainer.Bind(FC.Framework.ICommandExecutorContainer)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimCommandExecutorContainer.FindExecutorTypeOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Type})">
            <summary>设置 CommandExecutorContainer.FindExecutorType() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimCommandExecutorContainer.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimCommandExecutorContainer.Constructor">
            <summary>设置 CommandExecutorContainer.CommandExecutorContainer() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimCommandExecutorContainer.RegisterExecutorType">
            <summary>设置 CommandExecutorContainer.RegisterExecutor(Type executorType) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimCommandExecutorContainer.RegisterExecutorsAssembly">
            <summary>设置 CommandExecutorContainer.RegisterExecutors(Assembly assemblyToScan) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimCommandExecutorContainer.RegisterExecutorsIEnumerableOfAssembly">
            <summary>设置 CommandExecutorContainer.RegisterExecutors(IEnumerable`1&lt;Assembly&gt; assembliesToScan) 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.Fakes.ShimCommandExecutorContainer.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimCommandExecutorContainer.AllInstances.FindExecutorTypeOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{FC.Framework.CommandExecutorContainer,System.Type})">
            <summary>设置 CommandExecutorContainer.FindExecutorType() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimCommandExecutorContainer.AllInstances.RegisterExecutorType">
            <summary>设置 CommandExecutorContainer.RegisterExecutor(Type executorType) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimCommandExecutorContainer.AllInstances.RegisterExecutorsAssembly">
            <summary>设置 CommandExecutorContainer.RegisterExecutors(Assembly assemblyToScan) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimCommandExecutorContainer.AllInstances.RegisterExecutorsIEnumerableOfAssembly">
            <summary>设置 CommandExecutorContainer.RegisterExecutors(IEnumerable`1&lt;Assembly&gt; assembliesToScan) 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.Fakes.ShimComponentAttribute">
            <summary>FC.Framework.ComponentAttribute 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimComponentAttribute.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimComponentAttribute.#ctor(FC.Framework.ComponentAttribute)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimComponentAttribute.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimComponentAttribute.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimComponentAttribute.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimComponentAttribute.Constructor">
            <summary>设置 ComponentAttribute.ComponentAttribute() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimComponentAttribute.StrategyGet">
            <summary>设置 ComponentAttribute.get_Strategy() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimComponentAttribute.StrategySetEventDispatchStrategy">
            <summary>设置 ComponentAttribute.set_Strategy(EventDispatchStrategy value) 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.Fakes.ShimComponentAttribute.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimComponentAttribute.AllInstances.StrategyGet">
            <summary>设置 ComponentAttribute.get_Strategy() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimComponentAttribute.AllInstances.StrategySetEventDispatchStrategy">
            <summary>设置 ComponentAttribute.set_Strategy(EventDispatchStrategy value) 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.Fakes.ShimConfigurationManagerWrapper">
            <summary>FC.Framework.ConfigurationManagerWrapper 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimConfigurationManagerWrapper.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimConfigurationManagerWrapper.#ctor(FC.Framework.ConfigurationManagerWrapper)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimConfigurationManagerWrapper.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimConfigurationManagerWrapper.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimConfigurationManagerWrapper.GetSectionOf1String``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,``0})">
            <summary>设置 ConfigurationManagerWrapper.GetSection(String sectionName) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimConfigurationManagerWrapper.AppSettingsGet">
            <summary>设置 ConfigurationManagerWrapper.get_AppSettings() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimConfigurationManagerWrapper.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimConfigurationManagerWrapper.Constructor">
            <summary>设置 ConfigurationManagerWrapper.ConfigurationManagerWrapper() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimConfigurationManagerWrapper.GetDBConnectionStringString">
            <summary>设置 ConfigurationManagerWrapper.GetDBConnectionString(String name) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimConfigurationManagerWrapper.GetMessageQueueServerConnectionStringString">
            <summary>设置 ConfigurationManagerWrapper.GetMessageQueueServerConnectionString(String name) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimConfigurationManagerWrapper.GetProviderNameString">
            <summary>设置 ConfigurationManagerWrapper.GetProviderName(String name) 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.Fakes.ShimConfigurationManagerWrapper.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.Fakes.ShimDateTimeExtension">
            <summary>FC.Framework.DateTimeExtension 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimDateTimeExtension.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimDateTimeExtension.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimDateTimeExtension.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimDateTimeExtension.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimDateTimeExtension.IsValidDateTime">
            <summary>设置 DateTimeExtension.IsValid(DateTime target) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimDateTimeExtension.StaticConstructor">
            <summary>设置 DateTimeExtension.DateTimeExtension() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimDateTimeExtension.ToLocalDateTimeInt32">
            <summary>设置 DateTimeExtension.ToLocalDateTime(Int32 target) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimDateTimeExtension.ToUnixTimestampDateTime">
            <summary>设置 DateTimeExtension.ToUnixTimestamp(DateTime target) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimDateTimeExtension.ToUtcDateTimeInt32">
            <summary>设置 DateTimeExtension.ToUtcDateTime(Int32 target) 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.Fakes.ShimDeciamlExtension">
            <summary>FC.Framework.DeciamlExtension 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimDeciamlExtension.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimDeciamlExtension.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimDeciamlExtension.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimDeciamlExtension.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimDeciamlExtension.ToFixedDecimalInt32">
            <summary>设置 DeciamlExtension.ToFixed(Decimal sourceNum, Int32 fixedNum) 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.Fakes.ShimDefaultCommandBus">
            <summary>FC.Framework.DefaultCommandBus 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimDefaultCommandBus.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimDefaultCommandBus.#ctor(FC.Framework.DefaultCommandBus)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimDefaultCommandBus.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimDefaultCommandBus.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimDefaultCommandBus.Bind(FC.Framework.ICommandBus)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimDefaultCommandBus.SendOf1M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{``0})">
            <summary>设置 DefaultCommandBus.Send(!!0 cmd) 的 填充码</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimDefaultCommandBus._Sendb__0Of1Task``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.Threading.Tasks.Task})">
            <summary>设置 DefaultCommandBus.&lt;Send&gt;b__0(Task t) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimDefaultCommandBus.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimDefaultCommandBus.ConstructorICommandExecutorContainer">
            <summary>设置 DefaultCommandBus.DefaultCommandBus(ICommandExecutorContainer executorContainer) 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.Fakes.ShimDefaultCommandBus.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimDefaultCommandBus.AllInstances.SendOf1M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{FC.Framework.DefaultCommandBus,``0})">
            <summary>设置 DefaultCommandBus.Send(!!0 cmd) 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.Fakes.ShimDefaultDomainContext">
            <summary>FC.Framework.DefaultDomainContext 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimDefaultDomainContext.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimDefaultDomainContext.#ctor(FC.Framework.DefaultDomainContext)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimDefaultDomainContext.AddOf1M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{``0})">
            <summary>设置 DefaultDomainContext.Add(!!0 domain) 的 填充码</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimDefaultDomainContext.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimDefaultDomainContext.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimDefaultDomainContext.Bind(FC.Framework.IDomainContext)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimDefaultDomainContext.GetOf1Int32``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Int32,``0})">
            <summary>设置 DefaultDomainContext.Get(Int32 id) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimDefaultDomainContext.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimDefaultDomainContext.Constructor">
            <summary>设置 DefaultDomainContext.DefaultDomainContext() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.Fakes.ShimDefaultDomainContext.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimDefaultDomainContext.AllInstances.AddOf1M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{FC.Framework.DefaultDomainContext,``0})">
            <summary>设置 DefaultDomainContext.Add(!!0 domain) 的 填充码</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimDefaultDomainContext.AllInstances.GetOf1Int32``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{FC.Framework.DefaultDomainContext,System.Int32,``0})">
            <summary>设置 DefaultDomainContext.Get(Int32 id) 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.Fakes.ShimDefaultEventBus">
            <summary>FC.Framework.DefaultEventBus 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimDefaultEventBus.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimDefaultEventBus.#ctor(FC.Framework.DefaultEventBus)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimDefaultEventBus.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimDefaultEventBus.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimDefaultEventBus.Bind(FC.Framework.IEventBus)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimDefaultEventBus.HandlerInvokeOf1MethodInfoM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.Reflection.MethodInfo,``0})">
            <summary>设置 DefaultEventBus.HandlerInvoke(MethodInfo handleMethod, !!0 arg) 的 填充码</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimDefaultEventBus.PublishOf1M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{``0})">
            <summary>设置 DefaultEventBus.Publish(!!0 event) 的 填充码</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimDefaultEventBus.PublishOf1M0EventDispatchStrategy``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{``0,FC.Framework.EventDispatchStrategy})">
            <summary>设置 DefaultEventBus.Publish(!!0 event, EventDispatchStrategy dispatchStrategy) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimDefaultEventBus.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimDefaultEventBus.Constructor">
            <summary>设置 DefaultEventBus.DefaultEventBus() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimDefaultEventBus.ConstructorIEventHandlerContainer">
            <summary>设置 DefaultEventBus.DefaultEventBus(IEventHandlerContainer eventHandlerContariner) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimDefaultEventBus.ConstructorIEventHandlerContainerIEventHandlerActivatorIEventHandlerInvoker">
            <summary>设置 DefaultEventBus.DefaultEventBus(IEventHandlerContainer eventHandlerContariner, IEventHandlerActivator eventHandlerActivor, IEventHandlerInvoker handlerInvoker) 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.Fakes.ShimDefaultEventBus.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimDefaultEventBus.AllInstances.HandlerInvokeOf1MethodInfoM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{FC.Framework.DefaultEventBus,System.Reflection.MethodInfo,``0})">
            <summary>设置 DefaultEventBus.HandlerInvoke(MethodInfo handleMethod, !!0 arg) 的 填充码</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimDefaultEventBus.AllInstances.PublishOf1M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{FC.Framework.DefaultEventBus,``0})">
            <summary>设置 DefaultEventBus.Publish(!!0 event) 的 填充码</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimDefaultEventBus.AllInstances.PublishOf1M0EventDispatchStrategy``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{FC.Framework.DefaultEventBus,``0,FC.Framework.EventDispatchStrategy})">
            <summary>设置 DefaultEventBus.Publish(!!0 event, EventDispatchStrategy dispatchStrategy) 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.Fakes.ShimDependencyResolverFactory">
            <summary>FC.Framework.DependencyResolverFactory 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimDependencyResolverFactory.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimDependencyResolverFactory.#ctor(FC.Framework.DependencyResolverFactory)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimDependencyResolverFactory.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimDependencyResolverFactory.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimDependencyResolverFactory.Bind(FC.Framework.IDependencyResolverFactory)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimDependencyResolverFactory.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimDependencyResolverFactory.ConstructorString">
            <summary>设置 DependencyResolverFactory.DependencyResolverFactory(String resolverType) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimDependencyResolverFactory.ConstructorType">
            <summary>设置 DependencyResolverFactory.DependencyResolverFactory(Type resolverType) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimDependencyResolverFactory.CreateInstance">
            <summary>设置 DependencyResolverFactory.CreateInstance() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.Fakes.ShimDependencyResolverFactory.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimDependencyResolverFactory.AllInstances.CreateInstance">
            <summary>设置 DependencyResolverFactory.CreateInstance() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.Fakes.ShimDisposableResource">
            <summary>FC.Framework.DisposableResource 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimDisposableResource.#ctor(FC.Framework.DisposableResource)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimDisposableResource.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimDisposableResource.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimDisposableResource.Bind(System.IDisposable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimDisposableResource.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimDisposableResource.Constructor">
            <summary>设置 DisposableResource.DisposableResource() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimDisposableResource.Dispose">
            <summary>设置 DisposableResource.Dispose() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimDisposableResource.DisposeBoolean">
            <summary>设置 DisposableResource.Dispose(Boolean disposing) 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.Fakes.ShimDisposableResource.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimDisposableResource.AllInstances.Dispose">
            <summary>设置 DisposableResource.Dispose() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimDisposableResource.AllInstances.DisposeBoolean">
            <summary>设置 DisposableResource.Dispose(Boolean disposing) 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.Fakes.ShimDomainEvent">
            <summary>FC.Framework.DomainEvent 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimDomainEvent.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimDomainEvent.#ctor(FC.Framework.DomainEvent)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimDomainEvent.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimDomainEvent.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimDomainEvent.Bind(FC.Framework.IDomainEvent)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimDomainEvent.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimDomainEvent.Constructor">
            <summary>设置 DomainEvent.DomainEvent() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimDomainEvent.UTCTimestampGet">
            <summary>设置 DomainEvent.get_UTCTimestamp() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.Fakes.ShimDomainEvent.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimDomainEvent.AllInstances.UTCTimestampGet">
            <summary>设置 DomainEvent.get_UTCTimestamp() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.Fakes.ShimDoubleExtension">
            <summary>FC.Framework.DoubleExtension 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimDoubleExtension.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimDoubleExtension.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimDoubleExtension.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimDoubleExtension.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimDoubleExtension.ToFixedDoubleInt32">
            <summary>设置 DoubleExtension.ToFixed(Double sourceNum, Int32 fixedNum) 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.Fakes.ShimEnumDescriptionAttribute">
            <summary>FC.Framework.EnumDescriptionAttribute 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimEnumDescriptionAttribute.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimEnumDescriptionAttribute.#ctor(FC.Framework.EnumDescriptionAttribute)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimEnumDescriptionAttribute.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimEnumDescriptionAttribute.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimEnumDescriptionAttribute.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimEnumDescriptionAttribute.ConstructorString">
            <summary>设置 EnumDescriptionAttribute.EnumDescriptionAttribute(String strEnumDescription) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimEnumDescriptionAttribute.DescriptionGet">
            <summary>设置 EnumDescriptionAttribute.get_Description() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimEnumDescriptionAttribute.GetEnumDescriptionEnum">
            <summary>设置 EnumDescriptionAttribute.GetEnumDescription(Enum enumObj) 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.Fakes.ShimEnumDescriptionAttribute.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimEnumDescriptionAttribute.AllInstances.DescriptionGet">
            <summary>设置 EnumDescriptionAttribute.get_Description() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.Fakes.ShimEnumExtension">
            <summary>FC.Framework.EnumExtension 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimEnumExtension.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimEnumExtension.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimEnumExtension.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimEnumExtension.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimEnumExtension.GetDescriptionEnum">
            <summary>设置 EnumExtension.GetDescription(Enum sourceEnum) 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.Fakes.ShimEnumerableExtension">
            <summary>FC.Framework.EnumerableExtension 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimEnumerableExtension.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimEnumerableExtension.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimEnumerableExtension.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimEnumerableExtension.ForEachOf1IEnumerableOfM0ActionOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.Collections.Generic.IEnumerable{``0},System.Action{``0}})">
            <summary>设置 EnumerableExtension.ForEach(IEnumerable`1&lt;!!0&gt; enumerable, Action`1&lt;!!0&gt; action) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimEnumerableExtension.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="T:FC.Framework.Fakes.ShimEventBus">
            <summary>FC.Framework.EventBus 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimEventBus.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimEventBus.#ctor(FC.Framework.EventBus)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimEventBus.ApplyOf1M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{``0})">
            <summary>设置 EventBus.Apply(!!0 event) 的 填充码</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimEventBus.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimEventBus.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimEventBus.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimEventBus.ClearUncommitedActions">
            <summary>设置 EventBus.ClearUncommitedActions() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimEventBus.Constructor">
            <summary>设置 EventBus.EventBus() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimEventBus.GetUncommitedActions">
            <summary>设置 EventBus.GetUncommitedActions() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimEventBus.StaticConstructor">
            <summary>设置 EventBus.EventBus() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimEventBus._cctorb__6">
            <summary>设置 EventBus.&lt;.cctor&gt;b__6() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.Fakes.ShimEventBus.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.Fakes.ShimEventHandlerActivator">
            <summary>FC.Framework.EventHandlerActivator 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimEventHandlerActivator.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimEventHandlerActivator.#ctor(FC.Framework.EventHandlerActivator)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimEventHandlerActivator.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimEventHandlerActivator.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimEventHandlerActivator.Bind(FC.Framework.IEventHandlerActivator)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimEventHandlerActivator.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimEventHandlerActivator.Constructor">
            <summary>设置 EventHandlerActivator.EventHandlerActivator() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimEventHandlerActivator.CreateInstanceType">
            <summary>设置 EventHandlerActivator.CreateInstance(Type type) 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.Fakes.ShimEventHandlerActivator.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimEventHandlerActivator.AllInstances.CreateInstanceType">
            <summary>设置 EventHandlerActivator.CreateInstance(Type type) 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.Fakes.ShimEventHandlerContainer">
            <summary>FC.Framework.EventHandlerContainer 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimEventHandlerContainer.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimEventHandlerContainer.#ctor(FC.Framework.EventHandlerContainer)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimEventHandlerContainer.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimEventHandlerContainer.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimEventHandlerContainer.Bind(FC.Framework.IEventHandlerContainer)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimEventHandlerContainer.FindHandlerMethodsOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo}})">
            <summary>设置 EventHandlerContainer.FindHandlerMethods() 的 填充码</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimEventHandlerContainer.FindHandlerMethodsOf1EventDispatchStrategy``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{FC.Framework.EventDispatchStrategy,System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo}})">
            <summary>设置 EventHandlerContainer.FindHandlerMethods(EventDispatchStrategy dispatchStrategy) 的 填充码</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimEventHandlerContainer._FindHandlerMethodsb__0Of1MethodInfo``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Reflection.MethodInfo,System.Boolean})">
            <summary>设置 EventHandlerContainer.&lt;FindHandlerMethods&gt;b__0(MethodInfo h) 的 填充码</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimEventHandlerContainer._FindHandlerMethodsb__1Of1MethodInfo``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Reflection.MethodInfo,System.Boolean})">
            <summary>设置 EventHandlerContainer.&lt;FindHandlerMethods&gt;b__1(MethodInfo h) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimEventHandlerContainer.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimEventHandlerContainer.Constructor">
            <summary>设置 EventHandlerContainer.EventHandlerContainer() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimEventHandlerContainer.RegisterHandlerType">
            <summary>设置 EventHandlerContainer.RegisterHandler(Type handlerType) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimEventHandlerContainer.RegisterHandlersAssembly">
            <summary>设置 EventHandlerContainer.RegisterHandlers(Assembly assemblyToScan) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimEventHandlerContainer.RegisterHandlersIEnumerableOfAssembly">
            <summary>设置 EventHandlerContainer.RegisterHandlers(IEnumerable`1&lt;Assembly&gt; assembliesToScan) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimEventHandlerContainer._RegisterHandlerb__5Type">
            <summary>设置 EventHandlerContainer.&lt;RegisterHandler&gt;b__5(Type i) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimEventHandlerContainer._RegisterHandlerb__6MethodInfo">
            <summary>设置 EventHandlerContainer.&lt;RegisterHandler&gt;b__6(MethodInfo m) 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.Fakes.ShimEventHandlerContainer.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimEventHandlerContainer.AllInstances.FindHandlerMethodsOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{FC.Framework.EventHandlerContainer,System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo}})">
            <summary>设置 EventHandlerContainer.FindHandlerMethods() 的 填充码</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimEventHandlerContainer.AllInstances.FindHandlerMethodsOf1EventDispatchStrategy``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{FC.Framework.EventHandlerContainer,FC.Framework.EventDispatchStrategy,System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo}})">
            <summary>设置 EventHandlerContainer.FindHandlerMethods(EventDispatchStrategy dispatchStrategy) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimEventHandlerContainer.AllInstances.RegisterHandlerType">
            <summary>设置 EventHandlerContainer.RegisterHandler(Type handlerType) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimEventHandlerContainer.AllInstances.RegisterHandlersAssembly">
            <summary>设置 EventHandlerContainer.RegisterHandlers(Assembly assemblyToScan) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimEventHandlerContainer.AllInstances.RegisterHandlersIEnumerableOfAssembly">
            <summary>设置 EventHandlerContainer.RegisterHandlers(IEnumerable`1&lt;Assembly&gt; assembliesToScan) 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.Fakes.ShimEventHandlerExecption">
            <summary>FC.Framework.EventHandlerExecption 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimEventHandlerExecption.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimEventHandlerExecption.#ctor(FC.Framework.EventHandlerExecption)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimEventHandlerExecption.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimEventHandlerExecption.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimEventHandlerExecption.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimEventHandlerExecption.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimEventHandlerExecption.ConstructorString">
            <summary>设置 EventHandlerExecption.EventHandlerExecption(String message) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimEventHandlerExecption.ConstructorStringException">
            <summary>设置 EventHandlerExecption.EventHandlerExecption(String message, Exception innerException) 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.Fakes.ShimEventHandlerExecption.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.Fakes.ShimEventHandlerExtension">
            <summary>FC.Framework.EventHandlerExtension 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimEventHandlerExtension.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimEventHandlerExtension.ApplyOf1IEventHandlerM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{FC.Framework.IEventHandler,``0})">
            <summary>设置 EventHandlerExtension.Apply(IEventHandler eventHandler, !!0 event) 的 填充码</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimEventHandlerExtension.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimEventHandlerExtension.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimEventHandlerExtension.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimEventHandlerExtension.RemoveCacheIEventHandlerString">
            <summary>设置 EventHandlerExtension.RemoveCache(IEventHandler eventHandler, String cacheKey) 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.Fakes.ShimExecuteAsyncAttribute">
            <summary>FC.Framework.ExecuteAsyncAttribute 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimExecuteAsyncAttribute.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimExecuteAsyncAttribute.#ctor(FC.Framework.ExecuteAsyncAttribute)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimExecuteAsyncAttribute.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimExecuteAsyncAttribute.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimExecuteAsyncAttribute.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimExecuteAsyncAttribute.Constructor">
            <summary>设置 ExecuteAsyncAttribute.ExecuteAsyncAttribute() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.Fakes.ShimExecuteAsyncAttribute.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.Fakes.ShimExecuteDistributedAttribute">
            <summary>FC.Framework.ExecuteDistributedAttribute 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimExecuteDistributedAttribute.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimExecuteDistributedAttribute.#ctor(FC.Framework.ExecuteDistributedAttribute)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimExecuteDistributedAttribute.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimExecuteDistributedAttribute.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimExecuteDistributedAttribute.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimExecuteDistributedAttribute.Constructor">
            <summary>设置 ExecuteDistributedAttribute.ExecuteDistributedAttribute() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.Fakes.ShimExecuteDistributedAttribute.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.Fakes.ShimExecuteSyncAttribute">
            <summary>FC.Framework.ExecuteSyncAttribute 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimExecuteSyncAttribute.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimExecuteSyncAttribute.#ctor(FC.Framework.ExecuteSyncAttribute)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimExecuteSyncAttribute.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimExecuteSyncAttribute.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimExecuteSyncAttribute.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimExecuteSyncAttribute.Constructor">
            <summary>设置 ExecuteSyncAttribute.ExecuteSyncAttribute() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.Fakes.ShimExecuteSyncAttribute.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.Fakes.ShimFCFramework">
            <summary>FC.Framework.FCFramework 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimFCFramework.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimFCFramework.#ctor(FC.Framework.FCFramework)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimFCFramework.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimFCFramework.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimFCFramework.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimFCFramework.Constructor">
            <summary>设置 FCFramework.FCFramework() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimFCFramework.DefaultCommandBusGet">
            <summary>设置 FCFramework.get_DefaultCommandBus() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimFCFramework.DefaultEventBusGet">
            <summary>设置 FCFramework.get_DefaultEventBus() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimFCFramework.Initialize">
            <summary>设置 FCFramework.Initialize() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimFCFramework.InstanceGet">
            <summary>设置 FCFramework.get_Instance() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimFCFramework.InstanceSetFCFramework">
            <summary>设置 FCFramework.set_Instance(FCFramework value) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimFCFramework.Start">
            <summary>设置 FCFramework.Start() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.Fakes.ShimFCFramework.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimFCFramework.AllInstances.Start">
            <summary>设置 FCFramework.Start() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.Fakes.ShimFCFrameworkCommandBusExtension">
            <summary>FC.Framework.FCFrameworkCommandBusExtension 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimFCFrameworkCommandBusExtension.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimFCFrameworkCommandBusExtension.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimFCFrameworkCommandBusExtension.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimFCFrameworkCommandBusExtension.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimFCFrameworkCommandBusExtension.UseDefaultCommandBusFCFrameworkAssemblyArray">
            <summary>设置 FCFrameworkCommandBusExtension.UseDefaultCommandBus(FCFramework framework, Assembly[] assemblies) 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.Fakes.ShimFCFrameworkEventBusExtension">
            <summary>FC.Framework.FCFrameworkEventBusExtension 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimFCFrameworkEventBusExtension.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimFCFrameworkEventBusExtension.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimFCFrameworkEventBusExtension.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimFCFrameworkEventBusExtension.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimFCFrameworkEventBusExtension.UseDefaultEventBusFCFrameworkAssemblyArray">
            <summary>设置 FCFrameworkEventBusExtension.UseDefaultEventBus(FCFramework framework, Assembly[] assemblies) 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.Fakes.ShimFCFrameworkException">
            <summary>FC.Framework.FCFrameworkException 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimFCFrameworkException.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimFCFrameworkException.#ctor(FC.Framework.FCFrameworkException)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimFCFrameworkException.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimFCFrameworkException.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimFCFrameworkException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimFCFrameworkException.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimFCFrameworkException.ConstructorString">
            <summary>设置 FCFrameworkException.FCFrameworkException(String message) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimFCFrameworkException.ConstructorStringException">
            <summary>设置 FCFrameworkException.FCFrameworkException(String message, Exception innerException) 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.Fakes.ShimFCFrameworkException.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.Fakes.ShimFastEventHandlerInvoker">
            <summary>FC.Framework.FastEventHandlerInvoker 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimFastEventHandlerInvoker.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimFastEventHandlerInvoker.#ctor(FC.Framework.FastEventHandlerInvoker)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimFastEventHandlerInvoker.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimFastEventHandlerInvoker.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimFastEventHandlerInvoker.Bind(FC.Framework.IEventHandlerInvoker)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimFastEventHandlerInvoker.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimFastEventHandlerInvoker.Constructor">
            <summary>设置 FastEventHandlerInvoker.FastEventHandlerInvoker() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimFastEventHandlerInvoker.InvokeObjectMethodInfoObject">
            <summary>设置 FastEventHandlerInvoker.Invoke(Object handler, MethodInfo handleMethod, Object arg) 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.Fakes.ShimFastEventHandlerInvoker.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimFastEventHandlerInvoker.AllInstances.InvokeObjectMethodInfoObject">
            <summary>设置 FastEventHandlerInvoker.Invoke(Object handler, MethodInfo handleMethod, Object arg) 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.Fakes.ShimGuidExtension">
            <summary>FC.Framework.GuidExtension 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimGuidExtension.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimGuidExtension.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimGuidExtension.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimGuidExtension.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimGuidExtension.IsNullOrEmptyGuid">
            <summary>设置 GuidExtension.IsNullOrEmpty(Guid target) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimGuidExtension.ShrinkGuid">
            <summary>设置 GuidExtension.Shrink(Guid target) 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.Fakes.ShimIoC">
            <summary>FC.Framework.IoC 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimIoC.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimIoC.#ctor(FC.Framework.IoC)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimIoC.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimIoC.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimIoC.RegisterOf1LifeStyle``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{FC.Framework.LifeStyle})">
            <summary>设置 IoC.Register(LifeStyle lifeStyle) 的 填充码</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimIoC.RegisterOf1M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{``0})">
            <summary>设置 IoC.Register(!!0 instance) 的 填充码</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimIoC.RegisterOf1M0String``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{``0,System.String})">
            <summary>设置 IoC.Register(!!0 instance, String name) 的 填充码</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimIoC.RegisterOf2LifeStyle``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{FC.Framework.LifeStyle})">
            <summary>设置 IoC.Register(LifeStyle lifeStyle) 的 填充码</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimIoC.RegisterOf2StringLifeStyle``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.String,FC.Framework.LifeStyle})">
            <summary>设置 IoC.Register(String name, LifeStyle lifeStyle) 的 填充码</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimIoC.ResolveAllOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.Generic.IEnumerable{``0}})">
            <summary>设置 IoC.ResolveAll() 的 填充码</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimIoC.ResolveOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``0})">
            <summary>设置 IoC.Resolve() 的 填充码</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimIoC.ResolveOf1DictionaryOfStringObject``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.Generic.Dictionary{System.String,System.Object},``0})">
            <summary>设置 IoC.Resolve(Dictionary`2&lt;String,Object&gt; parameters) 的 填充码</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimIoC.ResolveOf1KeyValuePairOfStringObjectArray``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.Generic.KeyValuePair{System.String,System.Object}[],``0})">
            <summary>设置 IoC.Resolve(KeyValuePair`2&lt;String,Object&gt;[] parameters) 的 填充码</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimIoC.ResolveOf1String``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,``0})">
            <summary>设置 IoC.Resolve(String name) 的 填充码</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimIoC.ResolveOf1StringDictionaryOfStringObject``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,System.Collections.Generic.Dictionary{System.String,System.Object},``0})">
            <summary>设置 IoC.Resolve(String name, Dictionary`2&lt;String,Object&gt; parameters) 的 填充码</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimIoC.ResolveOf1StringKeyValuePairOfStringObjectArray``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,System.Collections.Generic.KeyValuePair{System.String,System.Object}[],``0})">
            <summary>设置 IoC.Resolve(String name, KeyValuePair`2&lt;String,Object&gt;[] parameters) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimIoC.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimIoC.Clear">
            <summary>设置 IoC.Clear() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimIoC.Constructor">
            <summary>设置 IoC.IoC() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimIoC.InitializeWithIDependencyResolverFactory">
            <summary>设置 IoC.InitializeWith(IDependencyResolverFactory resolverFactory) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimIoC.InnerResolverGet">
            <summary>设置 IoC.get_InnerResolver() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimIoC.RegisterTypeLifeStyle">
            <summary>设置 IoC.Register(Type typeImpl, LifeStyle lifeStyle) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimIoC.RegisterTypeTypeLifeStyle">
            <summary>设置 IoC.Register(Type typeInterface, Type typeImpl, LifeStyle lifeStyle) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimIoC.RegisterTypeTypeStringLifeStyle">
            <summary>设置 IoC.Register(Type typeInterface, Type typeImpl, String name, LifeStyle lifeStyle) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimIoC.ResolveAllType">
            <summary>设置 IoC.ResolveAll(Type type) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimIoC.ResolveType">
            <summary>设置 IoC.Resolve(Type type) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimIoC.ResolveTypeDictionaryOfStringObject">
            <summary>设置 IoC.Resolve(Type type, Dictionary`2&lt;String,Object&gt; parameters) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimIoC.ResolveTypeKeyValuePairOfStringObjectArray">
            <summary>设置 IoC.Resolve(Type type, KeyValuePair`2&lt;String,Object&gt;[] parameters) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimIoC.ResolveTypeString">
            <summary>设置 IoC.Resolve(Type type, String name) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimIoC.ResolveTypeStringDictionaryOfStringObject">
            <summary>设置 IoC.Resolve(Type type, String name, Dictionary`2&lt;String,Object&gt; parameters) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimIoC.ResolveTypeStringKeyValuePairOfStringObjectArray">
            <summary>设置 IoC.Resolve(Type type, String name, KeyValuePair`2&lt;String,Object&gt;[] parameters) 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.Fakes.ShimIoC.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.Fakes.ShimIoCException">
            <summary>FC.Framework.IoCException 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimIoCException.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimIoCException.#ctor(FC.Framework.IoCException)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimIoCException.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimIoCException.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimIoCException.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimIoCException.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimIoCException.ConstructorException">
            <summary>设置 IoCException.IoCException(Exception innerException) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimIoCException.ConstructorString">
            <summary>设置 IoCException.IoCException(String message) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimIoCException.ConstructorStringException">
            <summary>设置 IoCException.IoCException(String message, Exception innerException) 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.Fakes.ShimIoCException.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.Fakes.ShimLog">
            <summary>FC.Framework.Log 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimLog.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimLog.#ctor(FC.Framework.Log)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimLog.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimLog.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimLog.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimLog.Constructor">
            <summary>设置 Log.Log() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimLog.DebugString">
            <summary>设置 Log.Debug(String message) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimLog.DebugStringObjectArray">
            <summary>设置 Log.Debug(String format, Object[] args) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimLog.ErrorStringException">
            <summary>设置 Log.Error(String message, Exception exception) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimLog.ErrorStringObjectArray">
            <summary>设置 Log.Error(String format, Object[] args) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimLog.FatalStringException">
            <summary>设置 Log.Fatal(String message, Exception exception) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimLog.FatalStringObjectArray">
            <summary>设置 Log.Fatal(String format, Object[] args) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimLog.FormatStringObjectArray">
            <summary>设置 Log.Format(String format, Object[] args) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimLog.InfoString">
            <summary>设置 Log.Info(String message) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimLog.InfoStringObjectArray">
            <summary>设置 Log.Info(String format, Object[] args) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimLog.InnerLoggerGet">
            <summary>设置 Log.get_InnerLogger() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimLog.WarnStringException">
            <summary>设置 Log.Warn(String message, Exception exception) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimLog.WarnStringObjectArray">
            <summary>设置 Log.Warn(String format, Object[] args) 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.Fakes.ShimLog.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.Fakes.ShimOnEventRaisedAttribute">
            <summary>FC.Framework.OnEventRaisedAttribute 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimOnEventRaisedAttribute.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimOnEventRaisedAttribute.#ctor(FC.Framework.OnEventRaisedAttribute)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimOnEventRaisedAttribute.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimOnEventRaisedAttribute.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimOnEventRaisedAttribute.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimOnEventRaisedAttribute.Constructor">
            <summary>设置 OnEventRaisedAttribute.OnEventRaisedAttribute() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimOnEventRaisedAttribute.StrategyGet">
            <summary>设置 OnEventRaisedAttribute.get_Strategy() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimOnEventRaisedAttribute.StrategySetEventDispatchStrategy">
            <summary>设置 OnEventRaisedAttribute.set_Strategy(EventDispatchStrategy value) 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.Fakes.ShimOnEventRaisedAttribute.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimOnEventRaisedAttribute.AllInstances.StrategyGet">
            <summary>设置 OnEventRaisedAttribute.get_Strategy() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimOnEventRaisedAttribute.AllInstances.StrategySetEventDispatchStrategy">
            <summary>设置 OnEventRaisedAttribute.set_Strategy(EventDispatchStrategy value) 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.Fakes.ShimPredicateExtensionses">
            <summary>FC.Framework.PredicateExtensionses 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimPredicateExtensionses.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimPredicateExtensionses.AndOf1ExpressionOfFuncOfM0BooleanExpressionOfFuncOfM0Boolean``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}})">
            <summary>设置 PredicateExtensionses.And(Expression`1&lt;Func`2&lt;!!0,Boolean&gt;&gt; exp_left, Expression`1&lt;Func`2&lt;!!0,Boolean&gt;&gt; exp_right) 的 填充码</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimPredicateExtensionses.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimPredicateExtensionses.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimPredicateExtensionses.OrOf1ExpressionOfFuncOfM0BooleanExpressionOfFuncOfM0Boolean``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}})">
            <summary>设置 PredicateExtensionses.Or(Expression`1&lt;Func`2&lt;!!0,Boolean&gt;&gt; exp_left, Expression`1&lt;Func`2&lt;!!0,Boolean&gt;&gt; exp_right) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimPredicateExtensionses.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="T:FC.Framework.Fakes.ShimQueryableExtension">
            <summary>FC.Framework.QueryableExtension 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimQueryableExtension.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimQueryableExtension.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimQueryableExtension.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimQueryableExtension.OrderByOf1IQueryableOfM0StringString``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Linq.IQueryable{``0},System.String,System.String,System.Linq.IQueryable{``0}})">
            <summary>设置 QueryableExtension.OrderBy(IQueryable`1&lt;!!0&gt; source, String propertyName, String order) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimQueryableExtension.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="T:FC.Framework.Fakes.ShimStringExtension">
            <summary>FC.Framework.StringExtension 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimStringExtension.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimStringExtension.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimStringExtension.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimStringExtension.ToEnumOf1String``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,``0})">
            <summary>设置 StringExtension.ToEnum(String target) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimStringExtension.AttributeEncodeString">
            <summary>设置 StringExtension.AttributeEncode(String target) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimStringExtension.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimStringExtension.FormatWithStringObjectArray">
            <summary>设置 StringExtension.FormatWith(String target, Object[] args) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimStringExtension.HashString">
            <summary>设置 StringExtension.Hash(String target) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimStringExtension.HtmlDecodeString">
            <summary>设置 StringExtension.HtmlDecode(String target) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimStringExtension.HtmlEncodeString">
            <summary>设置 StringExtension.HtmlEncode(String target) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimStringExtension.IsEmailString">
            <summary>设置 StringExtension.IsEmail(String target) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimStringExtension.IsWebUrlString">
            <summary>设置 StringExtension.IsWebUrl(String target) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimStringExtension.NullSafeString">
            <summary>设置 StringExtension.NullSafe(String target) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimStringExtension.ReplaceStringICollectionOfStringString">
            <summary>设置 StringExtension.Replace(String target, ICollection`1&lt;String&gt; oldValues, String newValue) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimStringExtension.StaticConstructor">
            <summary>设置 StringExtension.StringExtension() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimStringExtension.StripHtmlString">
            <summary>设置 StringExtension.StripHtml(String target) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimStringExtension.ToGuidString">
            <summary>设置 StringExtension.ToGuid(String target) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimStringExtension.ToLegalUrlString">
            <summary>设置 StringExtension.ToLegalUrl(String target) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimStringExtension.UrlDecodeString">
            <summary>设置 StringExtension.UrlDecode(String target) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimStringExtension.UrlEncodeString">
            <summary>设置 StringExtension.UrlEncode(String target) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimStringExtension.WrapAtStringInt32">
            <summary>设置 StringExtension.WrapAt(String target, Int32 index) 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.Fakes.ShimUnitOfWork">
            <summary>FC.Framework.UnitOfWork 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimUnitOfWork.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimUnitOfWork.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimUnitOfWork.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimUnitOfWork.Begin">
            <summary>设置 UnitOfWork.Begin() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimUnitOfWork.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="T:FC.Framework.Fakes.ShimUnknowExecption">
            <summary>FC.Framework.UnknowExecption 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimUnknowExecption.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimUnknowExecption.#ctor(FC.Framework.UnknowExecption)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimUnknowExecption.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimUnknowExecption.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:FC.Framework.Fakes.ShimUnknowExecption.Bind(System.Runtime.Serialization.ISerializable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimUnknowExecption.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimUnknowExecption.ConstructorString">
            <summary>设置 UnknowExecption.UnknowExecption(String message) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Fakes.ShimUnknowExecption.ConstructorStringException">
            <summary>设置 UnknowExecption.UnknowExecption(String message, Exception innerException) 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.Fakes.ShimUnknowExecption.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.Fakes.StubAbstractCommandExecutor`1">
            <summary>FC.Framework.AbstractCommandExecutor`1 的存根类型</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubAbstractCommandExecutor`1.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubAbstractCommandExecutor`1.Execute(`0)">
            <summary>设置 AbstractCommandExecutor`1.Execute(!0 cmd) 的 存根</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubAbstractCommandExecutor`1.ExecuteT0">
            <summary>设置 AbstractCommandExecutor`1.Execute(!0 cmd) 的 stub</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubAbstractCommandExecutor`1.InitializeStub">
            <summary>初始化 type StubAbstractCommandExecutor 的新实例</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubAbstractCommandExecutor`1.OnExecuted(`0)">
            <summary>设置 AbstractCommandExecutor`1.OnExecuted(!0 cmd) 的 存根</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubAbstractCommandExecutor`1.OnExecutedT0">
            <summary>设置 AbstractCommandExecutor`1.OnExecuted(!0 cmd) 的 stub</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubAbstractCommandExecutor`1.OnExecuting(`0)">
            <summary>设置 AbstractCommandExecutor`1.OnExecuting(!0 cmd) 的 存根</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubAbstractCommandExecutor`1.OnExecutingT0">
            <summary>设置 AbstractCommandExecutor`1.OnExecuting(!0 cmd) 的 stub</summary>
        </member>
        <member name="P:FC.Framework.Fakes.StubAbstractCommandExecutor`1.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:FC.Framework.Fakes.StubAbstractCommandExecutor`1.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:FC.Framework.Fakes.StubAbstractCommandExecutor`1.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:FC.Framework.Fakes.StubAbstractUnitOfWork">
            <summary>FC.Framework.AbstractUnitOfWork 的存根类型</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubAbstractUnitOfWork.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubAbstractUnitOfWork.Commit">
            <summary>设置 AbstractUnitOfWork.Commit() 的 存根</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubAbstractUnitOfWork.Commit01">
            <summary>设置 AbstractUnitOfWork.Commit() 的 stub</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubAbstractUnitOfWork.Dispose(System.Boolean)">
            <summary>设置 AbstractUnitOfWork.Dispose(Boolean disposing) 的 存根</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubAbstractUnitOfWork.DisposeBoolean">
            <summary>设置 AbstractUnitOfWork.Dispose(Boolean disposing) 的 stub</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubAbstractUnitOfWork.InitializeStub">
            <summary>初始化 type StubAbstractUnitOfWork 的新实例</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubAbstractUnitOfWork.OnCommited">
            <summary>设置 AbstractUnitOfWork.OnCommited() 的 存根</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubAbstractUnitOfWork.OnCommited01">
            <summary>设置 AbstractUnitOfWork.OnCommited() 的 stub</summary>
        </member>
        <member name="P:FC.Framework.Fakes.StubAbstractUnitOfWork.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:FC.Framework.Fakes.StubAbstractUnitOfWork.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:FC.Framework.Fakes.StubAbstractUnitOfWork.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:FC.Framework.Fakes.StubAwaitCommittedAttribute">
            <summary>FC.Framework.AwaitCommittedAttribute 的存根类型</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubAwaitCommittedAttribute.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubAwaitCommittedAttribute.Equals(System.Object)">
            <summary>设置 Attribute.Equals(Object obj) 的 存根</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubAwaitCommittedAttribute.EqualsObject">
            <summary>设置 Attribute.Equals(Object obj) 的 stub</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubAwaitCommittedAttribute.GetHashCode">
            <summary>设置 Attribute.GetHashCode() 的 存根</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubAwaitCommittedAttribute.GetHashCode01">
            <summary>设置 Attribute.GetHashCode() 的 stub</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubAwaitCommittedAttribute.InitializeStub">
            <summary>初始化 type StubAwaitCommittedAttribute 的新实例</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubAwaitCommittedAttribute.IsDefaultAttribute">
            <summary>设置 Attribute.IsDefaultAttribute() 的 存根</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubAwaitCommittedAttribute.IsDefaultAttribute01">
            <summary>设置 Attribute.IsDefaultAttribute() 的 stub</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubAwaitCommittedAttribute.Match(System.Object)">
            <summary>设置 Attribute.Match(Object obj) 的 存根</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubAwaitCommittedAttribute.MatchObject">
            <summary>设置 Attribute.Match(Object obj) 的 stub</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubAwaitCommittedAttribute.TypeIdGet">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="P:FC.Framework.Fakes.StubAwaitCommittedAttribute.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:FC.Framework.Fakes.StubAwaitCommittedAttribute.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:FC.Framework.Fakes.StubAwaitCommittedAttribute.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:FC.Framework.Fakes.StubAwaitCommittedAttribute.TypeId">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="T:FC.Framework.Fakes.StubCommand">
            <summary>FC.Framework.Command 的存根类型</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubCommand.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubCommand.InitializeStub">
            <summary>初始化 type StubCommand 的新实例</summary>
        </member>
        <member name="P:FC.Framework.Fakes.StubCommand.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:FC.Framework.Fakes.StubCommand.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:FC.Framework.Fakes.StubCommand.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:FC.Framework.Fakes.StubCommandExecutionException">
            <summary>FC.Framework.CommandExecutionException 的存根类型</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubCommandExecutionException.#ctor(System.Int32,System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubCommandExecutionException.#ctor(System.Int32,System.String,System.Exception)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubCommandExecutionException.AttachBackingFieldToHelpLink">
            <summary>附加委托以将 StubCommandExecutionException.HelpLink 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubCommandExecutionException.AttachBackingFieldToSource">
            <summary>附加委托以将 StubCommandExecutionException.Source 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubCommandExecutionException.DataGet">
            <summary>设置 Exception.get_Data() 的 stub</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubCommandExecutionException.GetBaseException">
            <summary>设置 Exception.GetBaseException() 的 存根</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubCommandExecutionException.GetBaseException01">
            <summary>设置 Exception.GetBaseException() 的 stub</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubCommandExecutionException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>设置 Exception.GetObjectData(SerializationInfo info, StreamingContext context) 的 存根</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubCommandExecutionException.GetObjectDataSerializationInfoStreamingContext">
            <summary>设置 Exception.GetObjectData(SerializationInfo info, StreamingContext context) 的 stub</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubCommandExecutionException.HelpLinkGet">
            <summary>设置 Exception.get_HelpLink() 的 stub</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubCommandExecutionException.HelpLinkSetString">
            <summary>设置 Exception.set_HelpLink(String value) 的 stub</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubCommandExecutionException.InitializeStub">
            <summary>初始化 type StubCommandExecutionException 的新实例</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubCommandExecutionException.MessageGet">
            <summary>设置 Exception.get_Message() 的 stub</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubCommandExecutionException.SourceGet">
            <summary>设置 Exception.get_Source() 的 stub</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubCommandExecutionException.SourceSetString">
            <summary>设置 Exception.set_Source(String value) 的 stub</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubCommandExecutionException.StackTraceGet">
            <summary>设置 Exception.get_StackTrace() 的 stub</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubCommandExecutionException.ToString">
            <summary>设置 Exception.ToString() 的 存根</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubCommandExecutionException.ToString01">
            <summary>设置 Exception.ToString() 的 stub</summary>
        </member>
        <member name="P:FC.Framework.Fakes.StubCommandExecutionException.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:FC.Framework.Fakes.StubCommandExecutionException.Data">
            <summary>设置 Exception.get_Data() 的 stub</summary>
        </member>
        <member name="P:FC.Framework.Fakes.StubCommandExecutionException.HelpLink">
            <summary>设置 Exception.get_HelpLink() 的 stub</summary>
        </member>
        <member name="P:FC.Framework.Fakes.StubCommandExecutionException.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:FC.Framework.Fakes.StubCommandExecutionException.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:FC.Framework.Fakes.StubCommandExecutionException.Message">
            <summary>设置 Exception.get_Message() 的 stub</summary>
        </member>
        <member name="P:FC.Framework.Fakes.StubCommandExecutionException.Source">
            <summary>设置 Exception.get_Source() 的 stub</summary>
        </member>
        <member name="P:FC.Framework.Fakes.StubCommandExecutionException.StackTrace">
            <summary>设置 Exception.get_StackTrace() 的 stub</summary>
        </member>
        <member name="T:FC.Framework.Fakes.StubCommandExecutorActivator">
            <summary>FC.Framework.CommandExecutorActivator 的存根类型</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubCommandExecutorActivator.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubCommandExecutorActivator.InitializeStub">
            <summary>初始化 type StubCommandExecutorActivator 的新实例</summary>
        </member>
        <member name="P:FC.Framework.Fakes.StubCommandExecutorActivator.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:FC.Framework.Fakes.StubCommandExecutorActivator.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:FC.Framework.Fakes.StubCommandExecutorActivator.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:FC.Framework.Fakes.StubCommandExecutorContainer">
            <summary>FC.Framework.CommandExecutorContainer 的存根类型</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubCommandExecutorContainer.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubCommandExecutorContainer.InitializeStub">
            <summary>初始化 type StubCommandExecutorContainer 的新实例</summary>
        </member>
        <member name="P:FC.Framework.Fakes.StubCommandExecutorContainer.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:FC.Framework.Fakes.StubCommandExecutorContainer.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:FC.Framework.Fakes.StubCommandExecutorContainer.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:FC.Framework.Fakes.StubComponentAttribute">
            <summary>FC.Framework.ComponentAttribute 的存根类型</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubComponentAttribute.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubComponentAttribute.Equals(System.Object)">
            <summary>设置 Attribute.Equals(Object obj) 的 存根</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubComponentAttribute.EqualsObject">
            <summary>设置 Attribute.Equals(Object obj) 的 stub</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubComponentAttribute.GetHashCode">
            <summary>设置 Attribute.GetHashCode() 的 存根</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubComponentAttribute.GetHashCode01">
            <summary>设置 Attribute.GetHashCode() 的 stub</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubComponentAttribute.InitializeStub">
            <summary>初始化 type StubComponentAttribute 的新实例</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubComponentAttribute.IsDefaultAttribute">
            <summary>设置 Attribute.IsDefaultAttribute() 的 存根</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubComponentAttribute.IsDefaultAttribute01">
            <summary>设置 Attribute.IsDefaultAttribute() 的 stub</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubComponentAttribute.Match(System.Object)">
            <summary>设置 Attribute.Match(Object obj) 的 存根</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubComponentAttribute.MatchObject">
            <summary>设置 Attribute.Match(Object obj) 的 stub</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubComponentAttribute.TypeIdGet">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="P:FC.Framework.Fakes.StubComponentAttribute.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:FC.Framework.Fakes.StubComponentAttribute.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:FC.Framework.Fakes.StubComponentAttribute.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:FC.Framework.Fakes.StubComponentAttribute.TypeId">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="T:FC.Framework.Fakes.StubConfigurationManagerWrapper">
            <summary>FC.Framework.ConfigurationManagerWrapper 的存根类型</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubConfigurationManagerWrapper.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubConfigurationManagerWrapper.InitializeStub">
            <summary>初始化 type StubConfigurationManagerWrapper 的新实例</summary>
        </member>
        <member name="P:FC.Framework.Fakes.StubConfigurationManagerWrapper.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:FC.Framework.Fakes.StubConfigurationManagerWrapper.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:FC.Framework.Fakes.StubConfigurationManagerWrapper.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:FC.Framework.Fakes.StubDefaultCommandBus">
            <summary>FC.Framework.DefaultCommandBus 的存根类型</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubDefaultCommandBus.#ctor(FC.Framework.ICommandExecutorContainer)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubDefaultCommandBus.InitializeStub">
            <summary>初始化 type StubDefaultCommandBus 的新实例</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubDefaultCommandBus.Send``1(``0)">
            <summary>设置 DefaultCommandBus.Send(!!0 cmd) 的 存根</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubDefaultCommandBus.SendOf1M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{``0})">
            <summary>设置 Send(!!0 cmd) 的存根</summary>
        </member>
        <member name="P:FC.Framework.Fakes.StubDefaultCommandBus.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:FC.Framework.Fakes.StubDefaultCommandBus.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:FC.Framework.Fakes.StubDefaultCommandBus.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:FC.Framework.Fakes.StubDefaultDomainContext">
            <summary>FC.Framework.DefaultDomainContext 的存根类型</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubDefaultDomainContext.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubDefaultDomainContext.InitializeStub">
            <summary>初始化 type StubDefaultDomainContext 的新实例</summary>
        </member>
        <member name="P:FC.Framework.Fakes.StubDefaultDomainContext.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:FC.Framework.Fakes.StubDefaultDomainContext.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:FC.Framework.Fakes.StubDefaultDomainContext.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:FC.Framework.Fakes.StubDefaultEventBus">
            <summary>FC.Framework.DefaultEventBus 的存根类型</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubDefaultEventBus.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubDefaultEventBus.#ctor(FC.Framework.IEventHandlerContainer)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubDefaultEventBus.#ctor(FC.Framework.IEventHandlerContainer,FC.Framework.IEventHandlerActivator,FC.Framework.IEventHandlerInvoker)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubDefaultEventBus.InitializeStub">
            <summary>初始化 type StubDefaultEventBus 的新实例</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubDefaultEventBus.Publish``1(``0)">
            <summary>设置 DefaultEventBus.Publish(!!0 event) 的 存根</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubDefaultEventBus.Publish``1(``0,FC.Framework.EventDispatchStrategy)">
            <summary>设置 DefaultEventBus.Publish(!!0 event, EventDispatchStrategy dispatchStrategy) 的 存根</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubDefaultEventBus.PublishOf1M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{``0})">
            <summary>设置 Publish(!!0 event) 的存根</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubDefaultEventBus.PublishOf1M0EventDispatchStrategy``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{``0,FC.Framework.EventDispatchStrategy})">
            <summary>设置 Publish(!!0 event, EventDispatchStrategy dispatchStrategy) 的存根</summary>
        </member>
        <member name="P:FC.Framework.Fakes.StubDefaultEventBus.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:FC.Framework.Fakes.StubDefaultEventBus.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:FC.Framework.Fakes.StubDefaultEventBus.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:FC.Framework.Fakes.StubDependencyResolverFactory">
            <summary>FC.Framework.DependencyResolverFactory 的存根类型</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubDependencyResolverFactory.#ctor(System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubDependencyResolverFactory.#ctor(System.Type)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubDependencyResolverFactory.InitializeStub">
            <summary>初始化 type StubDependencyResolverFactory 的新实例</summary>
        </member>
        <member name="P:FC.Framework.Fakes.StubDependencyResolverFactory.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:FC.Framework.Fakes.StubDependencyResolverFactory.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:FC.Framework.Fakes.StubDependencyResolverFactory.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:FC.Framework.Fakes.StubDisposableResource">
            <summary>FC.Framework.DisposableResource 的存根类型</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubDisposableResource.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubDisposableResource.Dispose(System.Boolean)">
            <summary>设置 DisposableResource.Dispose(Boolean disposing) 的 存根</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubDisposableResource.DisposeBoolean">
            <summary>设置 DisposableResource.Dispose(Boolean disposing) 的 stub</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubDisposableResource.InitializeStub">
            <summary>初始化 type StubDisposableResource 的新实例</summary>
        </member>
        <member name="P:FC.Framework.Fakes.StubDisposableResource.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:FC.Framework.Fakes.StubDisposableResource.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:FC.Framework.Fakes.StubDisposableResource.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:FC.Framework.Fakes.StubDomainEvent">
            <summary>FC.Framework.DomainEvent 的存根类型</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubDomainEvent.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubDomainEvent.InitializeStub">
            <summary>初始化 type StubDomainEvent 的新实例</summary>
        </member>
        <member name="P:FC.Framework.Fakes.StubDomainEvent.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:FC.Framework.Fakes.StubDomainEvent.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:FC.Framework.Fakes.StubDomainEvent.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:FC.Framework.Fakes.StubEnumDescriptionAttribute">
            <summary>FC.Framework.EnumDescriptionAttribute 的存根类型</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubEnumDescriptionAttribute.#ctor(System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubEnumDescriptionAttribute.Equals(System.Object)">
            <summary>设置 Attribute.Equals(Object obj) 的 存根</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubEnumDescriptionAttribute.EqualsObject">
            <summary>设置 Attribute.Equals(Object obj) 的 stub</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubEnumDescriptionAttribute.GetHashCode">
            <summary>设置 Attribute.GetHashCode() 的 存根</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubEnumDescriptionAttribute.GetHashCode01">
            <summary>设置 Attribute.GetHashCode() 的 stub</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubEnumDescriptionAttribute.InitializeStub">
            <summary>初始化 type StubEnumDescriptionAttribute 的新实例</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubEnumDescriptionAttribute.IsDefaultAttribute">
            <summary>设置 Attribute.IsDefaultAttribute() 的 存根</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubEnumDescriptionAttribute.IsDefaultAttribute01">
            <summary>设置 Attribute.IsDefaultAttribute() 的 stub</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubEnumDescriptionAttribute.Match(System.Object)">
            <summary>设置 Attribute.Match(Object obj) 的 存根</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubEnumDescriptionAttribute.MatchObject">
            <summary>设置 Attribute.Match(Object obj) 的 stub</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubEnumDescriptionAttribute.TypeIdGet">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="P:FC.Framework.Fakes.StubEnumDescriptionAttribute.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:FC.Framework.Fakes.StubEnumDescriptionAttribute.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:FC.Framework.Fakes.StubEnumDescriptionAttribute.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:FC.Framework.Fakes.StubEnumDescriptionAttribute.TypeId">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="T:FC.Framework.Fakes.StubEventBus">
            <summary>FC.Framework.EventBus 的存根类型</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubEventBus.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubEventBus.InitializeStub">
            <summary>初始化 type StubEventBus 的新实例</summary>
        </member>
        <member name="P:FC.Framework.Fakes.StubEventBus.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:FC.Framework.Fakes.StubEventBus.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:FC.Framework.Fakes.StubEventBus.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:FC.Framework.Fakes.StubEventHandlerActivator">
            <summary>FC.Framework.EventHandlerActivator 的存根类型</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubEventHandlerActivator.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubEventHandlerActivator.InitializeStub">
            <summary>初始化 type StubEventHandlerActivator 的新实例</summary>
        </member>
        <member name="P:FC.Framework.Fakes.StubEventHandlerActivator.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:FC.Framework.Fakes.StubEventHandlerActivator.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:FC.Framework.Fakes.StubEventHandlerActivator.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:FC.Framework.Fakes.StubEventHandlerContainer">
            <summary>FC.Framework.EventHandlerContainer 的存根类型</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubEventHandlerContainer.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubEventHandlerContainer.InitializeStub">
            <summary>初始化 type StubEventHandlerContainer 的新实例</summary>
        </member>
        <member name="P:FC.Framework.Fakes.StubEventHandlerContainer.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:FC.Framework.Fakes.StubEventHandlerContainer.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:FC.Framework.Fakes.StubEventHandlerContainer.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:FC.Framework.Fakes.StubEventHandlerExecption">
            <summary>FC.Framework.EventHandlerExecption 的存根类型</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubEventHandlerExecption.#ctor(System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubEventHandlerExecption.#ctor(System.String,System.Exception)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubEventHandlerExecption.AttachBackingFieldToHelpLink">
            <summary>附加委托以将 StubEventHandlerExecption.HelpLink 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubEventHandlerExecption.AttachBackingFieldToSource">
            <summary>附加委托以将 StubEventHandlerExecption.Source 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubEventHandlerExecption.DataGet">
            <summary>设置 Exception.get_Data() 的 stub</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubEventHandlerExecption.GetBaseException">
            <summary>设置 Exception.GetBaseException() 的 存根</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubEventHandlerExecption.GetBaseException01">
            <summary>设置 Exception.GetBaseException() 的 stub</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubEventHandlerExecption.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>设置 Exception.GetObjectData(SerializationInfo info, StreamingContext context) 的 存根</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubEventHandlerExecption.GetObjectDataSerializationInfoStreamingContext">
            <summary>设置 Exception.GetObjectData(SerializationInfo info, StreamingContext context) 的 stub</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubEventHandlerExecption.HelpLinkGet">
            <summary>设置 Exception.get_HelpLink() 的 stub</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubEventHandlerExecption.HelpLinkSetString">
            <summary>设置 Exception.set_HelpLink(String value) 的 stub</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubEventHandlerExecption.InitializeStub">
            <summary>初始化 type StubEventHandlerExecption 的新实例</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubEventHandlerExecption.MessageGet">
            <summary>设置 Exception.get_Message() 的 stub</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubEventHandlerExecption.SourceGet">
            <summary>设置 Exception.get_Source() 的 stub</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubEventHandlerExecption.SourceSetString">
            <summary>设置 Exception.set_Source(String value) 的 stub</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubEventHandlerExecption.StackTraceGet">
            <summary>设置 Exception.get_StackTrace() 的 stub</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubEventHandlerExecption.ToString">
            <summary>设置 Exception.ToString() 的 存根</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubEventHandlerExecption.ToString01">
            <summary>设置 Exception.ToString() 的 stub</summary>
        </member>
        <member name="P:FC.Framework.Fakes.StubEventHandlerExecption.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:FC.Framework.Fakes.StubEventHandlerExecption.Data">
            <summary>设置 Exception.get_Data() 的 stub</summary>
        </member>
        <member name="P:FC.Framework.Fakes.StubEventHandlerExecption.HelpLink">
            <summary>设置 Exception.get_HelpLink() 的 stub</summary>
        </member>
        <member name="P:FC.Framework.Fakes.StubEventHandlerExecption.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:FC.Framework.Fakes.StubEventHandlerExecption.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:FC.Framework.Fakes.StubEventHandlerExecption.Message">
            <summary>设置 Exception.get_Message() 的 stub</summary>
        </member>
        <member name="P:FC.Framework.Fakes.StubEventHandlerExecption.Source">
            <summary>设置 Exception.get_Source() 的 stub</summary>
        </member>
        <member name="P:FC.Framework.Fakes.StubEventHandlerExecption.StackTrace">
            <summary>设置 Exception.get_StackTrace() 的 stub</summary>
        </member>
        <member name="T:FC.Framework.Fakes.StubExecuteAsyncAttribute">
            <summary>FC.Framework.ExecuteAsyncAttribute 的存根类型</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubExecuteAsyncAttribute.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubExecuteAsyncAttribute.Equals(System.Object)">
            <summary>设置 Attribute.Equals(Object obj) 的 存根</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubExecuteAsyncAttribute.EqualsObject">
            <summary>设置 Attribute.Equals(Object obj) 的 stub</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubExecuteAsyncAttribute.GetHashCode">
            <summary>设置 Attribute.GetHashCode() 的 存根</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubExecuteAsyncAttribute.GetHashCode01">
            <summary>设置 Attribute.GetHashCode() 的 stub</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubExecuteAsyncAttribute.InitializeStub">
            <summary>初始化 type StubExecuteAsyncAttribute 的新实例</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubExecuteAsyncAttribute.IsDefaultAttribute">
            <summary>设置 Attribute.IsDefaultAttribute() 的 存根</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubExecuteAsyncAttribute.IsDefaultAttribute01">
            <summary>设置 Attribute.IsDefaultAttribute() 的 stub</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubExecuteAsyncAttribute.Match(System.Object)">
            <summary>设置 Attribute.Match(Object obj) 的 存根</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubExecuteAsyncAttribute.MatchObject">
            <summary>设置 Attribute.Match(Object obj) 的 stub</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubExecuteAsyncAttribute.TypeIdGet">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="P:FC.Framework.Fakes.StubExecuteAsyncAttribute.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:FC.Framework.Fakes.StubExecuteAsyncAttribute.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:FC.Framework.Fakes.StubExecuteAsyncAttribute.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:FC.Framework.Fakes.StubExecuteAsyncAttribute.TypeId">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="T:FC.Framework.Fakes.StubExecuteDistributedAttribute">
            <summary>FC.Framework.ExecuteDistributedAttribute 的存根类型</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubExecuteDistributedAttribute.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubExecuteDistributedAttribute.Equals(System.Object)">
            <summary>设置 Attribute.Equals(Object obj) 的 存根</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubExecuteDistributedAttribute.EqualsObject">
            <summary>设置 Attribute.Equals(Object obj) 的 stub</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubExecuteDistributedAttribute.GetHashCode">
            <summary>设置 Attribute.GetHashCode() 的 存根</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubExecuteDistributedAttribute.GetHashCode01">
            <summary>设置 Attribute.GetHashCode() 的 stub</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubExecuteDistributedAttribute.InitializeStub">
            <summary>初始化 type StubExecuteDistributedAttribute 的新实例</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubExecuteDistributedAttribute.IsDefaultAttribute">
            <summary>设置 Attribute.IsDefaultAttribute() 的 存根</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubExecuteDistributedAttribute.IsDefaultAttribute01">
            <summary>设置 Attribute.IsDefaultAttribute() 的 stub</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubExecuteDistributedAttribute.Match(System.Object)">
            <summary>设置 Attribute.Match(Object obj) 的 存根</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubExecuteDistributedAttribute.MatchObject">
            <summary>设置 Attribute.Match(Object obj) 的 stub</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubExecuteDistributedAttribute.TypeIdGet">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="P:FC.Framework.Fakes.StubExecuteDistributedAttribute.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:FC.Framework.Fakes.StubExecuteDistributedAttribute.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:FC.Framework.Fakes.StubExecuteDistributedAttribute.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:FC.Framework.Fakes.StubExecuteDistributedAttribute.TypeId">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="T:FC.Framework.Fakes.StubExecuteSyncAttribute">
            <summary>FC.Framework.ExecuteSyncAttribute 的存根类型</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubExecuteSyncAttribute.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubExecuteSyncAttribute.Equals(System.Object)">
            <summary>设置 Attribute.Equals(Object obj) 的 存根</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubExecuteSyncAttribute.EqualsObject">
            <summary>设置 Attribute.Equals(Object obj) 的 stub</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubExecuteSyncAttribute.GetHashCode">
            <summary>设置 Attribute.GetHashCode() 的 存根</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubExecuteSyncAttribute.GetHashCode01">
            <summary>设置 Attribute.GetHashCode() 的 stub</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubExecuteSyncAttribute.InitializeStub">
            <summary>初始化 type StubExecuteSyncAttribute 的新实例</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubExecuteSyncAttribute.IsDefaultAttribute">
            <summary>设置 Attribute.IsDefaultAttribute() 的 存根</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubExecuteSyncAttribute.IsDefaultAttribute01">
            <summary>设置 Attribute.IsDefaultAttribute() 的 stub</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubExecuteSyncAttribute.Match(System.Object)">
            <summary>设置 Attribute.Match(Object obj) 的 存根</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubExecuteSyncAttribute.MatchObject">
            <summary>设置 Attribute.Match(Object obj) 的 stub</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubExecuteSyncAttribute.TypeIdGet">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="P:FC.Framework.Fakes.StubExecuteSyncAttribute.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:FC.Framework.Fakes.StubExecuteSyncAttribute.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:FC.Framework.Fakes.StubExecuteSyncAttribute.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:FC.Framework.Fakes.StubExecuteSyncAttribute.TypeId">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="T:FC.Framework.Fakes.StubFCFrameworkException">
            <summary>FC.Framework.FCFrameworkException 的存根类型</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubFCFrameworkException.#ctor(System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubFCFrameworkException.#ctor(System.String,System.Exception)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubFCFrameworkException.AttachBackingFieldToHelpLink">
            <summary>附加委托以将 StubFCFrameworkException.HelpLink 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubFCFrameworkException.AttachBackingFieldToSource">
            <summary>附加委托以将 StubFCFrameworkException.Source 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubFCFrameworkException.DataGet">
            <summary>设置 Exception.get_Data() 的 stub</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubFCFrameworkException.GetBaseException">
            <summary>设置 Exception.GetBaseException() 的 存根</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubFCFrameworkException.GetBaseException01">
            <summary>设置 Exception.GetBaseException() 的 stub</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubFCFrameworkException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>设置 Exception.GetObjectData(SerializationInfo info, StreamingContext context) 的 存根</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubFCFrameworkException.GetObjectDataSerializationInfoStreamingContext">
            <summary>设置 Exception.GetObjectData(SerializationInfo info, StreamingContext context) 的 stub</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubFCFrameworkException.HelpLinkGet">
            <summary>设置 Exception.get_HelpLink() 的 stub</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubFCFrameworkException.HelpLinkSetString">
            <summary>设置 Exception.set_HelpLink(String value) 的 stub</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubFCFrameworkException.InitializeStub">
            <summary>初始化 type StubFCFrameworkException 的新实例</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubFCFrameworkException.MessageGet">
            <summary>设置 Exception.get_Message() 的 stub</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubFCFrameworkException.SourceGet">
            <summary>设置 Exception.get_Source() 的 stub</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubFCFrameworkException.SourceSetString">
            <summary>设置 Exception.set_Source(String value) 的 stub</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubFCFrameworkException.StackTraceGet">
            <summary>设置 Exception.get_StackTrace() 的 stub</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubFCFrameworkException.ToString">
            <summary>设置 Exception.ToString() 的 存根</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubFCFrameworkException.ToString01">
            <summary>设置 Exception.ToString() 的 stub</summary>
        </member>
        <member name="P:FC.Framework.Fakes.StubFCFrameworkException.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:FC.Framework.Fakes.StubFCFrameworkException.Data">
            <summary>设置 Exception.get_Data() 的 stub</summary>
        </member>
        <member name="P:FC.Framework.Fakes.StubFCFrameworkException.HelpLink">
            <summary>设置 Exception.get_HelpLink() 的 stub</summary>
        </member>
        <member name="P:FC.Framework.Fakes.StubFCFrameworkException.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:FC.Framework.Fakes.StubFCFrameworkException.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:FC.Framework.Fakes.StubFCFrameworkException.Message">
            <summary>设置 Exception.get_Message() 的 stub</summary>
        </member>
        <member name="P:FC.Framework.Fakes.StubFCFrameworkException.Source">
            <summary>设置 Exception.get_Source() 的 stub</summary>
        </member>
        <member name="P:FC.Framework.Fakes.StubFCFrameworkException.StackTrace">
            <summary>设置 Exception.get_StackTrace() 的 stub</summary>
        </member>
        <member name="T:FC.Framework.Fakes.StubFastEventHandlerInvoker">
            <summary>FC.Framework.FastEventHandlerInvoker 的存根类型</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubFastEventHandlerInvoker.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubFastEventHandlerInvoker.InitializeStub">
            <summary>初始化 type StubFastEventHandlerInvoker 的新实例</summary>
        </member>
        <member name="P:FC.Framework.Fakes.StubFastEventHandlerInvoker.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:FC.Framework.Fakes.StubFastEventHandlerInvoker.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:FC.Framework.Fakes.StubFastEventHandlerInvoker.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:FC.Framework.Fakes.StubICache">
            <summary>FC.Framework.ICache 的存根类型</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubICache.#ctor">
            <summary>初始化 type StubICache 的新实例</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubICache.AddOf1StringM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.String,``0})">
            <summary>设置 Add(String key, !!0 value) 的存根</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubICache.AddOf1StringM0DateTime``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.String,``0,System.DateTime})">
            <summary>设置 Add(String key, !!0 value, DateTime absoluteExpiration) 的存根</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubICache.AddOf1StringM0TimeSpan``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.String,``0,System.TimeSpan})">
            <summary>设置 Add(String key, !!0 value, TimeSpan slidingExpiration) 的存根</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubICache.fcf::FC#Framework#ICache#Add``1(System.String,``0)">
            <summary>设置 ICache.Add(String key, !!0 value) 的 存根</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubICache.fcf::FC#Framework#ICache#Add``1(System.String,``0,System.DateTime)">
            <summary>设置 ICache.Add(String key, !!0 value, DateTime absoluteExpiration) 的 存根</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubICache.fcf::FC#Framework#ICache#Add``1(System.String,``0,System.TimeSpan)">
            <summary>设置 ICache.Add(String key, !!0 value, TimeSpan slidingExpiration) 的 存根</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubICache.fcf::FC#Framework#ICache#Get(System.String)">
            <summary>设置 ICache.Get(String key) 的 存根</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubICache.fcf::FC#Framework#ICache#Get``1(System.String)">
            <summary>设置 ICache.Get(String key) 的 存根</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubICache.fcf::FC#Framework#ICache#Remove(System.String)">
            <summary>设置 ICache.Remove(String key) 的 存根</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubICache.fcf::FC#Framework#ICache#TryGet(System.String,System.Object@)">
            <summary>设置 ICache.TryGet(String key, Object&amp; value) 的 存根</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubICache.fcf::FC#Framework#ICache#TryGet``1(System.String,``0@)">
            <summary>设置 ICache.TryGet(String key, !!0&amp; value) 的 存根</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubICache.GetOf1String``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,``0})">
            <summary>设置 Get(String key) 的存根</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubICache.GetString">
            <summary>设置 ICache.Get(String key) 的 stub</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubICache.RemoveString">
            <summary>设置 ICache.Remove(String key) 的 stub</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubICache.TryGetOf1StringM0Out``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.OutFunc{System.String,``0,System.Boolean})">
            <summary>设置 TryGet(String key, !!0&amp; value) 的存根</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubICache.TryGetStringObjectOut">
            <summary>设置 ICache.TryGet(String key, Object&amp; value) 的 stub</summary>
        </member>
        <member name="T:FC.Framework.Fakes.StubICommand">
            <summary>FC.Framework.ICommand 的存根类型</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubICommand.#ctor">
            <summary>初始化 type StubICommand 的新实例</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubICommand.IDGet">
            <summary>设置 ICommand.get_ID() 的 stub</summary>
        </member>
        <member name="P:FC.Framework.Fakes.StubICommand.fcf::FC#Framework#ICommand#ID">
            <summary>设置 ICommand.get_ID() 的 stub</summary>
        </member>
        <member name="T:FC.Framework.Fakes.StubICommandBus">
            <summary>FC.Framework.ICommandBus 的存根类型</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubICommandBus.#ctor">
            <summary>初始化 type StubICommandBus 的新实例</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubICommandBus.fcf::FC#Framework#ICommandBus#Send``1(``0)">
            <summary>设置 ICommandBus.Send(!!0 cmd) 的 存根</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubICommandBus.SendOf1M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{``0})">
            <summary>设置 Send(!!0 cmd) 的存根</summary>
        </member>
        <member name="T:FC.Framework.Fakes.StubICommandExecutor`1">
            <summary>FC.Framework.ICommandExecutor`1 的存根类型</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubICommandExecutor`1.#ctor">
            <summary>初始化 type StubICommandExecutor 的新实例</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubICommandExecutor`1.ExecuteT0">
            <summary>设置 ICommandExecutor`1.Execute(!0 cmd) 的 stub</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubICommandExecutor`1.fcf::FC#Framework#ICommandExecutor{TCommand}#Execute(`0)">
            <summary>设置 ICommandExecutor`1.Execute(!0 cmd) 的 存根</summary>
        </member>
        <member name="T:FC.Framework.Fakes.StubICommandExecutorActivator">
            <summary>FC.Framework.ICommandExecutorActivator 的存根类型</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubICommandExecutorActivator.#ctor">
            <summary>初始化 type StubICommandExecutorActivator 的新实例</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubICommandExecutorActivator.CreateInstanceType">
            <summary>设置 ICommandExecutorActivator.CreateInstance(Type type) 的 stub</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubICommandExecutorActivator.fcf::FC#Framework#ICommandExecutorActivator#CreateInstance(System.Type)">
            <summary>设置 ICommandExecutorActivator.CreateInstance(Type type) 的 存根</summary>
        </member>
        <member name="T:FC.Framework.Fakes.StubICommandExecutorContainer">
            <summary>FC.Framework.ICommandExecutorContainer 的存根类型</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubICommandExecutorContainer.#ctor">
            <summary>初始化 type StubICommandExecutorContainer 的新实例</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubICommandExecutorContainer.fcf::FC#Framework#ICommandExecutorContainer#FindExecutorType``1">
            <summary>设置 ICommandExecutorContainer.FindExecutorType() 的 存根</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubICommandExecutorContainer.fcf::FC#Framework#ICommandExecutorContainer#RegisterExecutor(System.Type)">
            <summary>设置 ICommandExecutorContainer.RegisterExecutor(Type executorType) 的 存根</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubICommandExecutorContainer.fcf::FC#Framework#ICommandExecutorContainer#RegisterExecutors(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>设置 ICommandExecutorContainer.RegisterExecutors(IEnumerable`1&lt;Assembly&gt; assembliesToScan) 的 存根</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubICommandExecutorContainer.fcf::FC#Framework#ICommandExecutorContainer#RegisterExecutors(System.Reflection.Assembly)">
            <summary>设置 ICommandExecutorContainer.RegisterExecutors(Assembly assemblyToScan) 的 存根</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubICommandExecutorContainer.FindExecutorTypeOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Type})">
            <summary>设置 FindExecutorType() 的存根</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubICommandExecutorContainer.RegisterExecutorType">
            <summary>设置 ICommandExecutorContainer.RegisterExecutor(Type executorType) 的 stub</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubICommandExecutorContainer.RegisterExecutorsAssembly">
            <summary>设置 ICommandExecutorContainer.RegisterExecutors(Assembly assemblyToScan) 的 stub</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubICommandExecutorContainer.RegisterExecutorsIEnumerableOfAssembly">
            <summary>设置 ICommandExecutorContainer.RegisterExecutors(IEnumerable`1&lt;Assembly&gt; assembliesToScan) 的 stub</summary>
        </member>
        <member name="T:FC.Framework.Fakes.StubIDependencyResolver">
            <summary>FC.Framework.IDependencyResolver 的存根类型</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubIDependencyResolver.#ctor">
            <summary>初始化 type StubIDependencyResolver 的新实例</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubIDependencyResolver.Dispose">
            <summary>设置 IDisposable.Dispose() 的 stub</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubIDependencyResolver.fcf::FC#Framework#IDependencyResolver#Register``1(FC.Framework.LifeStyle)">
            <summary>设置 IDependencyResolver.Register(LifeStyle lifeStyle) 的 存根</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubIDependencyResolver.fcf::FC#Framework#IDependencyResolver#Register``1(``0)">
            <summary>设置 IDependencyResolver.Register(!!0 instance) 的 存根</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubIDependencyResolver.fcf::FC#Framework#IDependencyResolver#Register``2(FC.Framework.LifeStyle)">
            <summary>设置 IDependencyResolver.Register(LifeStyle lifeStyle) 的 存根</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubIDependencyResolver.fcf::FC#Framework#IDependencyResolver#Register``2(System.String,FC.Framework.LifeStyle)">
            <summary>设置 IDependencyResolver.Register(String name, LifeStyle lifeStyle) 的 存根</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubIDependencyResolver.fcf::FC#Framework#IDependencyResolver#Register(System.Type,FC.Framework.LifeStyle)">
            <summary>设置 IDependencyResolver.Register(Type typeImpl, LifeStyle lifeStyle) 的 存根</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubIDependencyResolver.fcf::FC#Framework#IDependencyResolver#Register``1(``0,System.String)">
            <summary>设置 IDependencyResolver.Register(!!0 instance, String name) 的 存根</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubIDependencyResolver.fcf::FC#Framework#IDependencyResolver#Register(System.Type,System.Type,FC.Framework.LifeStyle)">
            <summary>设置 IDependencyResolver.Register(Type typeInterface, Type typeImpl, LifeStyle lifeStyle) 的 存根</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubIDependencyResolver.fcf::FC#Framework#IDependencyResolver#Register(System.Type,System.Type,System.String,FC.Framework.LifeStyle)">
            <summary>设置 IDependencyResolver.Register(Type typeInterface, Type typeImpl, String name, LifeStyle lifeStyle) 的 存根</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubIDependencyResolver.fcf::FC#Framework#IDependencyResolver#Resolve(System.Type)">
            <summary>设置 IDependencyResolver.Resolve(Type type) 的 存根</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubIDependencyResolver.fcf::FC#Framework#IDependencyResolver#Resolve(System.Type,System.String)">
            <summary>设置 IDependencyResolver.Resolve(Type type, String name) 的 存根</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubIDependencyResolver.fcf::FC#Framework#IDependencyResolver#Resolve(System.Type,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>设置 IDependencyResolver.Resolve(Type type, KeyValuePair`2&lt;String,Object&gt;[] parameters) 的 存根</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubIDependencyResolver.fcf::FC#Framework#IDependencyResolver#Resolve(System.Type,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>设置 IDependencyResolver.Resolve(Type type, String name, Dictionary`2&lt;String,Object&gt; parameters) 的 存根</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubIDependencyResolver.fcf::FC#Framework#IDependencyResolver#Resolve``1">
            <summary>设置 IDependencyResolver.Resolve() 的 存根</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubIDependencyResolver.fcf::FC#Framework#IDependencyResolver#Resolve``1(System.String)">
            <summary>设置 IDependencyResolver.Resolve(String name) 的 存根</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubIDependencyResolver.fcf::FC#Framework#IDependencyResolver#Resolve``1(System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>设置 IDependencyResolver.Resolve(KeyValuePair`2&lt;String,Object&gt;[] parameters) 的 存根</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubIDependencyResolver.fcf::FC#Framework#IDependencyResolver#Resolve``1(System.String,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>设置 IDependencyResolver.Resolve(String name, KeyValuePair`2&lt;String,Object&gt;[] parameters) 的 存根</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubIDependencyResolver.fcf::FC#Framework#IDependencyResolver#Resolve(System.Type,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>设置 IDependencyResolver.Resolve(Type type, Dictionary`2&lt;String,Object&gt; parameters) 的 存根</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubIDependencyResolver.fcf::FC#Framework#IDependencyResolver#Resolve(System.Type,System.String,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>设置 IDependencyResolver.Resolve(Type type, String name, KeyValuePair`2&lt;String,Object&gt;[] parameters) 的 存根</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubIDependencyResolver.fcf::FC#Framework#IDependencyResolver#Resolve``1(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>设置 IDependencyResolver.Resolve(Dictionary`2&lt;String,Object&gt; parameters) 的 存根</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubIDependencyResolver.fcf::FC#Framework#IDependencyResolver#Resolve``1(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>设置 IDependencyResolver.Resolve(String name, Dictionary`2&lt;String,Object&gt; parameters) 的 存根</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubIDependencyResolver.fcf::FC#Framework#IDependencyResolver#ResolveAll(System.Type)">
            <summary>设置 IDependencyResolver.ResolveAll(Type type) 的 存根</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubIDependencyResolver.fcf::FC#Framework#IDependencyResolver#ResolveAll``1">
            <summary>设置 IDependencyResolver.ResolveAll() 的 存根</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubIDependencyResolver.RegisterOf1LifeStyle``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{FC.Framework.LifeStyle})">
            <summary>设置 Register(LifeStyle lifeStyle) 的存根</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubIDependencyResolver.RegisterOf1M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{``0})">
            <summary>设置 Register(!!0 instance) 的存根</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubIDependencyResolver.RegisterOf1M0String``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{``0,System.String})">
            <summary>设置 Register(!!0 instance, String name) 的存根</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubIDependencyResolver.RegisterOf2LifeStyle``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{FC.Framework.LifeStyle})">
            <summary>设置 Register(LifeStyle lifeStyle) 的存根</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubIDependencyResolver.RegisterOf2StringLifeStyle``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.String,FC.Framework.LifeStyle})">
            <summary>设置 Register(String name, LifeStyle lifeStyle) 的存根</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubIDependencyResolver.RegisterTypeLifeStyle">
            <summary>设置 IDependencyResolver.Register(Type typeImpl, LifeStyle lifeStyle) 的 stub</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubIDependencyResolver.RegisterTypeTypeLifeStyle">
            <summary>设置 IDependencyResolver.Register(Type typeInterface, Type typeImpl, LifeStyle lifeStyle) 的 stub</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubIDependencyResolver.RegisterTypeTypeStringLifeStyle">
            <summary>设置 IDependencyResolver.Register(Type typeInterface, Type typeImpl, String name, LifeStyle lifeStyle) 的 stub</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubIDependencyResolver.ResolveAllOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.Generic.IEnumerable{``0}})">
            <summary>设置 ResolveAll() 的存根</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubIDependencyResolver.ResolveAllType">
            <summary>设置 IDependencyResolver.ResolveAll(Type type) 的 stub</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubIDependencyResolver.ResolveOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``0})">
            <summary>设置 Resolve() 的存根</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubIDependencyResolver.ResolveOf1DictionaryOfStringObject``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.Generic.Dictionary{System.String,System.Object},``0})">
            <summary>设置 Resolve(Dictionary`2&lt;String,Object&gt; parameters) 的存根</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubIDependencyResolver.ResolveOf1KeyValuePairOfStringObjectArray``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.Generic.KeyValuePair{System.String,System.Object}[],``0})">
            <summary>设置 Resolve(KeyValuePair`2&lt;String,Object&gt;[] parameters) 的存根</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubIDependencyResolver.ResolveOf1String``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,``0})">
            <summary>设置 Resolve(String name) 的存根</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubIDependencyResolver.ResolveOf1StringDictionaryOfStringObject``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,System.Collections.Generic.Dictionary{System.String,System.Object},``0})">
            <summary>设置 Resolve(String name, Dictionary`2&lt;String,Object&gt; parameters) 的存根</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubIDependencyResolver.ResolveOf1StringKeyValuePairOfStringObjectArray``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,System.Collections.Generic.KeyValuePair{System.String,System.Object}[],``0})">
            <summary>设置 Resolve(String name, KeyValuePair`2&lt;String,Object&gt;[] parameters) 的存根</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubIDependencyResolver.ResolveType">
            <summary>设置 IDependencyResolver.Resolve(Type type) 的 stub</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubIDependencyResolver.ResolveTypeDictionaryOfStringObject">
            <summary>设置 IDependencyResolver.Resolve(Type type, Dictionary`2&lt;String,Object&gt; parameters) 的 stub</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubIDependencyResolver.ResolveTypeKeyValuePairOfStringObjectArray">
            <summary>设置 IDependencyResolver.Resolve(Type type, KeyValuePair`2&lt;String,Object&gt;[] parameters) 的 stub</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubIDependencyResolver.ResolveTypeString">
            <summary>设置 IDependencyResolver.Resolve(Type type, String name) 的 stub</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubIDependencyResolver.ResolveTypeStringDictionaryOfStringObject">
            <summary>设置 IDependencyResolver.Resolve(Type type, String name, Dictionary`2&lt;String,Object&gt; parameters) 的 stub</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubIDependencyResolver.ResolveTypeStringKeyValuePairOfStringObjectArray">
            <summary>设置 IDependencyResolver.Resolve(Type type, String name, KeyValuePair`2&lt;String,Object&gt;[] parameters) 的 stub</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubIDependencyResolver.global::System#IDisposable#Dispose">
            <summary>设置 IDisposable.Dispose() 的 存根</summary>
        </member>
        <member name="T:FC.Framework.Fakes.StubIDependencyResolverFactory">
            <summary>FC.Framework.IDependencyResolverFactory 的存根类型</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubIDependencyResolverFactory.#ctor">
            <summary>初始化 type StubIDependencyResolverFactory 的新实例</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubIDependencyResolverFactory.CreateInstance">
            <summary>设置 IDependencyResolverFactory.CreateInstance() 的 stub</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubIDependencyResolverFactory.fcf::FC#Framework#IDependencyResolverFactory#CreateInstance">
            <summary>设置 IDependencyResolverFactory.CreateInstance() 的 存根</summary>
        </member>
        <member name="T:FC.Framework.Fakes.StubIDomainContext">
            <summary>FC.Framework.IDomainContext 的存根类型</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubIDomainContext.#ctor">
            <summary>初始化 type StubIDomainContext 的新实例</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubIDomainContext.AddOf1M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{``0})">
            <summary>设置 Add(!!0 domain) 的存根</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubIDomainContext.fcf::FC#Framework#IDomainContext#Add``1(``0)">
            <summary>设置 IDomainContext.Add(!!0 domain) 的 存根</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubIDomainContext.fcf::FC#Framework#IDomainContext#Get``1(System.Int32)">
            <summary>设置 IDomainContext.Get(Int32 id) 的 存根</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubIDomainContext.GetOf1Int32``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Int32,``0})">
            <summary>设置 Get(Int32 id) 的存根</summary>
        </member>
        <member name="T:FC.Framework.Fakes.StubIDomainEvent">
            <summary>FC.Framework.IDomainEvent 的存根类型</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubIDomainEvent.#ctor">
            <summary>初始化 type StubIDomainEvent 的新实例</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubIDomainEvent.UTCTimestampGet">
            <summary>设置 IDomainEvent.get_UTCTimestamp() 的 stub</summary>
        </member>
        <member name="P:FC.Framework.Fakes.StubIDomainEvent.fcf::FC#Framework#IDomainEvent#UTCTimestamp">
            <summary>设置 IDomainEvent.get_UTCTimestamp() 的 stub</summary>
        </member>
        <member name="T:FC.Framework.Fakes.StubIEventBus">
            <summary>FC.Framework.IEventBus 的存根类型</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubIEventBus.#ctor">
            <summary>初始化 type StubIEventBus 的新实例</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubIEventBus.fcf::FC#Framework#IEventBus#Publish``1(``0)">
            <summary>设置 IEventBus.Publish(!!0 ent) 的 存根</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubIEventBus.fcf::FC#Framework#IEventBus#Publish``1(``0,FC.Framework.EventDispatchStrategy)">
            <summary>设置 IEventBus.Publish(!!0 ent, EventDispatchStrategy executionStrategy) 的 存根</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubIEventBus.PublishOf1M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{``0})">
            <summary>设置 Publish(!!0 ent) 的存根</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubIEventBus.PublishOf1M0EventDispatchStrategy``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{``0,FC.Framework.EventDispatchStrategy})">
            <summary>设置 Publish(!!0 ent, EventDispatchStrategy executionStrategy) 的存根</summary>
        </member>
        <member name="T:FC.Framework.Fakes.StubIEventHandler">
            <summary>FC.Framework.IEventHandler 的存根类型</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubIEventHandler.#ctor">
            <summary>初始化 type StubIEventHandler 的新实例</summary>
        </member>
        <member name="T:FC.Framework.Fakes.StubIEventHandler`1">
            <summary>FC.Framework.IEventHandler`1 的存根类型</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubIEventHandler`1.#ctor">
            <summary>初始化 type StubIEventHandler 的新实例</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubIEventHandler`1.fcf::FC#Framework#IEventHandler{TEvent}#Handle(`0)">
            <summary>设置 IEventHandler`1.Handle(!0 event) 的 存根</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubIEventHandler`1.HandleT0">
            <summary>设置 IEventHandler`1.Handle(!0 event) 的 stub</summary>
        </member>
        <member name="T:FC.Framework.Fakes.StubIEventHandlerActivator">
            <summary>FC.Framework.IEventHandlerActivator 的存根类型</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubIEventHandlerActivator.#ctor">
            <summary>初始化 type StubIEventHandlerActivator 的新实例</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubIEventHandlerActivator.CreateInstanceType">
            <summary>设置 IEventHandlerActivator.CreateInstance(Type type) 的 stub</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubIEventHandlerActivator.fcf::FC#Framework#IEventHandlerActivator#CreateInstance(System.Type)">
            <summary>设置 IEventHandlerActivator.CreateInstance(Type type) 的 存根</summary>
        </member>
        <member name="T:FC.Framework.Fakes.StubIEventHandlerContainer">
            <summary>FC.Framework.IEventHandlerContainer 的存根类型</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubIEventHandlerContainer.#ctor">
            <summary>初始化 type StubIEventHandlerContainer 的新实例</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubIEventHandlerContainer.fcf::FC#Framework#IEventHandlerContainer#FindHandlerMethods``1">
            <summary>设置 IEventHandlerContainer.FindHandlerMethods() 的 存根</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubIEventHandlerContainer.fcf::FC#Framework#IEventHandlerContainer#FindHandlerMethods``1(FC.Framework.EventDispatchStrategy)">
            <summary>设置 IEventHandlerContainer.FindHandlerMethods(EventDispatchStrategy executionStrategy) 的 存根</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubIEventHandlerContainer.fcf::FC#Framework#IEventHandlerContainer#RegisterHandler(System.Type)">
            <summary>设置 IEventHandlerContainer.RegisterHandler(Type handlerType) 的 存根</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubIEventHandlerContainer.fcf::FC#Framework#IEventHandlerContainer#RegisterHandlers(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>设置 IEventHandlerContainer.RegisterHandlers(IEnumerable`1&lt;Assembly&gt; assembliesToScan) 的 存根</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubIEventHandlerContainer.fcf::FC#Framework#IEventHandlerContainer#RegisterHandlers(System.Reflection.Assembly)">
            <summary>设置 IEventHandlerContainer.RegisterHandlers(Assembly assemblyToScan) 的 存根</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubIEventHandlerContainer.FindHandlerMethodsOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo}})">
            <summary>设置 FindHandlerMethods() 的存根</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubIEventHandlerContainer.FindHandlerMethodsOf1EventDispatchStrategy``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{FC.Framework.EventDispatchStrategy,System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo}})">
            <summary>设置 FindHandlerMethods(EventDispatchStrategy executionStrategy) 的存根</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubIEventHandlerContainer.RegisterHandlerType">
            <summary>设置 IEventHandlerContainer.RegisterHandler(Type handlerType) 的 stub</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubIEventHandlerContainer.RegisterHandlersAssembly">
            <summary>设置 IEventHandlerContainer.RegisterHandlers(Assembly assemblyToScan) 的 stub</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubIEventHandlerContainer.RegisterHandlersIEnumerableOfAssembly">
            <summary>设置 IEventHandlerContainer.RegisterHandlers(IEnumerable`1&lt;Assembly&gt; assembliesToScan) 的 stub</summary>
        </member>
        <member name="T:FC.Framework.Fakes.StubIEventHandlerInvoker">
            <summary>FC.Framework.IEventHandlerInvoker 的存根类型</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubIEventHandlerInvoker.#ctor">
            <summary>初始化 type StubIEventHandlerInvoker 的新实例</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubIEventHandlerInvoker.fcf::FC#Framework#IEventHandlerInvoker#Invoke(System.Object,System.Reflection.MethodInfo,System.Object)">
            <summary>设置 IEventHandlerInvoker.Invoke(Object handler, MethodInfo handleMethod, Object arg) 的 存根</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubIEventHandlerInvoker.InvokeObjectMethodInfoObject">
            <summary>设置 IEventHandlerInvoker.Invoke(Object handler, MethodInfo handleMethod, Object arg) 的 stub</summary>
        </member>
        <member name="T:FC.Framework.Fakes.StubIJsonSerializer">
            <summary>FC.Framework.IJsonSerializer 的存根类型</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubIJsonSerializer.#ctor">
            <summary>初始化 type StubIJsonSerializer 的新实例</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubIJsonSerializer.DeserializeOf1String``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,``0})">
            <summary>设置 Deserialize(String value) 的存根</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubIJsonSerializer.DeserializeStringType">
            <summary>设置 IJsonSerializer.Deserialize(String value, Type type) 的 stub</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubIJsonSerializer.fcf::FC#Framework#IJsonSerializer#Deserialize``1(System.String)">
            <summary>设置 IJsonSerializer.Deserialize(String value) 的 存根</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubIJsonSerializer.fcf::FC#Framework#IJsonSerializer#Deserialize(System.String,System.Type)">
            <summary>设置 IJsonSerializer.Deserialize(String value, Type type) 的 存根</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubIJsonSerializer.fcf::FC#Framework#IJsonSerializer#Serialize(System.Object)">
            <summary>设置 IJsonSerializer.Serialize(Object obj) 的 存根</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubIJsonSerializer.SerializeObject">
            <summary>设置 IJsonSerializer.Serialize(Object obj) 的 stub</summary>
        </member>
        <member name="T:FC.Framework.Fakes.StubILog">
            <summary>FC.Framework.ILog 的存根类型</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubILog.#ctor">
            <summary>初始化 type StubILog 的新实例</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubILog.DebugString">
            <summary>设置 ILog.Debug(String message) 的 stub</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubILog.ErrorString">
            <summary>设置 ILog.Error(String message) 的 stub</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubILog.ErrorStringException">
            <summary>设置 ILog.Error(String message, Exception exception) 的 stub</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubILog.fcf::FC#Framework#ILog#Debug(System.String)">
            <summary>设置 ILog.Debug(String message) 的 存根</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubILog.fcf::FC#Framework#ILog#Error(System.String)">
            <summary>设置 ILog.Error(String message) 的 存根</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubILog.fcf::FC#Framework#ILog#Error(System.String,System.Exception)">
            <summary>设置 ILog.Error(String message, Exception exception) 的 存根</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubILog.fcf::FC#Framework#ILog#Fatal(System.String)">
            <summary>设置 ILog.Fatal(String message) 的 存根</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubILog.fcf::FC#Framework#ILog#Fatal(System.String,System.Exception)">
            <summary>设置 ILog.Fatal(String message, Exception exception) 的 存根</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubILog.fcf::FC#Framework#ILog#Info(System.String)">
            <summary>设置 ILog.Info(String message) 的 存根</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubILog.fcf::FC#Framework#ILog#Warn(System.String)">
            <summary>设置 ILog.Warn(String message) 的 存根</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubILog.fcf::FC#Framework#ILog#Warn(System.String,System.Exception)">
            <summary>设置 ILog.Warn(String message, Exception exception) 的 存根</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubILog.FatalString">
            <summary>设置 ILog.Fatal(String message) 的 stub</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubILog.FatalStringException">
            <summary>设置 ILog.Fatal(String message, Exception exception) 的 stub</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubILog.InfoString">
            <summary>设置 ILog.Info(String message) 的 stub</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubILog.WarnString">
            <summary>设置 ILog.Warn(String message) 的 stub</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubILog.WarnStringException">
            <summary>设置 ILog.Warn(String message, Exception exception) 的 stub</summary>
        </member>
        <member name="T:FC.Framework.Fakes.StubIUnitOfWork">
            <summary>FC.Framework.IUnitOfWork 的存根类型</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubIUnitOfWork.#ctor">
            <summary>初始化 type StubIUnitOfWork 的新实例</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubIUnitOfWork.Commit">
            <summary>设置 IUnitOfWork.Commit() 的 stub</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubIUnitOfWork.Dispose">
            <summary>设置 IDisposable.Dispose() 的 stub</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubIUnitOfWork.fcf::FC#Framework#IUnitOfWork#Commit">
            <summary>设置 IUnitOfWork.Commit() 的 存根</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubIUnitOfWork.global::System#IDisposable#Dispose">
            <summary>设置 IDisposable.Dispose() 的 存根</summary>
        </member>
        <member name="T:FC.Framework.Fakes.StubIoC">
            <summary>FC.Framework.IoC 的存根类型</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubIoC.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubIoC.InitializeStub">
            <summary>初始化 type StubIoC 的新实例</summary>
        </member>
        <member name="P:FC.Framework.Fakes.StubIoC.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:FC.Framework.Fakes.StubIoC.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:FC.Framework.Fakes.StubIoC.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:FC.Framework.Fakes.StubIoCException">
            <summary>FC.Framework.IoCException 的存根类型</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubIoCException.#ctor(System.Exception)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubIoCException.#ctor(System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubIoCException.#ctor(System.String,System.Exception)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubIoCException.AttachBackingFieldToHelpLink">
            <summary>附加委托以将 StubIoCException.HelpLink 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubIoCException.AttachBackingFieldToSource">
            <summary>附加委托以将 StubIoCException.Source 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubIoCException.DataGet">
            <summary>设置 Exception.get_Data() 的 stub</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubIoCException.GetBaseException">
            <summary>设置 Exception.GetBaseException() 的 存根</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubIoCException.GetBaseException01">
            <summary>设置 Exception.GetBaseException() 的 stub</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubIoCException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>设置 Exception.GetObjectData(SerializationInfo info, StreamingContext context) 的 存根</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubIoCException.GetObjectDataSerializationInfoStreamingContext">
            <summary>设置 Exception.GetObjectData(SerializationInfo info, StreamingContext context) 的 stub</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubIoCException.HelpLinkGet">
            <summary>设置 Exception.get_HelpLink() 的 stub</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubIoCException.HelpLinkSetString">
            <summary>设置 Exception.set_HelpLink(String value) 的 stub</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubIoCException.InitializeStub">
            <summary>初始化 type StubIoCException 的新实例</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubIoCException.MessageGet">
            <summary>设置 Exception.get_Message() 的 stub</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubIoCException.SourceGet">
            <summary>设置 Exception.get_Source() 的 stub</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubIoCException.SourceSetString">
            <summary>设置 Exception.set_Source(String value) 的 stub</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubIoCException.StackTraceGet">
            <summary>设置 Exception.get_StackTrace() 的 stub</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubIoCException.ToString">
            <summary>设置 Exception.ToString() 的 存根</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubIoCException.ToString01">
            <summary>设置 Exception.ToString() 的 stub</summary>
        </member>
        <member name="P:FC.Framework.Fakes.StubIoCException.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:FC.Framework.Fakes.StubIoCException.Data">
            <summary>设置 Exception.get_Data() 的 stub</summary>
        </member>
        <member name="P:FC.Framework.Fakes.StubIoCException.HelpLink">
            <summary>设置 Exception.get_HelpLink() 的 stub</summary>
        </member>
        <member name="P:FC.Framework.Fakes.StubIoCException.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:FC.Framework.Fakes.StubIoCException.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:FC.Framework.Fakes.StubIoCException.Message">
            <summary>设置 Exception.get_Message() 的 stub</summary>
        </member>
        <member name="P:FC.Framework.Fakes.StubIoCException.Source">
            <summary>设置 Exception.get_Source() 的 stub</summary>
        </member>
        <member name="P:FC.Framework.Fakes.StubIoCException.StackTrace">
            <summary>设置 Exception.get_StackTrace() 的 stub</summary>
        </member>
        <member name="T:FC.Framework.Fakes.StubLog">
            <summary>FC.Framework.Log 的存根类型</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubLog.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubLog.InitializeStub">
            <summary>初始化 type StubLog 的新实例</summary>
        </member>
        <member name="P:FC.Framework.Fakes.StubLog.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:FC.Framework.Fakes.StubLog.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:FC.Framework.Fakes.StubLog.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:FC.Framework.Fakes.StubOnEventRaisedAttribute">
            <summary>FC.Framework.OnEventRaisedAttribute 的存根类型</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubOnEventRaisedAttribute.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubOnEventRaisedAttribute.Equals(System.Object)">
            <summary>设置 Attribute.Equals(Object obj) 的 存根</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubOnEventRaisedAttribute.EqualsObject">
            <summary>设置 Attribute.Equals(Object obj) 的 stub</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubOnEventRaisedAttribute.GetHashCode">
            <summary>设置 Attribute.GetHashCode() 的 存根</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubOnEventRaisedAttribute.GetHashCode01">
            <summary>设置 Attribute.GetHashCode() 的 stub</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubOnEventRaisedAttribute.InitializeStub">
            <summary>初始化 type StubOnEventRaisedAttribute 的新实例</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubOnEventRaisedAttribute.IsDefaultAttribute">
            <summary>设置 Attribute.IsDefaultAttribute() 的 存根</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubOnEventRaisedAttribute.IsDefaultAttribute01">
            <summary>设置 Attribute.IsDefaultAttribute() 的 stub</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubOnEventRaisedAttribute.Match(System.Object)">
            <summary>设置 Attribute.Match(Object obj) 的 存根</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubOnEventRaisedAttribute.MatchObject">
            <summary>设置 Attribute.Match(Object obj) 的 stub</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubOnEventRaisedAttribute.TypeIdGet">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="P:FC.Framework.Fakes.StubOnEventRaisedAttribute.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:FC.Framework.Fakes.StubOnEventRaisedAttribute.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:FC.Framework.Fakes.StubOnEventRaisedAttribute.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:FC.Framework.Fakes.StubOnEventRaisedAttribute.TypeId">
            <summary>设置 Attribute.get_TypeId() 的 stub</summary>
        </member>
        <member name="T:FC.Framework.Fakes.StubUnknowExecption">
            <summary>FC.Framework.UnknowExecption 的存根类型</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubUnknowExecption.#ctor(System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubUnknowExecption.#ctor(System.String,System.Exception)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubUnknowExecption.AttachBackingFieldToHelpLink">
            <summary>附加委托以将 StubUnknowExecption.HelpLink 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubUnknowExecption.AttachBackingFieldToSource">
            <summary>附加委托以将 StubUnknowExecption.Source 作为具有支持字段的属性进行模拟。</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubUnknowExecption.DataGet">
            <summary>设置 Exception.get_Data() 的 stub</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubUnknowExecption.GetBaseException">
            <summary>设置 Exception.GetBaseException() 的 存根</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubUnknowExecption.GetBaseException01">
            <summary>设置 Exception.GetBaseException() 的 stub</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubUnknowExecption.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>设置 Exception.GetObjectData(SerializationInfo info, StreamingContext context) 的 存根</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubUnknowExecption.GetObjectDataSerializationInfoStreamingContext">
            <summary>设置 Exception.GetObjectData(SerializationInfo info, StreamingContext context) 的 stub</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubUnknowExecption.HelpLinkGet">
            <summary>设置 Exception.get_HelpLink() 的 stub</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubUnknowExecption.HelpLinkSetString">
            <summary>设置 Exception.set_HelpLink(String value) 的 stub</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubUnknowExecption.InitializeStub">
            <summary>初始化 type StubUnknowExecption 的新实例</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubUnknowExecption.MessageGet">
            <summary>设置 Exception.get_Message() 的 stub</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubUnknowExecption.SourceGet">
            <summary>设置 Exception.get_Source() 的 stub</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubUnknowExecption.SourceSetString">
            <summary>设置 Exception.set_Source(String value) 的 stub</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubUnknowExecption.StackTraceGet">
            <summary>设置 Exception.get_StackTrace() 的 stub</summary>
        </member>
        <member name="M:FC.Framework.Fakes.StubUnknowExecption.ToString">
            <summary>设置 Exception.ToString() 的 存根</summary>
        </member>
        <member name="F:FC.Framework.Fakes.StubUnknowExecption.ToString01">
            <summary>设置 Exception.ToString() 的 stub</summary>
        </member>
        <member name="P:FC.Framework.Fakes.StubUnknowExecption.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:FC.Framework.Fakes.StubUnknowExecption.Data">
            <summary>设置 Exception.get_Data() 的 stub</summary>
        </member>
        <member name="P:FC.Framework.Fakes.StubUnknowExecption.HelpLink">
            <summary>设置 Exception.get_HelpLink() 的 stub</summary>
        </member>
        <member name="P:FC.Framework.Fakes.StubUnknowExecption.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:FC.Framework.Fakes.StubUnknowExecption.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="P:FC.Framework.Fakes.StubUnknowExecption.Message">
            <summary>设置 Exception.get_Message() 的 stub</summary>
        </member>
        <member name="P:FC.Framework.Fakes.StubUnknowExecption.Source">
            <summary>设置 Exception.get_Source() 的 stub</summary>
        </member>
        <member name="P:FC.Framework.Fakes.StubUnknowExecption.StackTrace">
            <summary>设置 Exception.get_StackTrace() 的 stub</summary>
        </member>
        <member name="T:FC.Framework.Repository.Fakes.ShimConnectionString">
            <summary>FC.Framework.Repository.ConnectionString 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.Repository.Fakes.ShimConnectionString.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.Repository.Fakes.ShimConnectionString.#ctor(FC.Framework.Repository.ConnectionString)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.Repository.Fakes.ShimConnectionString.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.Repository.Fakes.ShimConnectionString.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.Repository.Fakes.ShimConnectionString.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.Repository.Fakes.ShimConnectionString.ConstructorStringString">
            <summary>设置 ConnectionString.ConnectionString(String connectionStr, String providerName) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Repository.Fakes.ShimConnectionString.ProviderNameGet">
            <summary>设置 ConnectionString.get_ProviderName() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Repository.Fakes.ShimConnectionString.ValueGet">
            <summary>设置 ConnectionString.get_Value() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.Repository.Fakes.ShimConnectionString.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:FC.Framework.Repository.Fakes.ShimConnectionString.AllInstances.ProviderNameGet">
            <summary>设置 ConnectionString.get_ProviderName() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Repository.Fakes.ShimConnectionString.AllInstances.ValueGet">
            <summary>设置 ConnectionString.get_Value() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.Repository.Fakes.StubConnectionString">
            <summary>FC.Framework.Repository.ConnectionString 的存根类型</summary>
        </member>
        <member name="M:FC.Framework.Repository.Fakes.StubConnectionString.#ctor(System.String,System.String)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:FC.Framework.Repository.Fakes.StubConnectionString.InitializeStub">
            <summary>初始化 type StubConnectionString 的新实例</summary>
        </member>
        <member name="P:FC.Framework.Repository.Fakes.StubConnectionString.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:FC.Framework.Repository.Fakes.StubConnectionString.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:FC.Framework.Repository.Fakes.StubConnectionString.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:FC.Framework.Repository.Fakes.StubIRepository">
            <summary>FC.Framework.Repository.IRepository 的存根类型</summary>
        </member>
        <member name="M:FC.Framework.Repository.Fakes.StubIRepository.#ctor">
            <summary>初始化 type StubIRepository 的新实例</summary>
        </member>
        <member name="M:FC.Framework.Repository.Fakes.StubIRepository.AddOf1M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{``0})">
            <summary>设置 Add(!!0 aggregate) 的存根</summary>
        </member>
        <member name="M:FC.Framework.Repository.Fakes.StubIRepository.fcf::FC#Framework#Repository#IRepository#Add``1(``0)">
            <summary>设置 IRepository.Add(!!0 aggregate) 的 存根</summary>
        </member>
        <member name="M:FC.Framework.Repository.Fakes.StubIRepository.fcf::FC#Framework#Repository#IRepository#FindById``1(System.Int32)">
            <summary>设置 IRepository.FindById(Int32 id) 的 存根</summary>
        </member>
        <member name="M:FC.Framework.Repository.Fakes.StubIRepository.FindByIdOf1Int32``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Int32,``0})">
            <summary>设置 FindById(Int32 id) 的存根</summary>
        </member>
        <member name="T:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender">
            <summary>FC.Framework.Utilities.BaiduOpenPlatformMessageSender 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.SendMessageStringStringStringString">
            <summary>设置 BaiduOpenPlatformMessageSender.SendMessage(String title, String msg, String userID, String channelID) 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimBaiduPush">
            <summary>FC.Framework.Utilities.BaiduOpenPlatformMessageSender+BaiduPush 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimBaiduPush.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimBaiduPush.#ctor(FC.Framework.Utilities.BaiduOpenPlatformMessageSender.BaiduPush)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimBaiduPush.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimBaiduPush.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimBaiduPush.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimBaiduPush.ConstructorStringString">
            <summary>设置 BaiduPush.BaiduPush(String httpMehtod, String secret_key) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimBaiduPush.PushMessageBaiduOpenPlatformMessageSenderPushOptions">
            <summary>设置 BaiduPush.PushMessage(PushOptions opts) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimBaiduPush._PushMessageb__0PropertyInfo">
            <summary>设置 BaiduPush.&lt;PushMessage&gt;b__0(PropertyInfo p) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimBaiduPush.httpMehtodGet">
            <summary>设置 BaiduPush.get_httpMehtod() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimBaiduPush.httpMehtodSetString">
            <summary>设置 BaiduPush.set_httpMehtod(String value) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimBaiduPush.optsGet">
            <summary>设置 BaiduPush.get_opts() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimBaiduPush.optsSetBaiduOpenPlatformMessageSenderPushOptions">
            <summary>设置 BaiduPush.set_opts(PushOptions value) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimBaiduPush.secret_keyGet">
            <summary>设置 BaiduPush.get_secret_key() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimBaiduPush.secret_keySetString">
            <summary>设置 BaiduPush.set_secret_key(String value) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimBaiduPush.urlGet">
            <summary>设置 BaiduPush.get_url() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimBaiduPush.urlSetString">
            <summary>设置 BaiduPush.set_url(String value) 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimBaiduPush.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimBaiduPush.AllInstances.PushMessageBaiduOpenPlatformMessageSenderPushOptions">
            <summary>设置 BaiduPush.PushMessage(PushOptions opts) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimBaiduPush.AllInstances.httpMehtodGet">
            <summary>设置 BaiduPush.get_httpMehtod() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimBaiduPush.AllInstances.httpMehtodSetString">
            <summary>设置 BaiduPush.set_httpMehtod(String value) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimBaiduPush.AllInstances.optsGet">
            <summary>设置 BaiduPush.get_opts() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimBaiduPush.AllInstances.optsSetBaiduOpenPlatformMessageSenderPushOptions">
            <summary>设置 BaiduPush.set_opts(PushOptions value) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimBaiduPush.AllInstances.secret_keyGet">
            <summary>设置 BaiduPush.get_secret_key() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimBaiduPush.AllInstances.secret_keySetString">
            <summary>设置 BaiduPush.set_secret_key(String value) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimBaiduPush.AllInstances.urlGet">
            <summary>设置 BaiduPush.get_url() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimBaiduPush.AllInstances.urlSetString">
            <summary>设置 BaiduPush.set_url(String value) 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimBaiduPushNotification">
            <summary>FC.Framework.Utilities.BaiduOpenPlatformMessageSender+BaiduPushNotification 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimBaiduPushNotification.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimBaiduPushNotification.#ctor(FC.Framework.Utilities.BaiduOpenPlatformMessageSender.BaiduPushNotification)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimBaiduPushNotification.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimBaiduPushNotification.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimBaiduPushNotification.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimBaiduPushNotification.Constructor">
            <summary>设置 BaiduPushNotification.BaiduPushNotification() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimBaiduPushNotification.custom_contentGet">
            <summary>设置 BaiduPushNotification.get_custom_content() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimBaiduPushNotification.custom_contentSetString">
            <summary>设置 BaiduPushNotification.set_custom_content(String value) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimBaiduPushNotification.descriptionGet">
            <summary>设置 BaiduPushNotification.get_description() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimBaiduPushNotification.descriptionSetString">
            <summary>设置 BaiduPushNotification.set_description(String value) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimBaiduPushNotification.getJsonString">
            <summary>设置 BaiduPushNotification.getJsonString() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimBaiduPushNotification.notification_basic_styleGet">
            <summary>设置 BaiduPushNotification.get_notification_basic_style() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimBaiduPushNotification.notification_basic_styleSetInt32">
            <summary>设置 BaiduPushNotification.set_notification_basic_style(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimBaiduPushNotification.notification_builder_idGet">
            <summary>设置 BaiduPushNotification.get_notification_builder_id() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimBaiduPushNotification.notification_builder_idSetInt32">
            <summary>设置 BaiduPushNotification.set_notification_builder_id(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimBaiduPushNotification.open_typeGet">
            <summary>设置 BaiduPushNotification.get_open_type() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimBaiduPushNotification.open_typeSetInt32">
            <summary>设置 BaiduPushNotification.set_open_type(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimBaiduPushNotification.pkg_contentGet">
            <summary>设置 BaiduPushNotification.get_pkg_content() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimBaiduPushNotification.pkg_contentSetString">
            <summary>设置 BaiduPushNotification.set_pkg_content(String value) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimBaiduPushNotification.titleGet">
            <summary>设置 BaiduPushNotification.get_title() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimBaiduPushNotification.titleSetString">
            <summary>设置 BaiduPushNotification.set_title(String value) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimBaiduPushNotification.urlGet">
            <summary>设置 BaiduPushNotification.get_url() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimBaiduPushNotification.urlSetString">
            <summary>设置 BaiduPushNotification.set_url(String value) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimBaiduPushNotification.user_confirmGet">
            <summary>设置 BaiduPushNotification.get_user_confirm() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimBaiduPushNotification.user_confirmSetInt32">
            <summary>设置 BaiduPushNotification.set_user_confirm(Int32 value) 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimBaiduPushNotification.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimBaiduPushNotification.AllInstances.custom_contentGet">
            <summary>设置 BaiduPushNotification.get_custom_content() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimBaiduPushNotification.AllInstances.custom_contentSetString">
            <summary>设置 BaiduPushNotification.set_custom_content(String value) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimBaiduPushNotification.AllInstances.descriptionGet">
            <summary>设置 BaiduPushNotification.get_description() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimBaiduPushNotification.AllInstances.descriptionSetString">
            <summary>设置 BaiduPushNotification.set_description(String value) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimBaiduPushNotification.AllInstances.getJsonString">
            <summary>设置 BaiduPushNotification.getJsonString() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimBaiduPushNotification.AllInstances.notification_basic_styleGet">
            <summary>设置 BaiduPushNotification.get_notification_basic_style() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimBaiduPushNotification.AllInstances.notification_basic_styleSetInt32">
            <summary>设置 BaiduPushNotification.set_notification_basic_style(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimBaiduPushNotification.AllInstances.notification_builder_idGet">
            <summary>设置 BaiduPushNotification.get_notification_builder_id() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimBaiduPushNotification.AllInstances.notification_builder_idSetInt32">
            <summary>设置 BaiduPushNotification.set_notification_builder_id(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimBaiduPushNotification.AllInstances.open_typeGet">
            <summary>设置 BaiduPushNotification.get_open_type() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimBaiduPushNotification.AllInstances.open_typeSetInt32">
            <summary>设置 BaiduPushNotification.set_open_type(Int32 value) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimBaiduPushNotification.AllInstances.pkg_contentGet">
            <summary>设置 BaiduPushNotification.get_pkg_content() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimBaiduPushNotification.AllInstances.pkg_contentSetString">
            <summary>设置 BaiduPushNotification.set_pkg_content(String value) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimBaiduPushNotification.AllInstances.titleGet">
            <summary>设置 BaiduPushNotification.get_title() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimBaiduPushNotification.AllInstances.titleSetString">
            <summary>设置 BaiduPushNotification.set_title(String value) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimBaiduPushNotification.AllInstances.urlGet">
            <summary>设置 BaiduPushNotification.get_url() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimBaiduPushNotification.AllInstances.urlSetString">
            <summary>设置 BaiduPushNotification.set_url(String value) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimBaiduPushNotification.AllInstances.user_confirmGet">
            <summary>设置 BaiduPushNotification.get_user_confirm() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimBaiduPushNotification.AllInstances.user_confirmSetInt32">
            <summary>设置 BaiduPushNotification.set_user_confirm(Int32 value) 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimPushOptions">
            <summary>FC.Framework.Utilities.BaiduOpenPlatformMessageSender+PushOptions 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimPushOptions.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimPushOptions.#ctor(FC.Framework.Utilities.BaiduOpenPlatformMessageSender.PushOptions)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimPushOptions.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimPushOptions.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimPushOptions.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimPushOptions.ConstructorStringStringStringStringStringStringUInt32">
            <summary>设置 PushOptions.PushOptions(String method, String apikey, String user_id, String channel_id, String messages, String msg_keys, UInt32 timestamp) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimPushOptions.ConstructorStringStringStringStringStringUInt32">
            <summary>设置 PushOptions.PushOptions(String method, String apikey, String tag, String messages, String msg_keys, UInt32 timestamp) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimPushOptions.ConstructorStringStringStringStringUInt32">
            <summary>设置 PushOptions.PushOptions(String method, String apikey, String messages, String msg_keys, UInt32 timestamp) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimPushOptions.ConstructorStringStringStringUInt32StringStringUInt32UInt32StringStringUInt32UInt32UInt32UInt32">
            <summary>设置 PushOptions.PushOptions(String method, String apikey, String user_id, UInt32 push_type, String channel_id, String tag, UInt32 device_type, UInt32 message_type, String messages, String msg_keys, UInt32 message_expires, UInt32 timestamp, UInt32 expires, UInt32 v) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimPushOptions.apikeyGet">
            <summary>设置 PushOptions.get_apikey() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimPushOptions.apikeySetString">
            <summary>设置 PushOptions.set_apikey(String value) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimPushOptions.channel_idGet">
            <summary>设置 PushOptions.get_channel_id() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimPushOptions.channel_idSetString">
            <summary>设置 PushOptions.set_channel_id(String value) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimPushOptions.device_typeGet">
            <summary>设置 PushOptions.get_device_type() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimPushOptions.device_typeSetNullableOfUInt32">
            <summary>设置 PushOptions.set_device_type(Nullable`1&lt;UInt32&gt; value) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimPushOptions.expiresGet">
            <summary>设置 PushOptions.get_expires() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimPushOptions.expiresSetNullableOfUInt32">
            <summary>设置 PushOptions.set_expires(Nullable`1&lt;UInt32&gt; value) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimPushOptions.message_expiresGet">
            <summary>设置 PushOptions.get_message_expires() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimPushOptions.message_expiresSetNullableOfUInt32">
            <summary>设置 PushOptions.set_message_expires(Nullable`1&lt;UInt32&gt; value) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimPushOptions.message_typeGet">
            <summary>设置 PushOptions.get_message_type() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimPushOptions.message_typeSetNullableOfUInt32">
            <summary>设置 PushOptions.set_message_type(Nullable`1&lt;UInt32&gt; value) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimPushOptions.messagesGet">
            <summary>设置 PushOptions.get_messages() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimPushOptions.messagesSetString">
            <summary>设置 PushOptions.set_messages(String value) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimPushOptions.methodGet">
            <summary>设置 PushOptions.get_method() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimPushOptions.methodSetString">
            <summary>设置 PushOptions.set_method(String value) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimPushOptions.msg_keysGet">
            <summary>设置 PushOptions.get_msg_keys() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimPushOptions.msg_keysSetString">
            <summary>设置 PushOptions.set_msg_keys(String value) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimPushOptions.push_typeGet">
            <summary>设置 PushOptions.get_push_type() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimPushOptions.push_typeSetUInt32">
            <summary>设置 PushOptions.set_push_type(UInt32 value) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimPushOptions.signGet">
            <summary>设置 PushOptions.get_sign() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimPushOptions.signSetString">
            <summary>设置 PushOptions.set_sign(String value) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimPushOptions.tagGet">
            <summary>设置 PushOptions.get_tag() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimPushOptions.tagSetString">
            <summary>设置 PushOptions.set_tag(String value) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimPushOptions.timestampGet">
            <summary>设置 PushOptions.get_timestamp() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimPushOptions.timestampSetUInt32">
            <summary>设置 PushOptions.set_timestamp(UInt32 value) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimPushOptions.user_idGet">
            <summary>设置 PushOptions.get_user_id() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimPushOptions.user_idSetString">
            <summary>设置 PushOptions.set_user_id(String value) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimPushOptions.vGet">
            <summary>设置 PushOptions.get_v() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimPushOptions.vSetNullableOfUInt32">
            <summary>设置 PushOptions.set_v(Nullable`1&lt;UInt32&gt; value) 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimPushOptions.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimPushOptions.AllInstances.apikeyGet">
            <summary>设置 PushOptions.get_apikey() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimPushOptions.AllInstances.apikeySetString">
            <summary>设置 PushOptions.set_apikey(String value) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimPushOptions.AllInstances.channel_idGet">
            <summary>设置 PushOptions.get_channel_id() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimPushOptions.AllInstances.channel_idSetString">
            <summary>设置 PushOptions.set_channel_id(String value) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimPushOptions.AllInstances.device_typeGet">
            <summary>设置 PushOptions.get_device_type() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimPushOptions.AllInstances.device_typeSetNullableOfUInt32">
            <summary>设置 PushOptions.set_device_type(Nullable`1&lt;UInt32&gt; value) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimPushOptions.AllInstances.expiresGet">
            <summary>设置 PushOptions.get_expires() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimPushOptions.AllInstances.expiresSetNullableOfUInt32">
            <summary>设置 PushOptions.set_expires(Nullable`1&lt;UInt32&gt; value) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimPushOptions.AllInstances.message_expiresGet">
            <summary>设置 PushOptions.get_message_expires() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimPushOptions.AllInstances.message_expiresSetNullableOfUInt32">
            <summary>设置 PushOptions.set_message_expires(Nullable`1&lt;UInt32&gt; value) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimPushOptions.AllInstances.message_typeGet">
            <summary>设置 PushOptions.get_message_type() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimPushOptions.AllInstances.message_typeSetNullableOfUInt32">
            <summary>设置 PushOptions.set_message_type(Nullable`1&lt;UInt32&gt; value) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimPushOptions.AllInstances.messagesGet">
            <summary>设置 PushOptions.get_messages() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimPushOptions.AllInstances.messagesSetString">
            <summary>设置 PushOptions.set_messages(String value) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimPushOptions.AllInstances.methodGet">
            <summary>设置 PushOptions.get_method() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimPushOptions.AllInstances.methodSetString">
            <summary>设置 PushOptions.set_method(String value) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimPushOptions.AllInstances.msg_keysGet">
            <summary>设置 PushOptions.get_msg_keys() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimPushOptions.AllInstances.msg_keysSetString">
            <summary>设置 PushOptions.set_msg_keys(String value) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimPushOptions.AllInstances.push_typeGet">
            <summary>设置 PushOptions.get_push_type() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimPushOptions.AllInstances.push_typeSetUInt32">
            <summary>设置 PushOptions.set_push_type(UInt32 value) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimPushOptions.AllInstances.signGet">
            <summary>设置 PushOptions.get_sign() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimPushOptions.AllInstances.signSetString">
            <summary>设置 PushOptions.set_sign(String value) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimPushOptions.AllInstances.tagGet">
            <summary>设置 PushOptions.get_tag() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimPushOptions.AllInstances.tagSetString">
            <summary>设置 PushOptions.set_tag(String value) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimPushOptions.AllInstances.timestampGet">
            <summary>设置 PushOptions.get_timestamp() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimPushOptions.AllInstances.timestampSetUInt32">
            <summary>设置 PushOptions.set_timestamp(UInt32 value) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimPushOptions.AllInstances.user_idGet">
            <summary>设置 PushOptions.get_user_id() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimPushOptions.AllInstances.user_idSetString">
            <summary>设置 PushOptions.set_user_id(String value) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimPushOptions.AllInstances.vGet">
            <summary>设置 PushOptions.get_v() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimBaiduOpenPlatformMessageSender.ShimPushOptions.AllInstances.vSetNullableOfUInt32">
            <summary>设置 PushOptions.set_v(Nullable`1&lt;UInt32&gt; value) 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.Utilities.Fakes.ShimCheck">
            <summary>FC.Framework.Utilities.Check 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.Utilities.Fakes.ShimCheck.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.Utilities.Fakes.ShimCheck.#ctor(FC.Framework.Utilities.Check)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.Utilities.Fakes.ShimCheck.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.Utilities.Fakes.ShimCheck.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimCheck.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimCheck.Constructor">
            <summary>设置 Check.Check() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.Utilities.Fakes.ShimCheck.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.Utilities.Fakes.ShimCheck.ShimArgument">
            <summary>FC.Framework.Utilities.Check+Argument 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.Utilities.Fakes.ShimCheck.ShimArgument.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.Utilities.Fakes.ShimCheck.ShimArgument.#ctor(FC.Framework.Utilities.Check.Argument)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.Utilities.Fakes.ShimCheck.ShimArgument.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.Utilities.Fakes.ShimCheck.ShimArgument.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:FC.Framework.Utilities.Fakes.ShimCheck.ShimArgument.IsNotEmptyOf1IEnumerableOfM0String``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.Collections.Generic.IEnumerable{``0},System.String})">
            <summary>设置 Argument.IsNotEmpty(IEnumerable`1&lt;!!0&gt; argument, String argumentName) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimCheck.ShimArgument.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimCheck.ShimArgument.Constructor">
            <summary>设置 Argument.Argument() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimCheck.ShimArgument.IsNotEmptyGuidString">
            <summary>设置 Argument.IsNotEmpty(Guid argument, String argumentName) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimCheck.ShimArgument.IsNotEmptyStringString">
            <summary>设置 Argument.IsNotEmpty(String argument, String argumentName) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimCheck.ShimArgument.IsNotInFutureDateTimeString">
            <summary>设置 Argument.IsNotInFuture(DateTime argument, String argumentName) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimCheck.ShimArgument.IsNotInPastDateTimeString">
            <summary>设置 Argument.IsNotInPast(DateTime argument, String argumentName) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimCheck.ShimArgument.IsNotInvalidEmailStringString">
            <summary>设置 Argument.IsNotInvalidEmail(String argument, String argumentName) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimCheck.ShimArgument.IsNotInvalidWebUrlStringString">
            <summary>设置 Argument.IsNotInvalidWebUrl(String argument, String argumentName) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimCheck.ShimArgument.IsNotNegativeDecimalString">
            <summary>设置 Argument.IsNotNegative(Decimal argument, String argumentName) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimCheck.ShimArgument.IsNotNegativeInt32String">
            <summary>设置 Argument.IsNotNegative(Int32 argument, String argumentName) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimCheck.ShimArgument.IsNotNegativeInt64String">
            <summary>设置 Argument.IsNotNegative(Int64 argument, String argumentName) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimCheck.ShimArgument.IsNotNegativeOrZeroDecimalString">
            <summary>设置 Argument.IsNotNegativeOrZero(Decimal argument, String argumentName) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimCheck.ShimArgument.IsNotNegativeOrZeroDoubleString">
            <summary>设置 Argument.IsNotNegativeOrZero(Double argument, String argumentName) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimCheck.ShimArgument.IsNotNegativeOrZeroInt32String">
            <summary>设置 Argument.IsNotNegativeOrZero(Int32 argument, String argumentName) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimCheck.ShimArgument.IsNotNegativeOrZeroInt64String">
            <summary>设置 Argument.IsNotNegativeOrZero(Int64 argument, String argumentName) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimCheck.ShimArgument.IsNotNegativeOrZeroSingleString">
            <summary>设置 Argument.IsNotNegativeOrZero(Single argument, String argumentName) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimCheck.ShimArgument.IsNotNegativeOrZeroTimeSpanString">
            <summary>设置 Argument.IsNotNegativeOrZero(TimeSpan argument, String argumentName) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimCheck.ShimArgument.IsNotNegativeSingleString">
            <summary>设置 Argument.IsNotNegative(Single argument, String argumentName) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimCheck.ShimArgument.IsNotNegativeTimeSpanString">
            <summary>设置 Argument.IsNotNegative(TimeSpan argument, String argumentName) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimCheck.ShimArgument.IsNotNullObjectString">
            <summary>设置 Argument.IsNotNull(Object argument, String argumentName) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimCheck.ShimArgument.IsNotOutOfLengthStringInt32String">
            <summary>设置 Argument.IsNotOutOfLength(String argument, Int32 length, String argumentName) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimCheck.ShimArgument.IsNotOutOfRangeInt32Int32Int32String">
            <summary>设置 Argument.IsNotOutOfRange(Int32 argument, Int32 min, Int32 max, String argumentName) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimCheck.ShimArgument.IsNotZeroDecimalString">
            <summary>设置 Argument.IsNotZero(Decimal argument, String argumentName) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimCheck.ShimArgument.IsNotZeroInt32String">
            <summary>设置 Argument.IsNotZero(Int32 argument, String argumentName) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimCheck.ShimArgument.IsNotZeroInt64String">
            <summary>设置 Argument.IsNotZero(Int64 argument, String argumentName) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimCheck.ShimArgument.IsNotZeroSingleString">
            <summary>设置 Argument.IsNotZero(Single argument, String argumentName) 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.Utilities.Fakes.ShimCheck.ShimArgument.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.Utilities.Fakes.ShimConfigurationManagerWrapper">
            <summary>FC.Framework.Utilities.ConfigurationManagerWrapper 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.Utilities.Fakes.ShimConfigurationManagerWrapper.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.Utilities.Fakes.ShimConfigurationManagerWrapper.#ctor(FC.Framework.Utilities.ConfigurationManagerWrapper)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.Utilities.Fakes.ShimConfigurationManagerWrapper.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.Utilities.Fakes.ShimConfigurationManagerWrapper.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:FC.Framework.Utilities.Fakes.ShimConfigurationManagerWrapper.GetSectionOf1String``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.String,``0})">
            <summary>设置 ConfigurationManagerWrapper.GetSection(String sectionName) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimConfigurationManagerWrapper.AppSettingsGet">
            <summary>设置 ConfigurationManagerWrapper.get_AppSettings() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimConfigurationManagerWrapper.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimConfigurationManagerWrapper.Constructor">
            <summary>设置 ConfigurationManagerWrapper.ConfigurationManagerWrapper() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimConfigurationManagerWrapper.GetConnectionStringString">
            <summary>设置 ConfigurationManagerWrapper.GetConnectionString(String name) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimConfigurationManagerWrapper.GetProviderNameString">
            <summary>设置 ConfigurationManagerWrapper.GetProviderName(String name) 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.Utilities.Fakes.ShimConfigurationManagerWrapper.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.Utilities.Fakes.ShimCryptoHelper">
            <summary>FC.Framework.Utilities.CryptoHelper 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.Utilities.Fakes.ShimCryptoHelper.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.Utilities.Fakes.ShimCryptoHelper.#ctor(FC.Framework.Utilities.CryptoHelper)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.Utilities.Fakes.ShimCryptoHelper.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.Utilities.Fakes.ShimCryptoHelper.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimCryptoHelper.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimCryptoHelper.Constructor">
            <summary>设置 CryptoHelper.CryptoHelper() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimCryptoHelper.DecryptStringString">
            <summary>设置 CryptoHelper.Decrypt(String decryptKey, String encodeString) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimCryptoHelper.EncryptStringString">
            <summary>设置 CryptoHelper.Encrypt(String encryptKey, String encodeString) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimCryptoHelper.MD5String">
            <summary>设置 CryptoHelper.MD5(String targetStr) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimCryptoHelper.StaticConstructor">
            <summary>设置 CryptoHelper.CryptoHelper() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.Utilities.Fakes.ShimCryptoHelper.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.Utilities.Fakes.ShimDeepCloneHelper">
            <summary>FC.Framework.Utilities.DeepCloneHelper 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.Utilities.Fakes.ShimDeepCloneHelper.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.Utilities.Fakes.ShimDeepCloneHelper.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.Utilities.Fakes.ShimDeepCloneHelper.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:FC.Framework.Utilities.Fakes.ShimDeepCloneHelper.DeepCloneOf1M0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``0,``0})">
            <summary>设置 DeepCloneHelper.DeepClone(!!0 obj) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimDeepCloneHelper.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="T:FC.Framework.Utilities.Fakes.ShimEmailHelper">
            <summary>FC.Framework.Utilities.EmailHelper 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.Utilities.Fakes.ShimEmailHelper.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.Utilities.Fakes.ShimEmailHelper.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.Utilities.Fakes.ShimEmailHelper.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimEmailHelper.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimEmailHelper.BuildMessageWithStringStringStringString">
            <summary>设置 EmailHelper.BuildMessageWith(String fromAddress, String toAddress, String subject, String body) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimEmailHelper.ConfigStringStringStringString">
            <summary>设置 EmailHelper.Config(String emailServer, String webMasterEmail, String emailAccount, String emailPassword) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimEmailHelper.SendMailAsyncStringStringString">
            <summary>设置 EmailHelper.SendMailAsync(String toAddress, String subject, String body) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimEmailHelper.SendMailMailMessage">
            <summary>设置 EmailHelper.SendMail(MailMessage mail) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimEmailHelper.SendMailStringStringString">
            <summary>设置 EmailHelper.SendMail(String toAddress, String subject, String body) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimEmailHelper.StaticConstructor">
            <summary>设置 EmailHelper.EmailHelper() 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.Utilities.Fakes.ShimKetamaNodeLocator">
            <summary>FC.Framework.Utilities.KetamaNodeLocator 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.Utilities.Fakes.ShimKetamaNodeLocator.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.Utilities.Fakes.ShimKetamaNodeLocator.#ctor(FC.Framework.Utilities.KetamaNodeLocator)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.Utilities.Fakes.ShimKetamaNodeLocator.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.Utilities.Fakes.ShimKetamaNodeLocator.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimKetamaNodeLocator.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimKetamaNodeLocator.ConstructorListOfStringInt32">
            <summary>设置 KetamaNodeLocator.KetamaNodeLocator(List`1&lt;String&gt; nodes, Int32 nodeCopies) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimKetamaNodeLocator.GetNodeForKeyInt64">
            <summary>设置 KetamaNodeLocator.GetNodeForKey(Int64 hash) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimKetamaNodeLocator.GetPrimaryString">
            <summary>设置 KetamaNodeLocator.GetPrimary(String k) 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.Utilities.Fakes.ShimKetamaNodeLocator.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimKetamaNodeLocator.AllInstances.GetNodeForKeyInt64">
            <summary>设置 KetamaNodeLocator.GetNodeForKey(Int64 hash) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimKetamaNodeLocator.AllInstances.GetPrimaryString">
            <summary>设置 KetamaNodeLocator.GetPrimary(String k) 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.Utilities.Fakes.ShimKetamaNodeLocator.ShimHashAlgorithm">
            <summary>FC.Framework.Utilities.KetamaNodeLocator+HashAlgorithm 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.Utilities.Fakes.ShimKetamaNodeLocator.ShimHashAlgorithm.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.Utilities.Fakes.ShimKetamaNodeLocator.ShimHashAlgorithm.#ctor(FC.Framework.Utilities.KetamaNodeLocator.HashAlgorithm)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.Utilities.Fakes.ShimKetamaNodeLocator.ShimHashAlgorithm.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.Utilities.Fakes.ShimKetamaNodeLocator.ShimHashAlgorithm.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimKetamaNodeLocator.ShimHashAlgorithm.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimKetamaNodeLocator.ShimHashAlgorithm.Constructor">
            <summary>设置 HashAlgorithm.HashAlgorithm() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimKetamaNodeLocator.ShimHashAlgorithm.computeMd5String">
            <summary>设置 HashAlgorithm.computeMd5(String k) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimKetamaNodeLocator.ShimHashAlgorithm.hashByteArrayInt32">
            <summary>设置 HashAlgorithm.hash(Byte[] digest, Int32 nTime) 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.Utilities.Fakes.ShimKetamaNodeLocator.ShimHashAlgorithm.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.Utilities.Fakes.ShimPasswordHelper">
            <summary>FC.Framework.Utilities.PasswordHelper 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.Utilities.Fakes.ShimPasswordHelper.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.Utilities.Fakes.ShimPasswordHelper.#ctor(FC.Framework.Utilities.PasswordHelper)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:FC.Framework.Utilities.Fakes.ShimPasswordHelper.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.Utilities.Fakes.ShimPasswordHelper.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimPasswordHelper.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimPasswordHelper.Constructor">
            <summary>设置 PasswordHelper.PasswordHelper() 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimPasswordHelper.EncryptMD5String">
            <summary>设置 PasswordHelper.EncryptMD5(String astr_Value) 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.Utilities.Fakes.ShimPasswordHelper.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="T:FC.Framework.Utilities.Fakes.ShimTypeUtil">
            <summary>FC.Framework.Utilities.TypeUtil 的填充码类型</summary>
        </member>
        <member name="M:FC.Framework.Utilities.Fakes.ShimTypeUtil.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:FC.Framework.Utilities.Fakes.ShimTypeUtil.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:FC.Framework.Utilities.Fakes.ShimTypeUtil.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimTypeUtil.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimTypeUtil.GetGenericArgumentTypesTypeType">
            <summary>设置 TypeUtil.GetGenericArgumentTypes(Type concreteType, Type genericType) 的 填充码</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.ShimTypeUtil.IsAttributeDefinedInMethodOrDeclaringClassMethodInfoType">
            <summary>设置 TypeUtil.IsAttributeDefinedInMethodOrDeclaringClass(MethodInfo method, Type attributeType) 的 填充码</summary>
        </member>
        <member name="T:FC.Framework.Utilities.Fakes.StubConfigurationManagerWrapper">
            <summary>FC.Framework.Utilities.ConfigurationManagerWrapper 的存根类型</summary>
        </member>
        <member name="M:FC.Framework.Utilities.Fakes.StubConfigurationManagerWrapper.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:FC.Framework.Utilities.Fakes.StubConfigurationManagerWrapper.InitializeStub">
            <summary>初始化 type StubConfigurationManagerWrapper 的新实例</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.StubConfigurationManagerWrapper.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.StubConfigurationManagerWrapper.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.StubConfigurationManagerWrapper.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:FC.Framework.Utilities.Fakes.StubCryptoHelper">
            <summary>FC.Framework.Utilities.CryptoHelper 的存根类型</summary>
        </member>
        <member name="M:FC.Framework.Utilities.Fakes.StubCryptoHelper.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:FC.Framework.Utilities.Fakes.StubCryptoHelper.InitializeStub">
            <summary>初始化 type StubCryptoHelper 的新实例</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.StubCryptoHelper.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.StubCryptoHelper.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.StubCryptoHelper.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:FC.Framework.Utilities.Fakes.StubKetamaNodeLocator">
            <summary>FC.Framework.Utilities.KetamaNodeLocator 的存根类型</summary>
        </member>
        <member name="M:FC.Framework.Utilities.Fakes.StubKetamaNodeLocator.#ctor(System.Collections.Generic.List{System.String},System.Int32)">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:FC.Framework.Utilities.Fakes.StubKetamaNodeLocator.InitializeStub">
            <summary>初始化 type StubKetamaNodeLocator 的新实例</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.StubKetamaNodeLocator.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.StubKetamaNodeLocator.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.StubKetamaNodeLocator.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:FC.Framework.Utilities.Fakes.StubPasswordHelper">
            <summary>FC.Framework.Utilities.PasswordHelper 的存根类型</summary>
        </member>
        <member name="M:FC.Framework.Utilities.Fakes.StubPasswordHelper.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:FC.Framework.Utilities.Fakes.StubPasswordHelper.InitializeStub">
            <summary>初始化 type StubPasswordHelper 的新实例</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.StubPasswordHelper.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.StubPasswordHelper.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:FC.Framework.Utilities.Fakes.StubPasswordHelper.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
    </members>
</doc>
